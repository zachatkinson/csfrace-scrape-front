---
/**
 * LiquidGlass Component - Astro Implementation
 * Converted from React to pure Astro following SOLID principles
 * Maintains Strategy Pattern through TypeScript utilities
 */

import type { HTMLAttributes } from 'astro/types';
import { getGlassVariantConfig } from './strategies/GlassVariantRegistry';
import type { GlassVariantProps } from './strategies/GlassVariantStrategy';

// Astro component props interface
export interface Props extends HTMLAttributes<'div'> {
  // Glass Material Properties - extensible through strategy pattern
  variant?: string;

  // Interactive Behavior
  interactive?: boolean;

  // Apple's Design Principles
  adaptive?: boolean;    // Content-adaptive (Deference principle)
  lensing?: boolean;     // Physical lensing effects
  loading?: boolean;     // Loading shimmer state

  // Environmental Adaptation
  blur?: 'subtle' | 'default' | 'strong';

  // Accessibility
  reducedMotion?: boolean;
  highContrast?: boolean;

  // Custom styling
  as?: string;
  class?: string;
}

// Extract props with defaults
const {
  variant = 'default',
  interactive = false,
  adaptive = false,
  lensing = false,
  loading = false,
  blur = 'default',
  reducedMotion,
  highContrast,
  as: Element = 'div',
  class: className = '',
  ...htmlProps
} = Astro.props;

// Prepare props for strategy pattern
const glassVariantProps: GlassVariantProps = {
  interactive,
  adaptive,
  lensing,
  loading,
  blur,
  reducedMotion,
  highContrast,
};

// Get configuration from strategy pattern - extensible without modification!
const variantConfig = getGlassVariantConfig(variant, glassVariantProps);

// Combine all classes from strategy
const allClasses = [
  ...variantConfig.classes,
  className,
].filter(Boolean).join(' ');

// Get the element to render
const TagName = Element;
---

<!-- Render the liquid glass element -->
<TagName
  class={allClasses}
  style={variantConfig.customProperties}
  {...htmlProps}
>
  <slot />
</TagName>

<style>
  /* Base liquid glass styles */
  .liquid-glass {
    position: relative;
    backdrop-filter: blur(var(--glass-blur, 20px));
    -webkit-backdrop-filter: blur(var(--glass-blur, 20px));
    background: var(--glass-bg, rgba(255, 255, 255, 0.1));
    border: var(--glass-border, 1px solid rgba(255, 255, 255, 0.2));
    border-radius: var(--glass-radius, 12px);
    box-shadow: var(--glass-shadow,
      0 8px 32px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.2)
    );
  }

  /* Interactive states */
  .liquid-glass-interactive {
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .liquid-glass-interactive:hover {
    background: var(--glass-bg-hover, rgba(255, 255, 255, 0.15));
    border-color: var(--glass-border-hover, rgba(255, 255, 255, 0.3));
    transform: translateY(-1px);
    box-shadow: var(--glass-shadow-hover,
      0 12px 40px rgba(0, 0, 0, 0.15),
      inset 0 1px 0 rgba(255, 255, 255, 0.25)
    );
  }

  .liquid-glass-interactive:active {
    transform: translateY(0);
    box-shadow: var(--glass-shadow-active,
      0 4px 16px rgba(0, 0, 0, 0.1),
      inset 0 1px 0 rgba(255, 255, 255, 0.2)
    );
  }

  /* Adaptive behavior */
  .liquid-glass-adaptive {
    background: var(--glass-bg-adaptive, rgba(255, 255, 255, 0.08));
  }

  /* Lensing effects */
  .liquid-glass-lens::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.1) 0%,
      transparent 50%,
      rgba(255, 255, 255, 0.05) 100%
    );
    border-radius: inherit;
    pointer-events: none;
  }

  /* Loading state */
  .glass-loading {
    overflow: hidden;
  }

  .glass-loading::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    animation: glass-shimmer 1.5s ease-in-out infinite;
  }

  @keyframes glass-shimmer {
    to {
      left: 100%;
    }
  }

  /* Blur variants */
  .backdrop-blur-glass-subtle {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .backdrop-blur-glass-strong {
    backdrop-filter: blur(40px);
    -webkit-backdrop-filter: blur(40px);
  }

  /* Accessibility */
  .motion-reduce {
    transition: none !important;
    animation: none !important;
  }

  .motion-reduce .liquid-glass-interactive:hover {
    transform: none;
  }

  .contrast-more {
    background: var(--glass-bg-contrast, rgba(255, 255, 255, 0.2));
    border-color: var(--glass-border-contrast, rgba(255, 255, 255, 0.4));
  }

  /* Dark mode adaptations */
  @media (prefers-color-scheme: dark) {
    .liquid-glass {
      background: var(--glass-bg-dark, rgba(0, 0, 0, 0.3));
      border-color: var(--glass-border-dark, rgba(255, 255, 255, 0.1));
    }

    .liquid-glass-interactive:hover {
      background: var(--glass-bg-hover-dark, rgba(0, 0, 0, 0.4));
      border-color: var(--glass-border-hover-dark, rgba(255, 255, 255, 0.2));
    }

    .liquid-glass-adaptive {
      background: var(--glass-bg-adaptive-dark, rgba(0, 0, 0, 0.25));
    }

    .contrast-more {
      background: var(--glass-bg-contrast-dark, rgba(0, 0, 0, 0.5));
      border-color: var(--glass-border-contrast-dark, rgba(255, 255, 255, 0.3));
    }
  }

  /* High contrast mode */
  @media (prefers-contrast: high) {
    .liquid-glass {
      background: var(--glass-bg-high-contrast, rgba(255, 255, 255, 0.9));
      border-color: var(--glass-border-high-contrast, rgba(0, 0, 0, 0.5));
      color: var(--glass-text-high-contrast, #000);
    }

    @media (prefers-color-scheme: dark) {
      .liquid-glass {
        background: var(--glass-bg-high-contrast-dark, rgba(0, 0, 0, 0.9));
        border-color: var(--glass-border-high-contrast-dark, rgba(255, 255, 255, 0.5));
        color: var(--glass-text-high-contrast-dark, #fff);
      }
    }
  }

  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .liquid-glass-interactive {
      transition: none;
    }

    .liquid-glass-interactive:hover {
      transform: none;
    }

    .glass-loading::after {
      animation: none;
    }
  }
</style>
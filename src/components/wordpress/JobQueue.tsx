/**
 * JobQueue Component
 * Real-time job monitoring dashboard with Liquid Glass material
 * Implements Apple's clarity and depth principles with live updates
 */

import React, { useState, useCallback, useMemo } from 'react';
import { LiquidCard, LiquidButton } from '../liquid-glass';

// Job status types
type JobStatus = 'pending' | 'validating' | 'scraping' | 'completed' | 'error' | 'cancelled';

// Job interface\ninterface Job {\n  id: string;\n  url: string;\n  status: JobStatus;\n  progress: number;\n  result?: {\n    convertedHtml: string;\n    images: string[];\n    metadata: {\n      title?: string;\n      type?: 'post' | 'page' | 'product';\n      wordCount?: number;\n      estimatedSize?: string;\n    };\n  };\n  error?: string;\n  createdAt: Date;\n  completedAt?: Date;\n  estimatedTimeRemaining?: number;\n}\n\nexport interface JobQueueProps {\n  jobs: Job[];\n  onJobCancel?: (jobId: string) => void;\n  onJobRetry?: (jobId: string) => void;\n  onJobDelete?: (jobId: string) => void;\n  onJobDownload?: (jobId: string) => void;\n  maxVisibleJobs?: number;\n  className?: string;\n}\n\n/**\n * JobQueue - Premium dashboard for monitoring conversion jobs\n */\nexport const JobQueue: React.FC<JobQueueProps> = ({\n  jobs = [],\n  onJobCancel,\n  onJobRetry,\n  onJobDelete,\n  onJobDownload,\n  maxVisibleJobs = 10,\n  className = '',\n}) => {\n  const [filter, setFilter] = useState<'all' | JobStatus>('all');\n  const [sortBy, setSortBy] = useState<'newest' | 'oldest' | 'progress'>('newest');\n  const [selectedJobs, setSelectedJobs] = useState<Set<string>>(new Set());\n  \n  // Filter and sort jobs\n  const filteredAndSortedJobs = useMemo(() => {\n    let filtered = jobs;\n    \n    // Apply status filter\n    if (filter !== 'all') {\n      filtered = jobs.filter(job => job.status === filter);\n    }\n    \n    // Apply sorting\n    const sorted = [...filtered].sort((a, b) => {\n      switch (sortBy) {\n        case 'oldest':\n          return a.createdAt.getTime() - b.createdAt.getTime();\n        case 'progress':\n          return b.progress - a.progress;\n        case 'newest':\n        default:\n          return b.createdAt.getTime() - a.createdAt.getTime();\n      }\n    });\n    \n    return sorted.slice(0, maxVisibleJobs);\n  }, [jobs, filter, sortBy, maxVisibleJobs]);\n  \n  // Get status statistics\n  const statusStats = useMemo(() => {\n    const stats = {\n      total: jobs.length,\n      pending: 0,\n      processing: 0,\n      completed: 0,\n      error: 0,\n    };\n    \n    jobs.forEach(job => {\n      switch (job.status) {\n        case 'pending':\n          stats.pending++;\n          break;\n        case 'validating':\n        case 'scraping':\n          stats.processing++;\n          break;\n        case 'completed':\n          stats.completed++;\n          break;\n        case 'error':\n          stats.error++;\n          break;\n      }\n    });\n    \n    return stats;\n  }, [jobs]);\n  \n  // Get status display properties\n  const getStatusDisplay = (status: JobStatus) => {\n    const statusMap = {\n      'pending': {\n        label: 'Queued',\n        color: 'text-gray-400',\n        bgColor: 'bg-gray-500/20',\n        icon: (\n          <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n        ),\n      },\n      'validating': {\n        label: 'Validating',\n        color: 'text-blue-400',\n        bgColor: 'bg-blue-500/20',\n        icon: (\n          <div className=\"animate-spin rounded-full w-4 h-4 border-2 border-blue-400/30 border-t-blue-400\"></div>\n        ),\n      },\n      'scraping': {\n        label: 'Converting',\n        color: 'text-purple-400',\n        bgColor: 'bg-purple-500/20',\n        icon: (\n          <div className=\"animate-spin rounded-full w-4 h-4 border-2 border-purple-400/30 border-t-purple-400\"></div>\n        ),\n      },\n      'completed': {\n        label: 'Completed',\n        color: 'text-green-400',\n        bgColor: 'bg-green-500/20',\n        icon: (\n          <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n          </svg>\n        ),\n      },\n      'error': {\n        label: 'Failed',\n        color: 'text-red-400',\n        bgColor: 'bg-red-500/20',\n        icon: (\n          <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        ),\n      },\n      'cancelled': {\n        label: 'Cancelled',\n        color: 'text-orange-400',\n        bgColor: 'bg-orange-500/20',\n        icon: (\n          <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636\" />\n          </svg>\n        ),\n      },\n    };\n    \n    return statusMap[status];\n  };\n  \n  // Format duration\n  const formatDuration = (ms: number): string => {\n    const seconds = Math.floor(ms / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    \n    if (hours > 0) return `${hours}h ${minutes % 60}m`;\n    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;\n    return `${seconds}s`;\n  };\n  \n  // Handle job selection\n  const toggleJobSelection = useCallback((jobId: string) => {\n    setSelectedJobs(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(jobId)) {\n        newSet.delete(jobId);\n      } else {\n        newSet.add(jobId);\n      }\n      return newSet;\n    });\n  }, []);\n  \n  // Bulk operations\n  const handleBulkCancel = useCallback(() => {\n    selectedJobs.forEach(jobId => {\n      if (onJobCancel) onJobCancel(jobId);\n    });\n    setSelectedJobs(new Set());\n  }, [selectedJobs, onJobCancel]);\n  \n  const handleBulkDelete = useCallback(() => {\n    selectedJobs.forEach(jobId => {\n      if (onJobDelete) onJobDelete(jobId);\n    });\n    setSelectedJobs(new Set());\n  }, [selectedJobs, onJobDelete]);\n  \n  return (\n    <div className={`space-y-6 ${className}`.trim()}>\n      {/* Statistics Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n        <LiquidCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-white\">{statusStats.total}</div>\n          <div className=\"text-sm text-white/70\">Total Jobs</div>\n        </LiquidCard>\n        \n        <LiquidCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-gray-400\">{statusStats.pending}</div>\n          <div className=\"text-sm text-white/70\">Pending</div>\n        </LiquidCard>\n        \n        <LiquidCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-blue-400\">{statusStats.processing}</div>\n          <div className=\"text-sm text-white/70\">Processing</div>\n        </LiquidCard>\n        \n        <LiquidCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-green-400\">{statusStats.completed}</div>\n          <div className=\"text-sm text-white/70\">Completed</div>\n        </LiquidCard>\n        \n        <LiquidCard className=\"text-center\">\n          <div className=\"text-2xl font-bold text-red-400\">{statusStats.error}</div>\n          <div className=\"text-sm text-white/70\">Failed</div>\n        </LiquidCard>\n      </div>\n      \n      {/* Controls */}\n      <LiquidCard>\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          {/* Filters */}\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-white/70\">Filter:</span>\n              <select\n                value={filter}\n                onChange={(e) => setFilter(e.target.value as any)}\n                className=\"liquid-glass px-3 py-1 rounded-glass text-sm text-white bg-transparent border border-white/20 focus:border-blue-500/50\"\n              >\n                <option value=\"all\">All Jobs</option>\n                <option value=\"pending\">Pending</option>\n                <option value=\"validating\">Validating</option>\n                <option value=\"scraping\">Converting</option>\n                <option value=\"completed\">Completed</option>\n                <option value=\"error\">Failed</option>\n              </select>\n            </div>\n            \n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-white/70\">Sort:</span>\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as any)}\n                className=\"liquid-glass px-3 py-1 rounded-glass text-sm text-white bg-transparent border border-white/20 focus:border-blue-500/50\"\n              >\n                <option value=\"newest\">Newest First</option>\n                <option value=\"oldest\">Oldest First</option>\n                <option value=\"progress\">By Progress</option>\n              </select>\n            </div>\n          </div>\n          \n          {/* Bulk Actions */}\n          {selectedJobs.size > 0 && (\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-white/70\">\n                {selectedJobs.size} selected\n              </span>\n              \n              <LiquidButton\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={handleBulkCancel}\n              >\n                Cancel\n              </LiquidButton>\n              \n              <LiquidButton\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={handleBulkDelete}\n              >\n                Delete\n              </LiquidButton>\n            </div>\n          )}\n        </div>\n      </LiquidCard>\n      \n      {/* Job List */}\n      <div className=\"space-y-3\">\n        {filteredAndSortedJobs.length === 0 ? (\n          <LiquidCard className=\"text-center py-12\">\n            <div className=\"text-white/60\">\n              <svg className=\"w-16 h-16 mx-auto mb-4 opacity-50\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={1} d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\" />\n              </svg>\n              <p className=\"text-lg font-medium mb-2\">No jobs found</p>\n              <p className=\"text-sm\">Start by submitting a WordPress URL for conversion</p>\n            </div>\n          </LiquidCard>\n        ) : (\n          filteredAndSortedJobs.map((job) => {\n            const statusDisplay = getStatusDisplay(job.status);\n            const duration = job.completedAt \n              ? job.completedAt.getTime() - job.createdAt.getTime()\n              : Date.now() - job.createdAt.getTime();\n            \n            return (\n              <LiquidCard\n                key={job.id}\n                className=\"hover:shadow-glass-hover transition-all duration-glass cursor-pointer\"\n                onClick={() => toggleJobSelection(job.id)}\n              >\n                <div className=\"flex items-start gap-4\">\n                  {/* Selection Checkbox */}\n                  <div className=\"flex-shrink-0 mt-1\">\n                    <div className={`w-5 h-5 rounded border-2 transition-all duration-glass ${\n                      selectedJobs.has(job.id)\n                        ? 'bg-blue-500 border-blue-500'\n                        : 'border-white/30 hover:border-white/50'\n                    }`}>\n                      {selectedJobs.has(job.id) && (\n                        <svg className=\"w-3 h-3 text-white m-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Job Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1 min-w-0\">\n                        {/* URL and Title */}\n                        <div className=\"mb-2\">\n                          <h3 className=\"font-medium text-white truncate\">\n                            {job.result?.metadata?.title || 'WordPress Content'}\n                          </h3>\n                          <p className=\"text-sm text-white/60 truncate\">{job.url}</p>\n                        </div>\n                        \n                        {/* Progress Bar */}\n                        {(job.status === 'validating' || job.status === 'scraping') && (\n                          <div className=\"mb-3\">\n                            <div className=\"flex items-center justify-between text-xs text-white/70 mb-1\">\n                              <span>Progress: {job.progress}%</span>\n                              {job.estimatedTimeRemaining && (\n                                <span>~{formatDuration(job.estimatedTimeRemaining)} remaining</span>\n                              )}\n                            </div>\n                            <div className=\"w-full bg-white/10 rounded-full h-2 overflow-hidden\">\n                              <div \n                                className=\"bg-gradient-to-r from-blue-400 to-purple-500 h-2 rounded-full transition-all duration-1000\"\n                                style={{ width: `${job.progress}%` }}\n                              />\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Metadata */}\n                        <div className=\"flex items-center gap-4 text-xs text-white/60\">\n                          <span>{formatDuration(duration)}</span>\n                          {job.result?.metadata?.wordCount && (\n                            <span>{job.result.metadata.wordCount} words</span>\n                          )}\n                          {job.result?.images?.length && (\n                            <span>{job.result.images.length} images</span>\n                          )}\n                        </div>\n                        \n                        {/* Error Message */}\n                        {job.error && (\n                          <div className=\"mt-2 text-xs text-red-400 bg-red-500/10 px-2 py-1 rounded\">\n                            {job.error}\n                          </div>\n                        )}\n                      </div>\n                      \n                      {/* Status and Actions */}\n                      <div className=\"flex items-center gap-3\">\n                        {/* Status Badge */}\n                        <div className={`flex items-center gap-2 px-3 py-1 rounded-full text-xs font-medium ${\n                          statusDisplay.bgColor\n                        } ${statusDisplay.color}`}>\n                          {statusDisplay.icon}\n                          {statusDisplay.label}\n                        </div>\n                        \n                        {/* Action Buttons */}\n                        <div className=\"flex items-center gap-1\" onClick={(e) => e.stopPropagation()}>\n                          {job.status === 'completed' && onJobDownload && (\n                            <button\n                              onClick={() => onJobDownload(job.id)}\n                              className=\"p-2 text-white/60 hover:text-white transition-colors\"\n                              title=\"Download Result\"\n                            >\n                              <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 10v6m0 0l-4-4m4 4l4-4m-6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                              </svg>\n                            </button>\n                          )}\n                          \n                          {job.status === 'error' && onJobRetry && (\n                            <button\n                              onClick={() => onJobRetry(job.id)}\n                              className=\"p-2 text-white/60 hover:text-white transition-colors\"\n                              title=\"Retry Job\"\n                            >\n                              <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                              </svg>\n                            </button>\n                          )}\n                          \n                          {(job.status === 'pending' || job.status === 'validating' || job.status === 'scraping') && onJobCancel && (\n                            <button\n                              onClick={() => onJobCancel(job.id)}\n                              className=\"p-2 text-white/60 hover:text-red-400 transition-colors\"\n                              title=\"Cancel Job\"\n                            >\n                              <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                              </svg>\n                            </button>\n                          )}\n                          \n                          {onJobDelete && (\n                            <button\n                              onClick={() => onJobDelete(job.id)}\n                              className=\"p-2 text-white/60 hover:text-red-400 transition-colors\"\n                              title=\"Delete Job\"\n                            >\n                              <svg className=\"w-4 h-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\n                              </svg>\n                            </button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </LiquidCard>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default JobQueue;"
---
/**
 * Unified Authentication Modal - Astro Component
 * Following Astro best practices: HTML by default, JavaScript when needed
 * DRY: Uses BaseModal for consistent behavior
 * SOLID: Single responsibility for authentication UI
 */

import BaseModal from '../common/BaseModal.astro';
---

<!-- Unified Auth Modal using DRY/SOLID BaseModal -->
<BaseModal 
  id="auth-modal" 
  closeButtonId="auth-close"
  maxWidth="max-w-md"
  backdropBlur={true}
>
  <div class="liquid-glass rounded-glass p-6 border border-white/20">
    <!-- Header -->
    <div class="mb-6">
      <h3 class="text-xl font-bold text-white">Welcome to CSFrace</h3>
      <p class="text-white/70 text-sm mt-1">Sign in securely with modern authentication</p>
    </div>

    <!-- Error Display -->
    <div id="auth-error" class="hidden p-4 rounded-glass bg-red-500/20 border border-red-500/30 text-red-100 text-sm mb-4">
      <div class="flex items-start space-x-3">
        <svg class="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div>
          <p class="font-medium">Authentication Failed</p>
          <p class="mt-1" id="auth-error-message"></p>
        </div>
      </div>
    </div>

    <!-- Loading Overlay -->
    <div id="auth-loading" class="hidden absolute inset-0 bg-black/50 rounded-glass flex items-center justify-center">
      <div class="flex items-center space-x-2 text-white">
        <div class="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
        <span id="auth-loading-text">Authenticating...</span>
      </div>
    </div>

    <div class="space-y-6">
      <!-- Passkey Authentication Section -->
      <div id="passkey-section" class="space-y-3">
        <!-- Existing User - Use Passkey -->
        <button 
          id="use-passkey"
          class="glass-button w-full px-4 py-3 bg-gradient-to-r from-blue-500/80 to-purple-600/80 hover:from-blue-600/90 hover:to-purple-700/90 text-white font-medium rounded-lg border border-white/20 transition-all duration-200 flex items-center justify-center space-x-2"
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 12H9v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4a2 2 0 012-2m0 0V9a2 2 0 012-2h2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
          <span>Use Passkey</span>
        </button>

        <!-- New User - Create Passkey -->
        <button 
          id="create-passkey"
          class="glass-button w-full px-4 py-3 bg-white/10 hover:bg-white/20 text-white font-medium rounded-lg border border-white/30 hover:border-white/50 transition-all duration-200 flex items-center justify-center space-x-2"
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
          <span>Create Account with Passkey</span>
        </button>
        
        <div class="text-center">
          <p class="text-xs text-white/60">
            Secure authentication with your fingerprint, face, or security key
          </p>
        </div>
      </div>

      <!-- Divider -->
      <div class="relative">
        <div class="absolute inset-0 flex items-center">
          <div class="w-full border-t border-white/20"></div>
        </div>
        <div class="relative flex justify-center text-sm">
          <span class="px-2 bg-black/50 text-white/60">Or continue with</span>
        </div>
      </div>

      <!-- OAuth Providers List - Following Astro best practices -->
      <ul class="space-y-2" role="list" aria-label="Choose a service to sign in with">
        <li>
          <button 
            data-oauth-provider="google"
            class="glass-button w-full px-4 py-3 bg-white hover:bg-gray-100 text-gray-800 font-medium rounded-lg border border-gray-300 transition-all duration-200 flex items-center justify-center space-x-3"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24">
              <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
              <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
              <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
              <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
            </svg>
            <span>Continue with Google</span>
          </button>
        </li>
        <li>
          <button 
            data-oauth-provider="github"
            class="glass-button w-full px-4 py-3 bg-gray-900 hover:bg-gray-800 text-white font-medium rounded-lg border border-gray-700 transition-all duration-200 flex items-center justify-center space-x-3"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0 0 24 12c0-6.63-5.37-12-12-12z"/>
            </svg>
            <span>Continue with GitHub</span>
          </button>
        </li>
        <li>
          <button 
            data-oauth-provider="microsoft"
            class="glass-button w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg border border-blue-500 transition-all duration-200 flex items-center justify-center space-x-3"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z"/>
            </svg>
            <span>Continue with Microsoft</span>
          </button>
        </li>
        <li>
          <button 
            data-oauth-provider="facebook"
            class="glass-button w-full px-4 py-3 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg border border-blue-400 transition-all duration-200 flex items-center justify-center space-x-3"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
            </svg>
            <span>Continue with Facebook</span>
          </button>
        </li>
        <li>
          <button 
            data-oauth-provider="apple"
            class="glass-button w-full px-4 py-3 bg-black hover:bg-gray-900 text-white font-medium rounded-lg border border-gray-600 transition-all duration-200 flex items-center justify-center space-x-3"
          >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M17.05 20.28c-.98.95-2.05.8-3.08.35-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.35C2.79 15.25 3.51 7.59 9.05 7.31c1.35.07 2.29.74 3.08.8 1.18-.24 2.31-.93 3.57-.84 1.51.12 2.65.72 3.4 1.8-3.12 1.87-2.38 5.98.48 7.13-.57 1.5-1.31 2.99-2.54 4.09zM12.03 7.25c-.15-2.23 1.66-4.07 3.74-4.25.29 2.58-2.34 4.5-3.74 4.25z"/>
            </svg>
            <span>Continue with Apple</span>
          </button>
        </li>
      </ul>

      <!-- Benefits Section -->
      <div class="liquid-glass rounded-glass p-4 space-y-3">
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-green-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          <span class="text-sm font-medium text-white">Modern Security</span>
        </div>
        <div class="text-xs text-white/70 space-y-1">
          <div>• No passwords to remember or lose</div>
          <div>• Biometric authentication for instant access</div>
          <div>• Secure OAuth 2.0 with trusted providers</div>
          <div>• Account creation and login in one flow</div>
        </div>
      </div>
    </div>
  </div>
</BaseModal>

<!-- 
  Astro Best Practice: Use script tags for interactivity
  Following the authentication patterns from Astro docs
-->
<script>
  import { AuthModalManager } from '../../scripts/authModalManager';
  import { getApiBaseUrl } from '../../constants/api.js';

  // Auth functionality following Astro best practices
  class AuthController {
    private modalManager: AuthModalManager;
    private webauthnSupported: boolean = false;

    constructor() {
      // DRY: Use AuthModalManager that extends BaseModalManager
      this.modalManager = new AuthModalManager({
        onAuthSuccess: () => {
          console.log('Authentication successful');
        }
      });

      // Check WebAuthn support
      this.webauthnSupported = !!(navigator.credentials && window.PublicKeyCredential);
      
      this.init();
    }

    private init(): void {
      // Initialize modal manager (handles backdrop clicks, etc.)
      this.modalManager.init();
      
      // Setup auth-specific handlers
      this.setupPasskeyHandlers();
      this.setupOAuthHandlers();
      this.setupCloseHandler();
    }

    private setupPasskeyHandlers(): void {
      const usePasskeyBtn = document.getElementById('use-passkey');
      const createPasskeyBtn = document.getElementById('create-passkey');
      const passkeySection = document.getElementById('passkey-section');

      // Show/hide passkey section based on support
      if (passkeySection) {
        passkeySection.style.display = this.webauthnSupported ? 'block' : 'none';
      }

      // Use existing passkey
      usePasskeyBtn?.addEventListener('click', async () => {
        await this.handlePasskeyAuth();
      });

      // Create new passkey
      createPasskeyBtn?.addEventListener('click', async () => {
        await this.handlePasskeyRegister();
      });
    }

    private setupOAuthHandlers(): void {
      // OAuth provider buttons - following Astro docs pattern
      document.querySelectorAll('[data-oauth-provider]').forEach(button => {
        button.addEventListener('click', async (e) => {
          const provider = (e.currentTarget as HTMLElement).dataset.oauthProvider;
          if (provider) {
            await this.handleOAuth(provider);
          }
        });
      });
    }

    private setupCloseHandler(): void {
      const closeBtn = document.getElementById('auth-close');
      closeBtn?.addEventListener('click', () => this.modalManager.close());
    }

    private async handlePasskeyAuth(): Promise<void> {
      this.modalManager.setLoading(true, 'Authenticating...');
      this.modalManager.clearError();

      try {
        // Use WebAuthn API following Astro auth patterns
        const credential = await navigator.credentials.get({
          publicKey: {
            challenge: new Uint8Array(32), // Should come from server
            allowCredentials: [],
            userVerification: 'preferred'
          }
        });

        if (credential) {
          // Send credential to Docker backend for verification (DRY/SOLID)
          const response = await fetch(`${getApiBaseUrl()}/auth/passkeys/authenticate/complete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ credential })
          });

          if (response.ok) {
            this.handleAuthSuccess();
          } else {
            throw new Error('Authentication failed');
          }
        }
      } catch (error) {
        this.modalManager.showError('Passkey authentication failed. Please try again.');
        console.error('Passkey auth error:', error);
      } finally {
        this.modalManager.setLoading(false);
      }
    }

    private async handlePasskeyRegister(): Promise<void> {
      this.modalManager.setLoading(true, 'Creating passkey...');
      this.modalManager.clearError();

      try {
        // Get registration challenge from Docker backend (DRY/SOLID)
        const challengeResponse = await fetch(`${getApiBaseUrl()}/auth/passkeys/register/begin`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username: 'user@example.com' }) // Should come from form
        });
        
        if (!challengeResponse.ok) {
          throw new Error('Failed to start registration');
        }
        
        const challengeData = await challengeResponse.json();

        // Create new WebAuthn credential
        const credential = await navigator.credentials.create({
          publicKey: challengeData.publicKey
        });

        if (credential) {
          // Send credential to Docker backend for storage
          const response = await fetch(`${getApiBaseUrl()}/auth/passkeys/register/complete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ 
              credential,
              challengeId: challengeData.challengeId 
            })
          });

          if (response.ok) {
            this.handleAuthSuccess();
          } else {
            throw new Error('Registration failed');
          }
        }
      } catch (error) {
        this.modalManager.showError('Failed to create passkey. Please try another method.');
        console.error('Passkey registration error:', error);
      } finally {
        this.modalManager.setLoading(false);
      }
    }

    private async handleOAuth(provider: string): Promise<void> {
      this.modalManager.setLoading(true, `Connecting to ${provider}...`);
      this.modalManager.clearError();

      try {
        // Following Astro auth docs pattern for OAuth with Docker backend
        const response = await fetch(`${getApiBaseUrl()}/auth/oauth/${provider}/login`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });

        if (response.ok) {
          const data = await response.json();
          if (data.authorization_url) {
            // Redirect to OAuth provider
            window.location.href = data.authorization_url;
          } else {
            this.handleAuthSuccess();
          }
        } else {
          throw new Error(`${provider} authentication failed`);
        }
      } catch (error) {
        this.modalManager.showError(`Failed to connect with ${provider}. Please try again.`);
        console.error('OAuth error:', error);
      } finally {
        this.modalManager.setLoading(false);
      }
    }

    private handleAuthSuccess(): void {
      // Dispatch success event
      window.dispatchEvent(new CustomEvent('authSuccess'));
      this.modalManager.close();
    }
  }

  // Initialize auth controller following Astro best practices
  const authController = new AuthController();
</script>

<style>
  /* Additional styles for auth modal animations and states */
  .liquid-glass {
    backdrop-filter: blur(12px);
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .glass-button {
    backdrop-filter: blur(8px);
    transition: all 0.2s ease-out;
  }

  .glass-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .glass-button:active {
    transform: translateY(0);
  }

  .glass-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  /* Smooth loading animation */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>
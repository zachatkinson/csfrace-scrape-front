---
// =============================================================================
// BASE HEALTH CARD - DRY/SOLID SERVER ISLAND COMPONENT
// =============================================================================
// Single Responsibility: Display health status for any service
// Open/Closed: Extensible for different service types
// Interface Segregation: Clean props interface
// Dependency Inversion: Depends on IServiceResult abstraction
// =============================================================================

import type { IServiceResult } from '../../utils/serviceCheckers.js';

export interface Props {
  serviceName: string;
  serviceResult: IServiceResult;
  icon?: string;
  details?: Array<{
    label: string;
    value: string | number;
    key: string;
  }>;
}

const { serviceName, serviceResult, icon = "ðŸ”§", details = [] } = Astro.props;

// SOLID: Single source of truth for status color mapping
function getStatusColor(status: string): string {
  switch (status) {
    case 'up': return 'green';
    case 'degraded': return 'yellow'; 
    case 'down': return 'red';
    case 'error': return 'orange';
    default: return 'gray';
  }
}

function getStatusText(status: string): string {
  switch (status) {
    case 'up': return 'OPERATIONAL';
    case 'degraded': return 'DEGRADED'; 
    case 'down': return 'OFFLINE';
    case 'error': return 'ERROR';
    default: return 'UNKNOWN';
  }
}

const statusColor = getStatusColor(serviceResult.status);
const statusText = getStatusText(serviceResult.status);
const responseTime = serviceResult.metrics.responseTime;
---

<!-- Health Card Component -->
<div class="glass-card p-6 border-l-4" class:list={[
  `border-${statusColor}-500`,
  serviceResult.status === 'up' ? 'bg-green-500/5' : 
  serviceResult.status === 'degraded' ? 'bg-yellow-500/5' :
  serviceResult.status === 'down' ? 'bg-red-500/5' : 'bg-orange-500/5'
]}>
  <!-- Header -->
  <div class="flex items-center justify-between mb-4">
    <div class="flex items-center space-x-3">
      <span class="text-2xl">{icon}</span>
      <div>
        <h3 class="text-xl font-semibold text-white">{serviceName}</h3>
        <p class="text-sm" class:list={[
          serviceResult.status === 'up' ? 'text-green-400' : 
          serviceResult.status === 'degraded' ? 'text-yellow-400' :
          serviceResult.status === 'down' ? 'text-red-400' : 'text-orange-400'
        ]}>
          {statusText}
        </p>
      </div>
    </div>
    
    <!-- Status Indicator -->
    <div 
      class="w-4 h-4 rounded-full animate-pulse" 
      class:list={[`bg-${statusColor}-500`]}
    ></div>
  </div>

  <!-- Metrics -->
  <div class="grid grid-cols-2 gap-4 text-sm">
    {responseTime && (
      <div>
        <span class="text-white/60">Response Time:</span>
        <span class="ml-2 text-white font-mono">{responseTime}ms</span>
      </div>
    )}
    
    <div>
      <span class="text-white/60">Last Check:</span>
      <span class="ml-2 text-white font-mono">
        {new Date(serviceResult.timestamp).toLocaleTimeString()}
      </span>
    </div>

    <!-- Service-specific details -->
    {details.map(detail => (
      <div key={detail.key}>
        <span class="text-white/60">{detail.label}:</span>
        <span class="ml-2 text-white font-mono">{detail.value}</span>
      </div>
    ))}
  </div>

  <!-- Error Information -->
  {serviceResult.error && (
    <div class="mt-4 p-3 bg-red-500/10 border border-red-500/20 rounded text-sm">
      <span class="text-red-400 font-medium">Error: </span>
      <span class="text-white/80">{serviceResult.error}</span>
    </div>
  )}
</div>
---
/**
 * StandardizedSettingsPanel - Astro Implementation
 * Converted from React to Astro with Islands for interactivity
 * Settings panel with tabbed interface and form management
 */

import type { HTMLAttributes } from 'astro/types';
import { LiquidButton } from '../liquid-glass';

// Component props interface
export interface Props extends HTMLAttributes<'div'> {
  isOpen?: boolean;
  class?: string;
}

// Extract props
const {
  isOpen = false,
  class: className = '',
  ...htmlProps
} = Astro.props;

// Generate unique ID for this panel instance
const panelId = `settings-panel-${Math.random().toString(36).substring(2, 11)}`;

// Settings tabs configuration
const settingsTabs = [
  {
    id: 'app',
    label: 'App Settings',
    iconPath: 'M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z'
  },
  {
    id: 'api',
    label: 'API Config',
    iconPath: 'M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0'
  },
  {
    id: 'notifications',
    label: 'Notifications',
    iconPath: 'M15 17h5l-5 5v-5zM4 12v8a1 1 0 001 1h9m-9-9V5a1 1 0 011-1h7l5 5v7m-9-9h4l5 5v7'
  }
];
---

<!-- Settings panel with data attributes for Islands script -->
<div
  id={panelId}
  class:list={[
    'fixed top-20 left-0 right-0 z-40 transform transition-transform duration-300 ease-out',
    isOpen ? 'translate-y-0' : '-translate-y-full pointer-events-none',
    className
  ]}
  data-component="settings-panel"
  data-panel-id={panelId}
  data-is-open={isOpen}
  style={isOpen ? '' : 'display: none;'}
  {...htmlProps}
>
  <div class="max-w-6xl mx-auto px-8 py-6">
    <div class="liquid-glass rounded-glass p-6 border border-white/20">
      <!-- Header -->
      <div class="flex items-center justify-between mb-6">
        <div>
          <h2 class="text-2xl font-bold text-white">Settings</h2>
          <p class="text-white/60 text-sm mt-1">
            Customize your application preferences
          </p>
        </div>

        <div class="flex items-center space-x-3">
          <!-- Reset Button -->
          <LiquidButton
            type="button"
            variant="secondary"
            size="sm"
            className="text-red-300 hover:text-red-200"
            data-action="reset-settings"
          >
            Reset All
          </LiquidButton>

          <!-- Close Button -->
          <button
            class="glass-button p-2 text-white/80 hover:text-white transition-colors"
            aria-label="Close Settings"
            data-action="close-panel"
          >
            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Tab Navigation -->
      <div class="flex space-x-1 mb-6" data-component="tab-navigation">
        {settingsTabs.map((tab) => (
          <button
            class:list={[
              'flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors',
              tab.id === 'app'
                ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
                : 'text-white/60 hover:text-white hover:bg-white/5'
            ]}
            data-tab={tab.id}
            data-action="switch-tab"
          >
            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={tab.iconPath} />
            </svg>
            <span class="font-medium">{tab.label}</span>
          </button>
        ))}
      </div>

      <!-- Unsaved Changes Warning (hidden by default) -->
      <div
        id={`${panelId}-unsaved-warning`}
        class="mb-6 p-4 rounded-glass bg-yellow-500/20 border border-yellow-500/30"
        style="display: none;"
      >
        <div class="flex items-center space-x-3">
          <svg class="w-5 h-5 text-yellow-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-7.938-6h15.876C20.477 6.477 21 5.523 21 4.5V3a1 1 0 00-1-1H4a1 1 0 00-1 1v1.5C3 5.523 3.523 6.477 4.062 9z" />
          </svg>
          <div>
            <p class="text-yellow-200 font-medium">Unsaved Changes</p>
            <p class="text-yellow-300/80 text-sm">
              You have unsaved changes that will be lost if you close this panel.
            </p>
          </div>
        </div>
      </div>

      <!-- Tab Content Container -->
      <div class="min-h-[400px]" data-component="tab-content">
        <!-- App Settings Tab (default active) -->
        <div id={`${panelId}-tab-app`} class="tab-content" data-tab="app">
          <div class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Theme Settings -->
              <div class="space-y-4">
                <h3 class="text-lg font-medium text-white">Theme</h3>
                <div class="space-y-3">
                  <label class="flex items-center space-x-3">
                    <input type="radio" name="theme" value="auto" checked class="text-blue-400" />
                    <span class="text-white/80">Auto (System)</span>
                  </label>
                  <label class="flex items-center space-x-3">
                    <input type="radio" name="theme" value="light" class="text-blue-400" />
                    <span class="text-white/80">Light</span>
                  </label>
                  <label class="flex items-center space-x-3">
                    <input type="radio" name="theme" value="dark" class="text-blue-400" />
                    <span class="text-white/80">Dark</span>
                  </label>
                </div>
              </div>

              <!-- Notifications -->
              <div class="space-y-4">
                <h3 class="text-lg font-medium text-white">Notifications</h3>
                <div class="space-y-3">
                  <label class="flex items-center justify-between">
                    <span class="text-white/80">Job Completion</span>
                    <input type="checkbox" checked class="text-blue-400" />
                  </label>
                  <label class="flex items-center justify-between">
                    <span class="text-white/80">Error Alerts</span>
                    <input type="checkbox" checked class="text-blue-400" />
                  </label>
                  <label class="flex items-center justify-between">
                    <span class="text-white/80">Weekly Summary</span>
                    <input type="checkbox" class="text-blue-400" />
                  </label>
                </div>
              </div>
            </div>

            <!-- Actions -->
            <div class="flex justify-end space-x-3 pt-4 border-t border-white/10">
              <LiquidButton type="button" variant="secondary" data-action="cancel-changes">
                Cancel
              </LiquidButton>
              <LiquidButton type="button" variant="primary" data-action="save-settings">
                Save Changes
              </LiquidButton>
            </div>
          </div>
        </div>

        <!-- API Config Tab -->
        <div id={`${panelId}-tab-api`} class="tab-content" data-tab="api" style="display: none;">
          <div class="w-full p-6 text-center text-white/60">
            <svg class="w-16 h-16 mx-auto mb-4 text-white/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0" />
            </svg>
            <h3 class="text-lg font-medium text-white mb-2">API Configuration</h3>
            <p class="text-white/60 text-sm mb-4">
              API configuration form coming soon...
            </p>
          </div>
        </div>

        <!-- Notifications Tab -->
        <div id={`${panelId}-tab-notifications`} class="tab-content" data-tab="notifications" style="display: none;">
          <div class="p-6 text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-white/40" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4 12v8a1 1 0 001 1h9m-9-9V5a1 1 0 011-1h7l5 5v7m-9-9h4l5 5v7" />
            </svg>
            <h3 class="text-lg font-medium text-white mb-2">Notifications</h3>
            <p class="text-white/60 text-sm mb-4">
              Notification preferences will be available in a future update
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Astro Islands script for client-side functionality -->
<script>
  // Settings panel management class - Astro MCP best practice
  class SettingsPanel {
    private panelId: string | undefined;
    private panel: HTMLElement | null;
    private isInitialized: boolean;
    private activeTab: string;
    private hasUnsavedChanges: boolean;
    private originalSettings: Record<string, any>;

    constructor() {
      // Get panelId from data attribute (Astro MCP best practice)
      const container = document.querySelector('[data-component="settings-panel"]');
      this.panelId = (container as HTMLElement)?.dataset.panelId;
      this.panel = document.getElementById(this.panelId || '');
      this.isInitialized = false;
      this.activeTab = 'app';
      this.hasUnsavedChanges = false;
      this.originalSettings = {};

      this.init();
    }

    init() {
      if (!this.panel || this.isInitialized) return;

      // Set up event listeners
      this.setupEventListeners();

      // Load current settings
      this.loadSettings();

      this.isInitialized = true;
      console.log('⚙️ SettingsPanel: Initialized with tab management');
    }

    setupEventListeners() {
      // Close panel button
      const closeBtn = this.panel?.querySelector('[data-action="close-panel"]');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.handleClose());
      }

      // Reset settings button
      const resetBtn = this.panel?.querySelector('[data-action="reset-settings"]');
      if (resetBtn) {
        resetBtn.addEventListener('click', () => this.handleResetSettings());
      }

      // Tab navigation
      const tabButtons = this.panel?.querySelectorAll('[data-action="switch-tab"]');
      tabButtons?.forEach(btn => {
        btn.addEventListener('click', (e) => {
          const tabId = ((e.target as HTMLElement)?.closest('[data-tab]') as HTMLElement)?.dataset.tab;
          if (tabId) {
            this.switchTab(tabId);
          }
        });
      });

      // Form buttons
      const saveBtn = this.panel?.querySelector('[data-action="save-settings"]');
      const cancelBtn = this.panel?.querySelector('[data-action="cancel-changes"]');

      if (saveBtn) {
        saveBtn.addEventListener('click', () => this.handleSaveSettings());
      }

      if (cancelBtn) {
        cancelBtn.addEventListener('click', () => this.handleCancelChanges());
      }

      // Listen for form changes to track unsaved changes
      this.panel?.addEventListener('input', () => {
        this.markAsChanged();
      });

      // Listen for escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen()) {
          this.handleClose();
        }
      });

      // Listen for global events
      window.addEventListener('toggle-settings', () => {
        this.toggle();
      });
    }

    loadSettings() {
      try {
        // Load settings from localStorage or use defaults
        const savedSettings = localStorage.getItem('app-settings');
        if (savedSettings) {
          this.originalSettings = JSON.parse(savedSettings);
          this.applySettingsToForm(this.originalSettings);
        } else {
          this.originalSettings = this.getDefaultSettings();
        }
      } catch (error) {
        console.error('Failed to load settings:', error);
        this.originalSettings = this.getDefaultSettings();
      }
    }

    getDefaultSettings() {
      return {
        theme: 'auto',
        notifications: {
          jobCompletion: true,
          errorAlerts: true,
          weeklySummary: false
        }
      };
    }

    applySettingsToForm(settings: any) {
      // Apply theme setting
      const themeRadio = this.panel?.querySelector(`input[name="theme"][value="${settings.theme}"]`) as HTMLInputElement;
      if (themeRadio) {
        themeRadio.checked = true;
      }

      // Apply notification settings
      if (settings.notifications) {
        const jobCompletionCheck = this.panel?.querySelector('input[type="checkbox"]') as HTMLInputElement;
        const errorAlertsCheck = this.panel?.querySelectorAll('input[type="checkbox"]')[1] as HTMLInputElement;
        const weeklySummaryCheck = this.panel?.querySelectorAll('input[type="checkbox"]')[2] as HTMLInputElement;

        if (jobCompletionCheck) jobCompletionCheck.checked = settings.notifications.jobCompletion;
        if (errorAlertsCheck) errorAlertsCheck.checked = settings.notifications.errorAlerts;
        if (weeklySummaryCheck) weeklySummaryCheck.checked = settings.notifications.weeklySummary;
      }
    }

    getCurrentFormSettings() {
      const theme = (this.panel?.querySelector('input[name="theme"]:checked') as HTMLInputElement)?.value || 'auto';
      const checkboxes = this.panel?.querySelectorAll('input[type="checkbox"]');

      return {
        theme,
        notifications: {
          jobCompletion: (checkboxes?.[0] as HTMLInputElement)?.checked || false,
          errorAlerts: (checkboxes?.[1] as HTMLInputElement)?.checked || false,
          weeklySummary: (checkboxes?.[2] as HTMLInputElement)?.checked || false
        }
      };
    }

    switchTab(tabId: string) {
      if (this.activeTab === tabId) return;

      // Update tab buttons
      const tabButtons = this.panel?.querySelectorAll('[data-tab]');
      tabButtons?.forEach(btn => {
        const htmlBtn = btn as HTMLElement;
        const isActive = htmlBtn.dataset.tab === tabId;
        btn.className = `flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors ${
          isActive
            ? 'bg-blue-500/20 text-blue-300 border border-blue-500/30'
            : 'text-white/60 hover:text-white hover:bg-white/5'
        }`;
      });

      // Update tab content
      const tabContents = this.panel?.querySelectorAll('.tab-content');
      tabContents?.forEach(content => {
        const htmlContent = content as HTMLElement;
        htmlContent.style.display = htmlContent.dataset.tab === tabId ? 'block' : 'none';
      });

      this.activeTab = tabId;
      console.log(`⚙️ SettingsPanel: Switched to ${tabId} tab`);
    }

    markAsChanged() {
      this.hasUnsavedChanges = true;
      this.updateUnsavedWarning();
    }

    updateUnsavedWarning() {
      const warning = document.getElementById(`${this.panelId}-unsaved-warning`);
      if (warning) {
        warning.style.display = this.hasUnsavedChanges ? 'block' : 'none';
      }
    }

    handleClose() {
      if (this.hasUnsavedChanges) {
        const shouldClose = window.confirm(
          'You have unsaved changes. Are you sure you want to close without saving?'
        );
        if (!shouldClose) return;
      }

      this.close();
      this.hasUnsavedChanges = false;
      this.updateUnsavedWarning();
    }

    handleSaveSettings() {
      const currentSettings = this.getCurrentFormSettings();

      try {
        // Save to localStorage
        localStorage.setItem('app-settings', JSON.stringify(currentSettings));

        // Apply theme immediately
        this.applyTheme(currentSettings.theme);

        // Update original settings
        this.originalSettings = currentSettings;
        this.hasUnsavedChanges = false;
        this.updateUnsavedWarning();

        // Show success feedback
        this.showNotification('Settings saved successfully!', 'success');

        console.log('⚙️ SettingsPanel: Settings saved', currentSettings);
      } catch (error) {
        console.error('Failed to save settings:', error);
        this.showNotification('Failed to save settings', 'error');
      }
    }

    handleCancelChanges() {
      this.applySettingsToForm(this.originalSettings);
      this.hasUnsavedChanges = false;
      this.updateUnsavedWarning();
      this.showNotification('Changes cancelled', 'info');
    }

    handleResetSettings() {
      const confirmed = window.confirm(
        'Reset all settings to defaults? This cannot be undone.'
      );

      if (confirmed) {
        const defaultSettings = this.getDefaultSettings();
        this.applySettingsToForm(defaultSettings);
        localStorage.setItem('app-settings', JSON.stringify(defaultSettings));
        this.originalSettings = defaultSettings;
        this.hasUnsavedChanges = false;
        this.updateUnsavedWarning();
        this.applyTheme(defaultSettings.theme);
        this.showNotification('Settings reset to defaults', 'success');
      }
    }

    applyTheme(theme: string) {
      const root = document.documentElement;

      if (theme === 'dark') {
        root.classList.add('dark');
      } else if (theme === 'light') {
        root.classList.remove('dark');
      } else {
        // Auto - use system preference
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        if (prefersDark) {
          root.classList.add('dark');
        } else {
          root.classList.remove('dark');
        }
      }
    }

    showNotification(message: string, type: string = 'info') {
      // Simple notification system - could be enhanced
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 p-4 rounded-lg max-w-sm transition-all duration-300 ${
        type === 'success' ? 'bg-green-500/20 border border-green-500/30 text-green-200' :
        type === 'error' ? 'bg-red-500/20 border border-red-500/30 text-red-200' :
        'bg-blue-500/20 border border-blue-500/30 text-blue-200'
      }`;
      notification.textContent = message;

      document.body.appendChild(notification);

      // Auto-remove after 3 seconds
      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }

    isOpen() {
      return this.panel && !this.panel.classList.contains('-translate-y-full');
    }

    open() {
      if (!this.panel) return;

      this.panel.style.display = 'block';
      this.panel.classList.remove('-translate-y-full', 'pointer-events-none');
      this.panel.classList.add('translate-y-0');
      this.panel.dataset.isOpen = 'true';
    }

    close() {
      if (!this.panel) return;

      this.panel.classList.remove('translate-y-0');
      this.panel.classList.add('-translate-y-full', 'pointer-events-none');
      this.panel.dataset.isOpen = 'false';

      // Hide after animation
      setTimeout(() => {
        if (this.panel && this.panel.classList.contains('-translate-y-full')) {
          this.panel.style.display = 'none';
        }
      }, 300);
    }

    toggle() {
      if (this.isOpen()) {
        this.handleClose();
      } else {
        this.open();
      }
    }
  }

  // Initialize the settings panel
  const settingsPanel = new SettingsPanel();

  // Expose for debugging and external access
  if (typeof window !== 'undefined') {
    (window as any).settingsPanel = settingsPanel;
  }
</script>

<style>
  /* Glass button styles */
  .glass-button {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
  }

  .glass-button:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }

  /* Liquid glass styles */
  .liquid-glass {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .rounded-glass {
    border-radius: 1rem;
  }

  /* Form inputs */
  input[type="radio"], input[type="checkbox"] {
    appearance: none;
    width: 1rem;
    height: 1rem;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 0.25rem;
    position: relative;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  input[type="radio"] {
    border-radius: 50%;
  }

  input[type="radio"]:checked,
  input[type="checkbox"]:checked {
    background: rgb(96 165 250);
    border-color: rgb(96 165 250);
  }

  input[type="radio"]:checked::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 0.375rem;
    height: 0.375rem;
    background: white;
    border-radius: 50%;
  }

  input[type="checkbox"]:checked::after {
    content: '';
    position: absolute;
    top: 0.125rem;
    left: 0.25rem;
    width: 0.25rem;
    height: 0.5rem;
    border: solid white;
    border-width: 0 2px 2px 0;
    transform: rotate(45deg);
  }

  /* Tab content transitions */
  .tab-content {
    animation: fadeIn 0.2s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .grid-cols-1.md\\:grid-cols-2 {
      grid-template-columns: 1fr;
    }

    .flex.space-x-1 {
      flex-direction: column;
      space: 0;
      gap: 0.25rem;
    }

    .flex.space-x-1 > button {
      margin: 0;
    }
  }
</style>
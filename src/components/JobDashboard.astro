---
/**
 * Job Dashboard Component - Following Astro Best Practices
 * Server-side rendered component with client-side enhancement via custom element
 * Uses data attributes instead of define:vars (Astro recommendation)
 */

// For client-side components, always use PUBLIC_API_BASE_URL (browser-accessible)
// CRITICAL: JobDashboard runs in browser, so it must use PUBLIC_API_BASE_URL, not SERVER_API_BASE_URL
const apiBaseUrl = import.meta.env.PUBLIC_API_BASE_URL || 'http://localhost:8000';
---

<!-- Custom element wrapper with data attributes (Astro best practice) -->
<job-dashboard data-api-url={apiBaseUrl}>
  <div class="glass-card p-8 lg:min-h-[600px] flex flex-col">
    <div class="mb-6">
      <h2 class="text-4xl md:text-6xl font-bold text-apple-white mb-6 text-center">
        Recent <span class="bg-gradient-to-r from-blue-400 via-purple-500 via-blue-400 to-purple-500 bg-clip-text text-transparent animated-gradient">Conversions</span>
      </h2>
      <p class="text-white/70">Monitor your conversion jobs with live updates</p>
    </div>
    
    <div class="flex flex-col flex-1 min-h-0">
      <!-- Error section -->
      <div id="jobs-error" class="hidden transition-all duration-500 ease-out transform translate-x-0">
        <div id="enhanced-error-content">
          <h3 class="text-orange-400 font-medium mb-2">Connection issue</h3>
          <p class="text-white/60 text-sm mb-4">Unable to connect to the conversion service.</p>
          <button id="retry-load-jobs" class="glass-button px-4 py-2 text-sm text-orange-400/80 hover:text-orange-400 bg-orange-500/10 hover:bg-orange-500/20 transition-all duration-200 rounded-lg">
            Retry
          </button>
        </div>
        <div class="border-t border-white/10 mt-4"></div>
      </div>
      
      <!-- Jobs container -->
      <div id="jobs-container" class="lg:flex-1 lg:overflow-y-auto space-y-4 scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent pr-2 lg:min-h-0">
        <!-- Loading state (hidden by default) -->
        <div id="jobs-loading" class="p-6 text-center hidden">
          <div class="animate-spin rounded-full w-8 h-8 border-2 border-blue-400/30 border-t-blue-400 mx-auto mb-3"></div>
          <p class="text-white/60 text-sm">Loading recent jobs...</p>
        </div>
        
        <!-- Jobs list (hidden by default, will be populated) -->
        <div id="jobs-list" class="space-y-4 hidden"></div>
        
        <!-- Empty state (visible by default) -->
        <div id="jobs-empty" class="p-4 text-center transition-all duration-500 opacity-100">
          <div class="w-16 h-16 mx-auto mb-4 rounded-full bg-white/10 flex items-center justify-center">
            <svg class="w-8 h-8 text-white/70" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <h3 class="text-white/80 font-bold mb-2">No jobs yet, ready for conversions&hellip;</h3>
          <p class="text-white/60 text-sm">Start your first WordPress to Shopify conversion using the form on the left!</p>
        </div>
      </div>
      
      <!-- View all jobs button -->
      <div class="border-t border-white/10 pt-4 mt-6 lg:flex-shrink-0 lg:mt-4">
        <a href="/dashboard" class="glass-button liquid-glass-interactive w-full px-4 py-3 text-white/90 hover:text-white font-medium bg-white/5 hover:bg-white/10 transition-all duration-200 flex items-center justify-center space-x-2">
          <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
          <span>View All Jobs</span>
        </a>
      </div>
    </div>
  </div>
</job-dashboard>

<script>
  // âœ… SSE-Enabled JobDashboard - Following Astro Best Practices
  // SOLID: Single Responsibility - Only handles job display, SSE handled in MainLayout
  // DRY: Reuses SSE service from MainLayout instead of polling
  import { getApiBaseUrl } from '../constants/api.ts';
  import * as jobUtils from '../utils/dashboard/jobUtils.ts';

  class JobDashboard extends HTMLElement {
    constructor() {
      super();
      this.apiBaseUrl = '';
      this.jobs = [];
    }

    connectedCallback() {
      // Read configuration from data attributes (Astro best practice)
      this.apiBaseUrl = this.dataset.apiUrl || getApiBaseUrl();

      // Initialize display
      this.showLoading();
      this.loadInitialJobs();

      // Setup SSE event listeners (DRY: reuses MainLayout SSE service)
      this.setupSSEListeners();

      // Setup retry button
      const retryBtn = this.querySelector('#retry-load-jobs');
      retryBtn?.addEventListener('click', () => {
        this.loadInitialJobs();
      });
    }

    disconnectedCallback() {
      // Cleanup SSE listeners
      window.removeEventListener('jobSSEUpdate', this.handleJobSSEUpdate.bind(this) as EventListener);
      window.removeEventListener('jobsDataRefresh', this.handleJobsDataRefresh.bind(this) as EventListener);
    }

    // ===================================================================
    // SSE Event Handling (DRY: follows same pattern as MainLayout)
    // ===================================================================

    setupSSEListeners() {
      // Listen for real-time job updates from MainLayout SSE service
      window.addEventListener('jobSSEUpdate', this.handleJobSSEUpdate.bind(this) as EventListener);
      window.addEventListener('jobsDataRefresh', this.handleJobsDataRefresh.bind(this) as EventListener);
    }

    handleJobSSEUpdate = (event: Event) => {
      const customEvent = event as CustomEvent;
      const { jobUpdate } = customEvent.detail;
      console.log('ðŸŽ¯ JobDashboard: Processing SSE job update:', jobUpdate);

      if (jobUpdate) {
        // Update existing job or add new job
        const jobIndex = this.jobs.findIndex(job => job.id === jobUpdate.id);
        const convertedJob = jobUtils.convertBackendJob(jobUpdate);

        if (jobIndex >= 0) {
          this.jobs[jobIndex] = convertedJob;
        } else {
          this.jobs.unshift(convertedJob);
        }

        // Re-render jobs
        this.renderJobs();
      }
    };

    handleJobsDataRefresh = (event: Event) => {
      const customEvent = event as CustomEvent;
      const { source } = customEvent.detail;
      if (source === 'sse') {
        console.log('ðŸ”„ JobDashboard: SSE triggered data refresh');
        // Could trigger full reload if needed
      }
    };

    // ===================================================================
    // Job Loading and Rendering (SOLID: Single Responsibility)
    // ===================================================================

    async loadInitialJobs() {
      try {
        this.showLoading();
        this.hideError();

        const response = await fetch(`${this.apiBaseUrl}/jobs/?page=1&page_size=10`);

        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        this.jobs = data.jobs.map(jobUtils.convertBackendJob);

        this.renderJobs();
        this.hideLoading();

      } catch (error) {
        console.error('Failed to load jobs:', error);
        this.showError();
        this.hideLoading();
      }
    }

    renderJobs() {
      const jobsList = this.querySelector('#jobs-list');
      const emptyState = this.querySelector('#jobs-empty');

      if (!jobsList || !emptyState) return;

      if (this.jobs.length === 0) {
        this.showEmptyState();
        return;
      }

      // Generate job HTML
      jobsList.innerHTML = this.jobs.map(job => this.renderJobItem(job)).join('');

      // Show jobs list, hide empty state
      jobsList.classList.remove('hidden');
      emptyState.classList.add('hidden');
    }

    renderJobItem(job) {
      const statusColor = this.getStatusColor(job.status);
      const timeAgo = jobUtils.formatRelativeTime(job.createdAt);

      return `
        <div class="job-item p-4 bg-white/5 rounded-lg border border-white/10 hover:bg-white/10 transition-colors">
          <div class="flex items-start justify-between">
            <div class="flex-1 min-w-0">
              <h3 class="font-medium text-white truncate">${job.title}</h3>
              <p class="text-sm text-white/60 truncate mt-1">${job.source_url}</p>
              <div class="flex items-center gap-3 mt-2 text-xs text-white/50">
                <span>${timeAgo}</span>
                ${job.wordCount ? `<span>${job.wordCount} words</span>` : ''}
                ${job.imageCount ? `<span>${job.imageCount} images</span>` : ''}
              </div>
            </div>
            <div class="flex items-center gap-2 ml-4">
              <span class="px-2 py-1 text-xs font-medium rounded-full ${statusColor}">
                ${job.status}
              </span>
              ${job.status === 'running' ? `<div class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>` : ''}
            </div>
          </div>
          ${job.status === 'running' && job.progress ? `
            <div class="mt-3">
              <div class="flex items-center justify-between text-xs text-white/70 mb-1">
                <span>Progress: ${job.progress}%</span>
              </div>
              <div class="w-full bg-white/10 rounded-full h-1.5">
                <div class="bg-blue-400 h-1.5 rounded-full transition-all duration-1000" style="width: ${job.progress}%"></div>
              </div>
            </div>
          ` : ''}
        </div>
      `;
    }

    // ===================================================================
    // UI State Management (SOLID: Single Responsibility)
    // ===================================================================

    showLoading() {
      const loading = this.querySelector('#jobs-loading');
      const jobsList = this.querySelector('#jobs-list');
      const emptyState = this.querySelector('#jobs-empty');

      loading?.classList.remove('hidden');
      jobsList?.classList.add('hidden');
      emptyState?.classList.add('hidden');
    }

    hideLoading() {
      const loading = this.querySelector('#jobs-loading');
      loading?.classList.add('hidden');
    }

    showEmptyState() {
      const jobsList = this.querySelector('#jobs-list');
      const emptyState = this.querySelector('#jobs-empty');

      jobsList?.classList.add('hidden');
      emptyState?.classList.remove('hidden');
    }

    showError() {
      const errorEl = this.querySelector('#jobs-error');
      errorEl?.classList.remove('hidden');
    }

    hideError() {
      const errorEl = this.querySelector('#jobs-error');
      errorEl?.classList.add('hidden');
    }

    getStatusColor(status) {
      const colors = {
        'pending': 'bg-gray-500/20 text-gray-300',
        'running': 'bg-blue-500/20 text-blue-300',
        'completed': 'bg-green-500/20 text-green-300',
        'failed': 'bg-red-500/20 text-red-300',
        'cancelled': 'bg-orange-500/20 text-orange-300'
      };
      return colors[status] || 'bg-gray-500/20 text-gray-300';
    }

    // Public method for other components to trigger refresh
    refresh(showLoading = true) {
      if (showLoading) {
        this.loadInitialJobs();
      }
    }
  }

  // Define the custom element
  customElements.define('job-dashboard', JobDashboard);
</script>
---
/**
 * UserSettingsModal - User account settings modal with passkey, SSO, and account management
 * Following Astro best practices: HTML by default, JavaScript when needed
 * DRY: Uses BaseModal for consistent behavior
 * SOLID: Single responsibility for user settings UI
 */

import BaseModal from '../common/BaseModal.astro';
import SectionDivider from '../common/SectionDivider.astro';
import OAuthConnectionCard from '../auth/oauth/OAuthConnectionCard.astro';
---

<!-- User Settings Modal using DRY/SOLID BaseModal -->
<BaseModal 
  id="user-settings-modal" 
  closeButtonId="user-settings-close"
  maxWidth="max-w-2xl"
  backdropBlur={true}
>
  <div class="liquid-glass rounded-glass p-6 border border-white/20 user-settings">
    <!-- Header -->
    <div class="mb-6">
      <h3 class="text-xl font-bold text-white">User Settings</h3>
      <p class="text-white/70 text-sm mt-1 mb-4">Manage your account, passkeys, and connected services</p>
    </div>

    <!-- Loading State -->
    <div id="settings-loading" class="hidden text-center py-8">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-400"></div>
      <p class="mt-2 text-white/70">Loading user settings...</p>
    </div>

    <!-- Error State -->
    <div id="settings-error" class="hidden bg-red-500/20 border border-red-500/30 rounded-glass p-4">
      <div class="flex">
        <svg class="w-5 h-5 text-red-400 mr-2 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
        </svg>
        <div>
          <p class="text-red-100 font-medium">Error loading settings</p>
          <p id="settings-error-message" class="text-red-200 text-sm mt-1"></p>
        </div>
      </div>
    </div>

    <!-- Settings Content -->
    <div id="settings-content" class="space-y-6">
      <!-- Smart Passkey Button -->
      <button id="passkey-btn" class="w-full glass-button px-4 py-3 bg-blue-600/80 hover:bg-blue-700/90 text-white font-medium rounded-md border border-blue-500/30 transition-all duration-200 text-sm flex items-center justify-center">
        <svg id="passkey-icon" class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
        <span id="passkey-text">Add Passkey</span>
      </button>
      <!-- Connected Accounts Divider -->
      <SectionDivider text="Connected Accounts" />
      <!-- SSO Connections Section -->
      <div class="space-y-4">
        <!-- DRY SSO Connection Components -->
        <OAuthConnectionCard
          provider="google"
          displayName="Google"
          statusId="google-status"
          toggleId="google-toggle"
        />
        <OAuthConnectionCard
          provider="github"
          displayName="GitHub"
          statusId="github-status"
          toggleId="github-toggle"
        />
        <OAuthConnectionCard
          provider="microsoft"
          displayName="Microsoft"
          statusId="microsoft-status"
          toggleId="microsoft-toggle"
        />
        <OAuthConnectionCard
          provider="facebook"
          displayName="Meta"
          statusId="facebook-status"
          toggleId="facebook-toggle"
        />
        <OAuthConnectionCard
          provider="apple"
          displayName="Apple"
          statusId="apple-status"
          toggleId="apple-toggle"
        />
      </div>

      <!-- Danger Zone Divider -->
      <SectionDivider text="Danger Zone" />

      <!-- Danger Zone -->
      <div>
        <p class="text-white/70 text-sm mb-4 text-center">
          Permanently delete your account and all associated data. This action cannot be undone.
        </p>
        <button id="delete-account-btn" class="w-full px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-all duration-200">
          Delete Account
        </button>
      </div>
    </div>
  </div>
</BaseModal>

<!-- Delete Account Confirmation Modal using BaseModal -->
<BaseModal 
  id="delete-confirm-modal" 
  closeButtonId="delete-confirm-close"
  maxWidth="max-w-md"
  backdropBlur={true}
>
  <div class="liquid-glass rounded-glass p-6 border border-white/20">
    <!-- Header -->
    <div class="mb-6 text-center">
      <svg class="w-12 h-12 text-red-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
      </svg>
      <h3 class="text-lg font-medium text-white mb-2">Are you absolutely sure?</h3>
      <p class="text-white/70 mb-6">
        This action will permanently delete your account, all your data, job history, and settings. This cannot be undone.
      </p>
    </div>

    <div class="mb-6">
      <label for="delete-confirmation" class="block text-sm font-medium text-white/90 mb-2">
        Type "DELETE" to confirm:
      </label>
      <input 
        type="text" 
        id="delete-confirmation" 
        class="w-full px-3 py-2 bg-black/30 border border-white/30 rounded-md text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500"
        placeholder="DELETE"
        autocomplete="off"
      >
    </div>
    <div class="flex justify-center space-x-4">
      <button id="cancel-delete-btn" class="px-4 py-2 bg-white/10 hover:bg-white/20 text-white font-medium rounded-md border border-white/30 hover:border-white/50 transition-all duration-200">Cancel</button>
      <button id="confirm-delete-btn" class="px-4 py-2 bg-red-600 text-white font-medium rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
        Delete Account
      </button>
    </div>
  </div>
</BaseModal>

<!-- 
  Astro Best Practice: Use script tags for interactivity
  Following the same patterns as AuthModal - simple and DRY
-->
<script>
  import { createContextLogger } from '../../utils/logger';

  // Create logger instance for this component  
  const logger = createContextLogger('UserSettingsModal');

  // User settings data - properly typed following TypeScript best practices
  interface UserInfo {
    id: string;
    username: string;
    email: string;
    full_name?: string;
    created_at: string;
    last_login?: string;
  }

  interface PasskeyInfo {
    id: string;
    name: string;
    created_at: string;
    last_used_at?: string;
    is_active: boolean;
  }

  interface SSOConnection {
    provider: string;
    connected: boolean;
    email?: string | undefined;
    displayName: string;
    canDisconnect: boolean;
  }

  interface SSOConnectionStatus {
    [provider: string]: SSOConnection;
  }

  let userInfo: UserInfo | null = null;
  // @ts-ignore - Will be used when passkey functionality is implemented
  let passkeys: PasskeyInfo[] = [];
  let ssoConnections: SSOConnectionStatus = {};

  // Clean Astro Islands script - Initialize UserSettingsModal functionality
  logger.info('UserSettingsModal script loaded');

  // Initialize modal functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Listen for open event from user settings button
    window.addEventListener('open-user-settings', () => {
      openUserSettingsModal();
    });

    // Listen for close button clicks
    const closeButton = document.getElementById('user-settings-close');
    if (closeButton) {
      closeButton.addEventListener('click', closeUserSettingsModal);
    }

    // Listen for backdrop clicks to close modal
    const modal = document.getElementById('user-settings-modal');
    if (modal) {
      modal.addEventListener('click', (e) => {
        // Check if click was on the backdrop (modal itself) or the backdrop div
        if (e.target === modal || (e.target as HTMLElement)?.classList?.contains('base-modal-backdrop')) {
          closeUserSettingsModal();
        }
      });
    }

    // Listen for escape key to close modal
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        const modal = document.getElementById('user-settings-modal');
        if (modal && !modal.classList.contains('opacity-0')) {
          closeUserSettingsModal();
        }
      }
    });

    // Initialize component functionality
    initDeleteConfirmation();
    initPasskeyManagement();
    initSSOManagement();
    
    logger.info('UserSettingsModal initialized');
  });

  // Open user settings modal and load data
  async function openUserSettingsModal() {
    logger.info('Opening user settings modal');
    
    // Show modal using the same pattern as other modals
    const modal = document.getElementById('user-settings-modal');
    if (modal) {
      modal.style.display = 'flex';
      // Use requestAnimationFrame to ensure display change takes effect first
      requestAnimationFrame(() => {
        modal.classList.remove('opacity-0', 'pointer-events-none');
        modal.classList.add('opacity-100', 'pointer-events-auto');
      });
    }
    
    await loadUserData();
  }

  // Close user settings modal
  function closeUserSettingsModal() {
    logger.info('Closing user settings modal');
    
    const modal = document.getElementById('user-settings-modal');
    if (modal) {
      modal.classList.remove('opacity-100', 'pointer-events-auto');
      modal.classList.add('opacity-0', 'pointer-events-none');
      
      // Hide after animation completes
      setTimeout(() => {
        modal.style.display = 'none';
      }, 300);
    }
  }

  // Load all user data
  async function loadUserData() {
    const loadingEl = document.getElementById('settings-loading');
    const errorEl = document.getElementById('settings-error');
    const contentEl = document.getElementById('settings-content');

    try {
      loadingEl?.classList.remove('hidden');
      errorEl?.classList.add('hidden');
      contentEl?.classList.add('hidden');

      // Load user information
      await loadUserInfo();
      await updatePasskeyButton();
      await loadSSOConnections();

      loadingEl?.classList.add('hidden');
      contentEl?.classList.remove('hidden');
    } catch (error) {
      logger.error('Failed to load user settings:', error);
      loadingEl?.classList.add('hidden');
      errorEl?.classList.remove('hidden');
      const errorMessage = document.getElementById('settings-error-message');
      if (errorMessage) {
        errorMessage.textContent = error instanceof Error ? error.message : 'Unknown error occurred';
      }
    }
  }

  // Load user information
  async function loadUserInfo() {
    const response = await fetch('/auth/me', {
      method: 'GET',
      credentials: 'include',
      headers: { 'Accept': 'application/json' },
    });

    if (!response.ok) {
      throw new Error('Failed to load user information');
    }

    userInfo = await response.json();
    
    // Null check for userInfo before accessing properties
    if (!userInfo) {
      throw new Error('User information not available');
    }
    
    // Update UI
    const emailEl = document.getElementById('user-email');
    const createdEl = document.getElementById('user-created');
    const lastSigninEl = document.getElementById('user-last-signin');
    
    if (emailEl) emailEl.textContent = userInfo.email || 'Not available';
    if (createdEl) createdEl.textContent = userInfo.created_at 
      ? new Date(userInfo.created_at).toLocaleDateString() 
      : 'Not available';
    if (lastSigninEl) lastSigninEl.textContent = userInfo.last_login 
      ? new Date(userInfo.last_login).toLocaleDateString() 
      : 'Not available';
  }


  // Smart passkey button management
  let hasPasskeys = false;

  // Update passkey button based on current passkey status
  async function updatePasskeyButton() {
    try {
      const response = await fetch('/auth/webauthn/credentials', {
        method: 'GET',
        credentials: 'include',
        headers: { 'Accept': 'application/json' },
      });

      if (response.ok) {
        const credentials = await response.json();
        hasPasskeys = credentials && credentials.length > 0;
      } else {
        hasPasskeys = false;
      }
    } catch (error) {
      logger.error('Failed to check passkey status:', error);
      hasPasskeys = false;
    }

    // Update button UI based on passkey status
    const button = document.getElementById('passkey-btn') as HTMLButtonElement | null;
    const iconElement = document.getElementById('passkey-icon');
    const text = document.getElementById('passkey-text') as HTMLSpanElement | null;

    if (!button || !iconElement || !text) return;

    // Safely cast to SVGElement after null check
    const icon = iconElement as unknown as SVGElement;

    if (hasPasskeys) {
      // User has passkeys - show revoke option
      text.textContent = 'Revoke Passkey';
      button.className = 'w-full glass-button px-4 py-3 bg-red-600/80 hover:bg-red-700/90 text-white font-medium rounded-md border border-red-500/30 transition-all duration-200 text-sm flex items-center justify-center';

      // Change icon to minus/remove icon
      icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />';

      button.onclick = revokePasskey;
    } else {
      // User has no passkeys - show add option
      text.textContent = 'Add Passkey';
      button.className = 'w-full glass-button px-4 py-3 bg-blue-600/80 hover:bg-blue-700/90 text-white font-medium rounded-md border border-blue-500/30 transition-all duration-200 text-sm flex items-center justify-center';

      // Change icon to plus icon
      icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />';

      button.onclick = addPasskey;
    }
  }

  // Initialize passkey management
  function initPasskeyManagement() {
    // Button event handlers are set in updatePasskeyButton()
  }

  // Add new passkey
  async function addPasskey() {
    try {
      logger.info('Starting passkey registration');

      const response = await fetch('/auth/webauthn/register/start', {
        method: 'POST',
        credentials: 'include',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json' 
        },
      });

      if (!response.ok) {
        throw new Error('Failed to start passkey registration');
      }

      const options = await response.json();
      
      // Create credential using WebAuthn API
      const credential = await navigator.credentials.create({ publicKey: options }) as PublicKeyCredential;

      if (!credential) {
        throw new Error('Failed to create credential');
      }

      // Type the response properly for WebAuthn
      const credentialResponse = credential.response as AuthenticatorAttestationResponse;

      // Complete registration
      const finishResponse = await fetch('/auth/webauthn/register/finish', {
        method: 'POST',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          id: credential.id,
          rawId: Array.from(new Uint8Array(credential.rawId)),
          type: credential.type,
          response: {
            attestationObject: Array.from(new Uint8Array(credentialResponse.attestationObject)),
            clientDataJSON: Array.from(new Uint8Array(credentialResponse.clientDataJSON)),
          },
        }),
      });

      if (!finishResponse.ok) {
        throw new Error('Failed to complete passkey registration');
      }

      logger.info('Passkey added successfully');
      await updatePasskeyButton(); // Refresh button state
    } catch (error) {
      logger.error('Failed to add passkey:', error);
      alert('Failed to add passkey. Please try again.');
    }
  }

  // Revoke all passkeys
  async function revokePasskey() {
    if (!confirm('Are you sure you want to revoke all your passkeys? This will disable passwordless authentication for your account.')) {
      return;
    }

    try {
      logger.info('Starting passkey revocation');

      // First get all credentials
      const response = await fetch('/auth/webauthn/credentials', {
        method: 'GET',
        credentials: 'include',
        headers: { 'Accept': 'application/json' },
      });

      if (!response.ok) {
        throw new Error('Failed to get passkeys');
      }

      const credentials = await response.json();

      // Delete each credential
      for (const credential of credentials) {
        const deleteResponse = await fetch(`/auth/webauthn/credentials/${credential.id}`, {
          method: 'DELETE',
          credentials: 'include',
          headers: { 'Accept': 'application/json' },
        });

        if (!deleteResponse.ok) {
          throw new Error(`Failed to delete passkey ${credential.id}`);
        }
      }

      logger.info('All passkeys revoked successfully');
      await updatePasskeyButton(); // Refresh button state
    } catch (error) {
      logger.error('Failed to revoke passkeys:', error);
      alert('Failed to revoke passkeys. Please try again.');
    }
  }


  // DRY SSO Provider Configuration
  const SSO_PROVIDERS = [
    { key: 'google', displayName: 'Google' },
    { key: 'github', displayName: 'GitHub' },
    { key: 'microsoft', displayName: 'Microsoft' },
    { key: 'facebook', displayName: 'Meta' },
    { key: 'apple', displayName: 'Apple' }
  ];

  // Load SSO connections with DRY implementation
  async function loadSSOConnections() {
    // First, get connected providers (mock for now until backend implements this)
    const connectedProviders = await getConnectedSSOProviders();
    const connectedCount = Object.values(connectedProviders).filter(conn => conn.connected).length;

    for (const providerConfig of SSO_PROVIDERS) {
      const provider = providerConfig.key;
      const connection = connectedProviders[provider] || {
        provider,
        connected: false,
        displayName: providerConfig.displayName,
        canDisconnect: false
      };

      // Update canDisconnect logic: can only disconnect if more than one SSO is connected
      connection.canDisconnect = connection.connected && connectedCount > 1;

      ssoConnections[provider] = connection;
      updateSSOProviderUI(provider, connection);
    }
  }

  // DRY function to get connected SSO providers - truly scalable for any number of providers
  async function getConnectedSSOProviders(): Promise<SSOConnectionStatus> {
    const connections: SSOConnectionStatus = {};

    // Get real user data from the authenticated session
    let currentUser: UserInfo | null = null;
    try {
      const userResponse = await fetch('/auth/me', {
        method: 'GET',
        credentials: 'include',
        headers: { 'Accept': 'application/json' },
      });

      if (userResponse.ok) {
        currentUser = await userResponse.json();
      }
    } catch (error) {
      logger.error('Failed to get user data:', error);
    }

    // Check each provider for connection status
    for (const providerConfig of SSO_PROVIDERS) {
      const provider = providerConfig.key;
      const connection = await checkSSOProviderConnection(provider, providerConfig.displayName, currentUser);
      connections[provider] = connection;
    }

    return connections;
  }

  // DRY function to check individual SSO provider connection - works for ANY provider
  async function checkSSOProviderConnection(
    provider: string,
    displayName: string,
    currentUser: UserInfo | null
  ): Promise<SSOConnection> {
    try {
      // Step 1: Try to get real OAuth connection data from backend database
      const realConnectionData = await getRealSSOConnectionData(provider);

      if (realConnectionData !== null) {
        return {
          provider,
          connected: realConnectionData.connected,
          email: realConnectionData.email,
          displayName,
          canDisconnect: false // Will be set in loadSSOConnections based on total connected count
        };
      }

      // Step 2: Fallback to intelligent heuristics if real data not available
      const heuristicData = await detectProviderConnection(provider, currentUser);

      return {
        provider,
        connected: heuristicData.connected,
        email: heuristicData.email,
        displayName,
        canDisconnect: false // Will be set in loadSSOConnections based on total connected count
      };
    } catch (error) {
      logger.error(`Failed to check ${provider} connection:`, error);
      return {
        provider,
        connected: false,
        displayName,
        canDisconnect: false
      };
    }
  }

  // Check for real SSO connection data from backend database
  async function getRealSSOConnectionData(provider: string): Promise<{connected: boolean, email?: string} | null> {
    // Option 1: Try dedicated OAuth connections endpoint (when implemented)
    try {
      const response = await fetch(`/auth/oauth/${provider}/status`, {
        method: 'GET',
        credentials: 'include',
        headers: { 'Accept': 'application/json' },
      });

      if (response.ok) {
        const data = await response.json();
        return {
          connected: data.connected || false,
          email: data.email
        };
      }
    } catch {
      // Endpoint doesn't exist yet, try other methods
    }

    // Option 1b: Try general linked accounts endpoint
    try {
      const response = await fetch('/auth/linked-accounts', {
        method: 'GET',
        credentials: 'include',
        headers: { 'Accept': 'application/json' },
      });

      if (response.ok) {
        const linkedAccounts = await response.json();
        const providerAccount = linkedAccounts.find((account: { provider: string; email?: string }) => account.provider === provider);

        if (providerAccount) {
          return {
            connected: true,
            email: providerAccount.email
          };
        } else {
          return {
            connected: false
          };
        }
      }
    } catch {
      // Linked accounts endpoint doesn't exist yet
    }

    // Option 2: Check user settings for OAuth connection data
    try {
      const settingsResponse = await fetch('/user/settings/', {
        method: 'GET',
        credentials: 'include',
        headers: { 'Accept': 'application/json' },
      });

      if (settingsResponse.ok) {
        const settings = await settingsResponse.json();
        const oauthConnections = settings.custom_settings?.oauth_connections;

        if (oauthConnections && oauthConnections[provider]) {
          return {
            connected: oauthConnections[provider].connected || false,
            email: oauthConnections[provider].email
          };
        }
      }
    } catch {
      // Custom settings don't contain OAuth data yet
    }

    // Option 3: TODO - Add more database checking methods as backend evolves

    return null; // No real data available, use fallback heuristics
  }

  // Intelligent SSO connection detection - works for any provider without hardcoding
  async function detectProviderConnection(provider: string, currentUser: UserInfo | null): Promise<{connected: boolean, email?: string}> {
    // TODO: When backend implements `/auth/oauth/${provider}/status`, replace this entire function

    if (!currentUser) {
      return { connected: false };
    }

    // For now, we'll use heuristics to detect probable connections
    // This is much better than hardcoding specific providers

    // Heuristic 1: Check if user email domain suggests SSO provider
    const emailDomain = currentUser.email?.split('@')[1]?.toLowerCase();
    const providerPatterns: Record<string, string[]> = {
      google: ['gmail.com', 'googlemail.com'],
      microsoft: ['outlook.com', 'hotmail.com', 'live.com', 'msn.com'],
      github: [], // GitHub doesn't use email domain patterns
      facebook: [], // Facebook doesn't use email domain patterns
      apple: ['icloud.com', 'me.com', 'mac.com']
    };

    const patterns = providerPatterns[provider] || [];
    const domainMatches = emailDomain && patterns.includes(emailDomain);

    // Heuristic 2: For demonstration, we'll assume the current session came from the most likely SSO provider
    // In real implementation, this would be replaced by actual backend connection tracking

    if (domainMatches) {
      return {
        connected: true,
        email: currentUser.email
      };
    }

    // Default: assume not connected (until backend provides real data)
    return { connected: false };
  }

  // DRY function to update SSO provider UI
  function updateSSOProviderUI(provider: string, connection: SSOConnection) {
    const statusEl = document.getElementById(`${provider}-status`) as HTMLElement;
    const toggleEl = document.getElementById(`${provider}-toggle`) as HTMLButtonElement;

    if (!statusEl || !toggleEl) return;

    if (connection.connected) {
      // Connected state
      statusEl.textContent = 'Connected';
      statusEl.className = 'text-sm text-green-400';

      toggleEl.textContent = 'Disconnect';
      toggleEl.disabled = !connection.canDisconnect;

      if (connection.canDisconnect) {
        toggleEl.className = 'glass-button px-4 py-2 bg-red-600/80 hover:bg-red-700/90 text-white font-medium rounded-md border border-red-500/30 transition-all duration-200 text-sm';
      } else {
        toggleEl.className = 'glass-button px-4 py-2 bg-gray-600/50 text-white/50 font-medium rounded-md border border-gray-500/30 cursor-not-allowed text-sm';
        toggleEl.title = 'Cannot disconnect your only connected account';
      }

      toggleEl.onclick = connection.canDisconnect ? () => toggleSSO(provider) : null;
    } else {
      // Disconnected state
      statusEl.textContent = 'Not connected';
      statusEl.className = 'text-sm text-white/70';

      toggleEl.textContent = 'Connect';
      toggleEl.disabled = false;
      toggleEl.className = 'glass-button px-4 py-2 bg-blue-600/80 hover:bg-blue-700/90 text-white font-medium rounded-md border border-blue-500/30 transition-all duration-200 text-sm';
      toggleEl.onclick = () => toggleSSO(provider);
      toggleEl.title = '';
    }
  }

  // Initialize SSO management
  function initSSOManagement() {
    // SSO toggle handlers are set up in loadSSOConnections
  }

  // Toggle SSO connection
  async function toggleSSO(provider: string) {
    const isConnected = ssoConnections[provider];

    if (isConnected) {
      // Disconnect
      if (!confirm(`Are you sure you want to disconnect your ${provider} account?`)) {
        return;
      }

      try {
        const response = await fetch(`/auth/oauth/${provider}/disconnect`, {
          method: 'POST',
          credentials: 'include',
          headers: { 'Accept': 'application/json' },
        });

        if (!response.ok) {
          throw new Error(`Failed to disconnect ${provider} account`);
        }

        logger.info(`${provider} account disconnected successfully`);
        await loadSSOConnections();
      } catch (error) {
        logger.error(`Failed to disconnect ${provider} account:`, error);
        alert(`Failed to disconnect ${provider} account. Please try again.`);
      }
    } else {
      // Connect
      window.location.href = `/auth/oauth/${provider}`;
    }
  }

  // Initialize delete confirmation
  function initDeleteConfirmation() {
    const deleteBtn = document.getElementById('delete-account-btn') as HTMLButtonElement;
    const confirmInput = document.getElementById('delete-confirmation') as HTMLInputElement;
    const confirmBtn = document.getElementById('confirm-delete-btn') as HTMLButtonElement;
    const cancelBtn = document.getElementById('cancel-delete-btn') as HTMLButtonElement;

    if (deleteBtn) {
      deleteBtn.addEventListener('click', () => {
        // Show delete confirmation modal
        const deleteModal = document.getElementById('delete-confirm-modal');
        if (deleteModal) {
          deleteModal.style.display = 'flex';
          deleteModal.classList.remove('opacity-0', 'pointer-events-none');
          deleteModal.classList.add('opacity-100', 'pointer-events-auto');
        }
        if (confirmInput) confirmInput.value = '';
        if (confirmBtn) confirmBtn.disabled = true;
      });
    }

    if (confirmInput) {
      confirmInput.addEventListener('input', () => {
        if (confirmBtn) {
          confirmBtn.disabled = confirmInput.value !== 'DELETE';
        }
      });
    }

    if (cancelBtn) {
      cancelBtn.addEventListener('click', () => {
        // Hide delete confirmation modal
        const deleteModal = document.getElementById('delete-confirm-modal');
        if (deleteModal) {
          deleteModal.classList.add('opacity-0', 'pointer-events-none');
          deleteModal.classList.remove('opacity-100', 'pointer-events-auto');
          setTimeout(() => {
            deleteModal.style.display = 'none';
          }, 300);
        }
      });
    }

    if (confirmBtn) {
      confirmBtn.addEventListener('click', deleteAccount);
    }
  }

  // Delete account
  async function deleteAccount() {
    try {
      const response = await fetch('/auth/delete-account', {
        method: 'DELETE',
        credentials: 'include',
        headers: { 'Accept': 'application/json' },
      });

      if (!response.ok) {
        throw new Error('Failed to delete account');
      }

      // Account deleted successfully - redirect to home
      logger.info('Account deleted successfully');
      window.location.href = '/';
    } catch (error) {
      logger.error('Failed to delete account:', error);
      alert('Failed to delete account. Please try again.');
    }
  }
</script>

<style>
  /* User Settings Modal Styles */
  .user-settings {
    max-width: 600px;
    max-height: 90vh;
    overflow-y: auto;
  }

  /* Glass effect styles matching the rest of the app */
  .liquid-glass {
    backdrop-filter: blur(12px);
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .rounded-glass {
    border-radius: 12px;
  }

  .glass-button {
    backdrop-filter: blur(8px);
    transition: all 0.2s ease-out;
  }

  .glass-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .glass-button:active {
    transform: translateY(0);
  }

  .glass-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  /* Smooth loading animation */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>
---
/**
 * Unified Authentication Modal - Astro Component
 * Following Astro best practices: HTML by default, JavaScript when needed
 * DRY: Uses BaseModal for consistent behavior
 * SOLID: Single responsibility for authentication UI
 */

import BaseModal from '../common/BaseModal.astro';
import SectionDivider from '../common/SectionDivider.astro';
import OAuthProviderIcons from '../auth/oauth/OAuthProviderIcons.astro';
---

<!-- Unified Auth Modal using DRY/SOLID BaseModal -->
<BaseModal 
  id="auth-modal" 
  closeButtonId="auth-close"
  maxWidth="max-w-md"
  backdropBlur={true}
>
  <div class="liquid-glass rounded-glass p-6 border border-white/20">
    <!-- Header -->
    <div class="mb-6">
      <h3 class="text-xl font-bold text-white">Welcome to CSFrace</h3>
      <p class="text-white/70 text-sm mt-1">Sign in securely with modern authentication</p>
    </div>

    <!-- Error Display -->
    <div id="auth-error" class="hidden p-4 rounded-glass bg-red-500/20 border border-red-500/30 text-red-100 text-sm mb-4">
      <div class="flex items-start space-x-3">
        <svg class="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <div>
          <p class="font-medium">Authentication Failed</p>
          <p class="mt-1" id="auth-error-message"></p>
        </div>
      </div>
    </div>

    <!-- Loading Overlay -->
    <div id="auth-loading" class="hidden absolute inset-0 bg-black/50 rounded-glass flex items-center justify-center">
      <div class="flex items-center space-x-2 text-white">
        <div class="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
        <span id="auth-loading-text">Authenticating...</span>
      </div>
    </div>

    <div class="space-y-6">
      <!-- Passkey Authentication Section -->
      <div id="passkey-section" class="space-y-3">
        <!-- Existing User - Use Passkey -->
        <button 
          id="use-passkey"
          class="glass-button w-full px-4 py-3 bg-gradient-to-r from-blue-500/80 to-purple-600/80 hover:from-blue-600/90 hover:to-purple-700/90 text-white font-medium rounded-lg border border-white/20 transition-all duration-200 flex items-center justify-center space-x-2"
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 12H9v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4a2 2 0 012-2m0 0V9a2 2 0 012-2h2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
          <span>Use Passkey</span>
        </button>

        
        <div class="text-center">
          <p class="text-xs text-white/60">
            Secure authentication with your fingerprint, face, or security key
          </p>
        </div>
      </div>

      <!-- OAuth Divider -->
      <SectionDivider text="Or continue with" />

      <!-- OAuth Providers List - Connected to real backend APIs -->
      <div id="oauth-providers" class="space-y-2" role="list" aria-label="Choose a service to sign in with">
        <button
          data-oauth-provider="google"
          class="glass-button w-full px-4 py-3 bg-white hover:bg-gray-100 text-white font-medium rounded-lg border border-gray-300 transition-all duration-200 flex items-center justify-center space-x-3"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
            <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
            <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
            <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
          </svg>
          <span>Continue with Google</span>
        </button>

        <button
          data-oauth-provider="github"
          class="glass-button w-full px-4 py-3 bg-gray-900 hover:bg-gray-800 text-white font-medium rounded-lg border border-gray-700 transition-all duration-200 flex items-center justify-center space-x-3"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M12 0C5.37 0 0 5.37 0 12c0 5.31 3.435 9.795 8.205 11.385.6.105.825-.255.825-.57 0-.285-.015-1.23-.015-2.235-3.015.555-3.795-.735-4.035-1.41-.135-.345-.72-1.41-1.23-1.695-.42-.225-1.02-.78-.015-.795.945-.015 1.62.87 1.845 1.23 1.08 1.815 2.805 1.305 3.495.99.105-.78.42-1.305.765-1.605-2.67-.3-5.46-1.335-5.46-5.925 0-1.305.465-2.385 1.23-3.225-.12-.3-.54-1.53.12-3.18 0 0 1.005-.315 3.3 1.23.96-.27 1.98-.405 3-.405s2.04.135 3 .405c2.295-1.56 3.3-1.23 3.3-1.23.66 1.65.24 2.88.12 3.18.765.84 1.23 1.905 1.23 3.225 0 4.605-2.805 5.625-5.475 5.925.435.375.81 1.095.81 2.22 0 1.605-.015 2.895-.015 3.3 0 .315.225.69.825.57A12.02 12.02 0 0 0 24 12c0-6.63-5.37-12-12-12z"/>
          </svg>
          <span>Continue with GitHub</span>
        </button>

        <button
          data-oauth-provider="microsoft"
          class="glass-button w-full px-4 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg border border-blue-500 transition-all duration-200 flex items-center justify-center space-x-3"
        >
          <OAuthProviderIcons provider="microsoft" className="w-5 h-5" monochrome={true} />
          <span>Continue with Microsoft</span>
        </button>

        <button
          data-oauth-provider="facebook"
          class="glass-button w-full px-4 py-3 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded-lg border border-blue-400 transition-all duration-200 flex items-center justify-center space-x-3"
        >
          <OAuthProviderIcons provider="facebook" className="w-5 h-5" monochrome={true} />
          <span>Continue with Meta</span>
        </button>

        <button
          data-oauth-provider="apple"
          class="glass-button w-full px-4 py-3 bg-black hover:bg-gray-900 text-white font-medium rounded-lg border border-gray-600 transition-all duration-200 flex items-center justify-center space-x-3"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path d="M17.05 20.28c-.98.95-2.05.8-3.08.35-1.09-.46-2.09-.48-3.24 0-1.44.62-2.2.44-3.06-.35C2.79 15.25 3.51 7.59 9.05 7.31c1.35.07 2.29.74 3.08.8 1.18-.24 2.31-.93 3.57-.84 1.51.12 2.65.72 3.4 1.8-3.12 1.87-2.38 5.98.48 7.13-.57 1.5-1.31 2.99-2.54 4.09zM12.03 7.25c-.15-2.23 1.66-4.07 3.74-4.25.29 2.58-2.34 4.5-3.74 4.25z"/>
          </svg>
          <span>Continue with Apple</span>
        </button>
      </div>

      <!-- Benefits Section -->
      <div class="liquid-glass rounded-glass p-4 space-y-3">
        <div class="flex items-center gap-2">
          <svg class="w-4 h-4 text-green-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
          </svg>
          <span class="text-sm font-medium text-white">Modern Security</span>
        </div>
        <div class="text-xs text-white/70 space-y-1">
          <div>• No passwords to remember or lose</div>
          <div>• Biometric authentication for instant access</div>
          <div>• Secure OAuth 2.0 with trusted providers</div>
          <div>• Account creation and login in one flow</div>
        </div>
      </div>
    </div>
  </div>
</BaseModal>

<!-- 
  Astro Best Practice: Use script tags for interactivity
  Following the authentication patterns from Astro docs
-->
<script>
  import { createContextLogger } from '../../utils/logger';

  // WebAuthn TypeScript interfaces for proper type safety
  interface AuthenticatorAttestationResponse extends AuthenticatorResponse {
    attestationObject: ArrayBuffer;
  }

  interface AuthenticatorAssertionResponse extends AuthenticatorResponse {
    authenticatorData: ArrayBuffer;
    signature: ArrayBuffer;
    userHandle: ArrayBuffer | null;
  }

  interface PublicKeyCredentialWithAttestation extends PublicKeyCredential {
    response: AuthenticatorAttestationResponse;
  }

  interface PublicKeyCredentialWithAssertion extends PublicKeyCredential {
    response: AuthenticatorAssertionResponse;
  }

  // Create logger instance for this component
  const logger = createContextLogger('AuthModal');

  // Clean Astro Islands script - Initialize AuthModal functionality
  logger.info('Islands script loaded');

  // Initialize OAuth button handlers
  document.addEventListener('DOMContentLoaded', () => {
    // Handle OAuth provider buttons
    const oauthButtons = document.querySelectorAll('[data-oauth-provider]');
    oauthButtons.forEach(button => {
      button.addEventListener('click', async (e) => {
        e.preventDefault();
        const provider = button.getAttribute('data-oauth-provider');
        if (provider) {
          // Store original button content
          const originalText = button.innerHTML;
          const buttonElement = button as HTMLButtonElement;

          try {
            logger.info('Starting OAuth flow', { provider });

            // Show loading state
            buttonElement.disabled = true;
            button.innerHTML = `
              <div class="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent mr-2"></div>
              Connecting...
            `;

            // Call backend OAuth login endpoint with correct redirect_uri
            const response = await fetch(`https://localhost/auth/oauth/login`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                provider,
                redirect_uri: `${window.location.origin}/auth/oauth/${provider}/callback`
              })
            });

            if (response.ok) {
              const result = await response.json();
              if (result.authorization_url) {
                // Redirect to OAuth provider
                window.location.href = result.authorization_url;
              } else {
                throw new Error('No authorization URL returned');
              }
            } else {
              throw new Error(`OAuth request failed: ${response.status}`);
            }
          } catch (error) {
            logger.error('OAuth error', { provider, error });

            // Show error
            const errorContainer = document.getElementById('auth-error');
            const errorMessage = document.getElementById('auth-error-message');
            if (errorContainer && errorMessage) {
              errorMessage.textContent = `Failed to connect with ${provider}. Please try again.`;
              errorContainer.classList.remove('hidden');
            }

            // Reset button
            buttonElement.disabled = false;
            button.innerHTML = originalText;
          }
        }
      });
    });

    // Handle passkey buttons
    const usePasskeyBtn = document.getElementById('use-passkey');
    const createPasskeyBtn = document.getElementById('create-passkey');

    if (usePasskeyBtn) {
      usePasskeyBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        await handlePasskeyAuthentication();
      });
    }

    if (createPasskeyBtn) {
      createPasskeyBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        await handlePasskeyRegistration();
      });
    }
  });

  // Passkey authentication handler
  async function handlePasskeyAuthentication() {
    try {
      logger.info('Starting passkey authentication');

      // Show loading
      showAuthLoading('Authenticating with passkey...');

      // Begin authentication
      const beginResponse = await fetch('https://localhost/auth/passkeys/authenticate/begin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!beginResponse.ok) throw new Error('Failed to begin passkey authentication');

      const beginData = await beginResponse.json();

      // Use WebAuthn API with proper typing
      const credential = await navigator.credentials.get({
        publicKey: beginData
      }) as PublicKeyCredentialWithAssertion | null;

      if (!credential) throw new Error('No credential returned');

      // Complete authentication
      const completeResponse = await fetch('https://localhost/auth/passkeys/authenticate/complete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: credential.id,
          rawId: Array.from(new Uint8Array(credential.rawId)),
          response: {
            authenticatorData: Array.from(new Uint8Array(credential.response.authenticatorData)),
            clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON)),
            signature: Array.from(new Uint8Array(credential.response.signature)),
            userHandle: credential.response.userHandle ? Array.from(new Uint8Array(credential.response.userHandle)) : null
          },
          type: credential.type
        })
      });

      if (!completeResponse.ok) throw new Error('Passkey authentication failed');

      const result = await completeResponse.json();
      handleAuthSuccess(result);

    } catch (error) {
      logger.error('Passkey authentication error', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      showAuthError(`Passkey authentication failed: ${errorMessage}`);
    } finally {
      hideAuthLoading();
    }
  }

  // Passkey registration handler
  async function handlePasskeyRegistration() {
    try {
      logger.info('Starting passkey registration');

      // Show loading
      showAuthLoading('Creating passkey...');

      // Begin registration
      const beginResponse = await fetch('https://localhost/auth/passkeys/register/begin', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: `user_${Date.now()}`, // Generate a unique username
          display_name: 'CSFrace User'
        })
      });

      if (!beginResponse.ok) throw new Error('Failed to begin passkey registration');

      const beginData = await beginResponse.json();

      // Use WebAuthn API with proper typing
      const credential = await navigator.credentials.create({
        publicKey: beginData
      }) as PublicKeyCredentialWithAttestation | null;

      if (!credential) throw new Error('No credential created');

      // Complete registration
      const completeResponse = await fetch('https://localhost/auth/passkeys/register/complete', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: credential.id,
          rawId: Array.from(new Uint8Array(credential.rawId)),
          response: {
            attestationObject: Array.from(new Uint8Array(credential.response.attestationObject)),
            clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON))
          },
          type: credential.type
        })
      });

      if (!completeResponse.ok) throw new Error('Passkey registration failed');

      const result = await completeResponse.json();
      handleAuthSuccess(result);

    } catch (error) {
      logger.error('Passkey registration error', error);
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      showAuthError(`Failed to create passkey: ${errorMessage}`);
    } finally {
      hideAuthLoading();
    }
  }

  // Helper functions
  function showAuthLoading(message: string) {
    const loading = document.getElementById('auth-loading');
    const loadingText = document.getElementById('auth-loading-text');
    if (loading && loadingText) {
      loadingText.textContent = message;
      loading.classList.remove('hidden');
    }
  }

  function hideAuthLoading() {
    const loading = document.getElementById('auth-loading');
    if (loading) {
      loading.classList.add('hidden');
    }
  }

  function showAuthError(message: string) {
    const errorContainer = document.getElementById('auth-error');
    const errorMessage = document.getElementById('auth-error-message');
    if (errorContainer && errorMessage) {
      errorMessage.textContent = message;
      errorContainer.classList.remove('hidden');
    }
  }

  function handleAuthSuccess(result: { user?: unknown; tokens?: unknown; success?: boolean; access_token?: string }) {
    logger.info('Authentication successful', result);

    // Note: Tokens are now stored in httpOnly cookies by the backend
    // Only store non-sensitive user data for UI purposes
    if (result.user) {
      localStorage.setItem('user_data', JSON.stringify(result.user));
    }

    // Emit success event
    window.dispatchEvent(new CustomEvent('auth-success', { detail: result }));

    // Close modal
    const modal = document.getElementById('auth-modal');
    if (modal) {
      modal.classList.add('hidden');
    }

    // Reload page to update UI (backend cookies will be automatically included)
    window.location.reload();
  }

  // Initialize AuthModal manager to handle openAuthModal events
  (async () => {
    try {
      const { AuthModalManager } = await import('/src/scripts/authModalManager');
      const authModalManager = new AuthModalManager({
        modalId: 'auth-modal',
        closeOnEscape: true,
        closeOnBackdrop: true,
        onAuthSuccess: (user) => {
          logger.info('Authentication successful via manager', user);
          handleAuthSuccess({ user });
        }
      });
      authModalManager.init();
      logger.info('Manager initialized successfully');
    } catch (error) {
      logger.error('Failed to load manager', { error });
    }
  })();
</script>

<style>
  /* Additional styles for auth modal animations and states */
  .liquid-glass {
    backdrop-filter: blur(12px);
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .glass-button {
    backdrop-filter: blur(8px);
    transition: all 0.2s ease-out;
  }

  .glass-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .glass-button:active {
    transform: translateY(0);
  }

  .glass-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none !important;
  }

  /* Smooth loading animation */
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>
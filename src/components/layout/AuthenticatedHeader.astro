---
/**
 * AuthenticatedHeader - Astro Implementation
 * Converted from React to Astro with Islands for interactivity
 * Navigation header with authentication state and user menu
 */

import type { HTMLAttributes } from 'astro/types';

// Component props interface
export interface Props extends HTMLAttributes<'header'> {
  class?: string;
}

// Extract props
const {
  class: className = '',
  ...htmlProps
} = Astro.props;

// Generate unique IDs for this header instance
const headerId = `header-${Math.random().toString(36).substring(2, 11)}`;
const authPanelId = `auth-panel-${Math.random().toString(36).substring(2, 11)}`;
---

<!-- Header element with data attributes for Islands script -->
<header
  id={headerId}
  class:list={[
    'fixed top-0 left-0 right-0 z-50',
    className
  ]}
  data-component="authenticated-header"
  data-header-id={headerId}
  data-auth-panel-id={authPanelId}
  {...htmlProps}
>
  <nav class="bg-black/90 backdrop-blur-lg border-b border-white/10 py-4">
    <div class="max-w-7xl mx-auto px-8 flex items-center justify-between">
      <!-- Logo/Brand -->
      <div class="flex items-center space-x-3">
        <div class="w-8 h-8 bg-gradient-to-r from-blue-400 to-purple-500 rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
          </svg>
        </div>
        <span class="text-white font-semibold text-lg">CSFrace Scrape</span>
      </div>

      <!-- Navigation Links -->
      <div class="hidden md:flex items-center space-x-6">
        <a href="/" class="text-white/80 hover:text-white transition-colors">
          Converter
        </a>
        <a
          href="/dashboard"
          class="text-white/80 hover:text-white transition-colors"
          data-auth-required="true"
          style="display: none;"
        >
          Dashboard
        </a>
      </div>

      <!-- User Actions -->
      <div class="flex items-center space-x-3">
        <!-- Settings Button -->
        <button
          id="settings-btn"
          class="glass-button p-2 text-white/80 hover:text-white transition-all duration-200 relative"
          aria-label="Open Settings"
          data-action="toggle-settings"
        >
          <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
        </button>

        <!-- Authentication Section (loading state by default) -->
        <div id="auth-section" class="flex items-center space-x-3">
          <!-- Loading state -->
          <div id="auth-loading" class="flex items-center space-x-2">
            <div class="w-8 h-8 animate-spin border-2 border-white/20 border-t-white rounded-full"></div>
          </div>

          <!-- Authenticated user section (hidden by default) -->
          <div id="auth-user" class="flex items-center space-x-3" style="display: none;">
            <!-- User Avatar & Info -->
            <div class="flex items-center space-x-3">
              <div id="user-avatar" class="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-medium">
                ?
              </div>

              <!-- User Name (desktop) -->
              <div class="hidden md:block text-left">
                <div id="user-name" class="text-white text-sm font-medium">
                  Loading...
                </div>
              </div>
            </div>

            <!-- User Actions Button -->
            <button
              id="user-menu-btn"
              class="glass-button p-2 text-white/80 hover:text-white transition-all duration-200"
              aria-label="User menu"
              data-action="toggle-auth-panel"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
            </button>
          </div>

          <!-- Not authenticated section (hidden by default) -->
          <button
            id="auth-signin"
            class="glass-button px-4 py-2 text-blue-400 hover:text-blue-300 border border-blue-500/30 hover:border-blue-500/50 transition-all duration-200 flex items-center space-x-2"
            style="display: none;"
            data-action="toggle-auth-panel"
          >
            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
            </svg>
            <span>Sign In</span>
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Auth Panel - Slides up from bottom -->
  <div
    id={authPanelId}
    class="fixed -bottom-20 left-0 right-0 z-40 transform translate-y-full transition-transform duration-300 ease-out pointer-events-none"
    data-component="auth-panel"
  >
    <div class="max-w-4xl mx-auto px-8 py-6">
      <div class="liquid-glass rounded-glass p-6 border border-white/20">
        <!-- Content will be populated by Islands script -->
        <div id="auth-panel-content">
          <div class="text-center py-8">
            <div class="w-8 h-8 animate-spin border-2 border-white/20 border-t-white rounded-full mx-auto mb-4"></div>
            <p class="text-white/70">Loading...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Astro Islands script for client-side functionality -->
<script>
  // Header management class for authentication and navigation - Astro MCP best practice
  class AuthenticatedHeader {
    private headerId: string | undefined;
    private authPanelId: string | undefined;
    private header: HTMLElement | null;
    private authPanel: HTMLElement | null;
    private isInitialized: boolean;
    private authState: any;
    private oauthProviders: any[];

    constructor() {
      // Get IDs from data attributes (Astro MCP best practice)
      const container = document.querySelector('[data-component="authenticated-header"]') as HTMLElement;
      this.headerId = container?.dataset.headerId;
      this.authPanelId = container?.dataset.authPanelId;
      this.header = document.getElementById(this.headerId || '');
      this.authPanel = document.getElementById(this.authPanelId || '');
      this.isInitialized = false;
      this.authState = null;
      this.oauthProviders = [];

      this.init();
    }

    async init() {
      if (!this.header || this.isInitialized) return;

      // Set up event listeners
      this.setupEventListeners();

      // Load authentication state
      await this.loadAuthState();

      // Update UI based on auth state
      this.updateAuthUI();

      this.isInitialized = true;
      console.log('üîê AuthenticatedHeader: Initialized with auth state management');
    }

    setupEventListeners() {
      // Settings button
      const settingsBtn = document.getElementById('settings-btn');
      if (settingsBtn) {
        settingsBtn.addEventListener('click', () => this.toggleSettings());
      }

      // Auth panel toggle buttons
      const userMenuBtn = document.getElementById('user-menu-btn');
      const authSigninBtn = document.getElementById('auth-signin');

      if (userMenuBtn) {
        userMenuBtn.addEventListener('click', () => this.toggleAuthPanel());
      }

      if (authSigninBtn) {
        authSigninBtn.addEventListener('click', () => this.toggleAuthPanel());
      }

      // Close auth panel on outside click
      document.addEventListener('click', (event) => {
        const target = event.target as HTMLElement;
        if (this.authPanel && !this.authPanel.contains(target) &&
            !target.closest('[data-action="toggle-auth-panel"]')) {
          this.closeAuthPanel();
        }
      });

      // Escape key to close panels
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          this.closeAuthPanel();
        }
      });
    }

    async loadAuthState() {
      try {
        // Check authentication status from backend
        const response = await fetch('/api/auth/me', {
          credentials: 'include'
        });

        if (response.ok) {
          this.authState = await response.json();
        } else {
          this.authState = null;
        }

        // Load OAuth providers
        const providersResponse = await fetch('/api/auth/oauth/providers');
        if (providersResponse.ok) {
          this.oauthProviders = await providersResponse.json();
        }
      } catch (error) {
        console.log('üîê AuthenticatedHeader: No authentication available', error);
        this.authState = null;
      }
    }

    updateAuthUI() {
      const authLoading = document.getElementById('auth-loading') as HTMLElement;
      const authUser = document.getElementById('auth-user') as HTMLElement;
      const authSignin = document.getElementById('auth-signin') as HTMLElement;
      const dashboardLink = document.querySelector('[data-auth-required="true"]') as HTMLElement;

      // Hide loading
      if (authLoading) authLoading.style.display = 'none';

      if (this.authState && this.authState.user) {
        // Show authenticated UI
        if (authUser) authUser.style.display = 'flex';
        if (authSignin) authSignin.style.display = 'none';
        if (dashboardLink) dashboardLink.style.display = 'block';

        // Update user info
        this.updateUserInfo();
      } else {
        // Show sign-in UI
        if (authUser) authUser.style.display = 'none';
        if (authSignin) authSignin.style.display = 'flex';
        if (dashboardLink) dashboardLink.style.display = 'none';
      }
    }

    updateUserInfo() {
      if (!this.authState?.user) return;

      const user = this.authState.user;
      const userAvatar = document.getElementById('user-avatar');
      const userName = document.getElementById('user-name');

      // Update avatar
      if (userAvatar) {
        const displayName = user.profile?.display_name ||
                          user.profile?.first_name ||
                          user.username ||
                          user.email;
        userAvatar.textContent = displayName[0]?.toUpperCase() || '?';
      }

      // Update name
      if (userName) {
        const fullName = user.profile?.display_name ||
                        `${user.profile?.first_name || ''} ${user.profile?.last_name || ''}`.trim() ||
                        user.username ||
                        user.email.split('@')[0];
        userName.textContent = fullName;
      }
    }

    toggleSettings() {
      // Dispatch event for settings panel
      window.dispatchEvent(new CustomEvent('toggle-settings'));
    }

    toggleAuthPanel() {
      if (!this.authPanel) return;

      const isOpen = !this.authPanel.classList.contains('translate-y-full');

      if (isOpen) {
        this.closeAuthPanel();
      } else {
        this.openAuthPanel();
      }
    }

    openAuthPanel() {
      if (!this.authPanel) return;

      // Update panel content
      this.updateAuthPanelContent();

      // Show panel
      this.authPanel.classList.remove('translate-y-full', 'pointer-events-none', '-bottom-20');
      this.authPanel.classList.add('translate-y-0', 'pointer-events-auto', 'bottom-20');
    }

    closeAuthPanel() {
      if (!this.authPanel) return;

      this.authPanel.classList.remove('translate-y-0', 'pointer-events-auto', 'bottom-20');
      this.authPanel.classList.add('translate-y-full', 'pointer-events-none', '-bottom-20');
    }

    updateAuthPanelContent() {
      const content = document.getElementById('auth-panel-content');
      if (!content) return;

      if (this.authState && this.authState.user) {
        content.innerHTML = this.getAuthenticatedPanelHTML();
      } else {
        content.innerHTML = this.getUnauthenticatedPanelHTML();
      }

      // Setup panel event listeners
      this.setupPanelEventListeners();
    }

    getAuthenticatedPanelHTML() {
      const user = this.authState.user;
      const displayName = user.profile?.display_name ||
                         `${user.profile?.first_name || ''} ${user.profile?.last_name || ''}`.trim() ||
                         user.username ||
                         user.email.split('@')[0];
      const avatar = displayName[0]?.toUpperCase() || '?';

      return `
        <div class="space-y-6">
          <!-- User Info Header -->
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-medium text-lg">
                ${avatar}
              </div>
              <div>
                <div class="text-white font-semibold text-lg">
                  ${displayName}
                </div>
                <div class="text-white/60 text-sm">
                  ${user.email}
                </div>
              </div>
            </div>

            <button
              class="glass-button p-2 text-white/80 hover:text-white"
              aria-label="Close user panel"
              data-action="close-panel"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <!-- Quick Actions -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <a
              href="/dashboard"
              class="glass-button p-4 text-center hover:bg-white/10 transition-colors group"
              data-action="close-panel"
            >
              <svg class="w-6 h-6 mx-auto mb-2 text-blue-400 group-hover:text-blue-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
              <div class="text-white text-sm font-medium">Dashboard</div>
            </a>

            <a
              href="/jobs"
              class="glass-button p-4 text-center hover:bg-white/10 transition-colors group"
              data-action="close-panel"
            >
              <svg class="w-6 h-6 mx-auto mb-2 text-green-400 group-hover:text-green-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012 2v2M7 7h10" />
              </svg>
              <div class="text-white text-sm font-medium">Job History</div>
            </a>

            <a
              href="/profile"
              class="glass-button p-4 text-center hover:bg-white/10 transition-colors group"
              data-action="close-panel"
            >
              <svg class="w-6 h-6 mx-auto mb-2 text-purple-400 group-hover:text-purple-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <div class="text-white text-sm font-medium">Profile</div>
            </a>

            <button
              class="glass-button p-4 text-center hover:bg-red-500/10 transition-colors group"
              data-action="logout"
            >
              <svg class="w-6 h-6 mx-auto mb-2 text-red-400 group-hover:text-red-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              <div class="text-white text-sm font-medium">Sign Out</div>
            </button>
          </div>
        </div>
      `;
    }

    getUnauthenticatedPanelHTML() {
      const oauthSection = this.oauthProviders.length > 0 ? `
        <div class="border-t border-white/10 pt-4">
          <p class="text-white/60 text-sm text-center mb-3">Or continue with:</p>
          <div class="flex gap-2 justify-center">
            ${this.oauthProviders.map(provider => `
              <button
                class="glass-button px-4 py-2 flex items-center gap-2 text-sm font-medium transition-colors ${this.getOAuthButtonClass(provider.name)}"
                data-action="oauth-login"
                data-provider="${provider.name}"
              >
                ${this.getOAuthIcon(provider.name)}
                <span class="capitalize">${provider.display_name || provider.name}</span>
              </button>
            `).join('')}
          </div>
        </div>
      ` : '';

      return `
        <div class="space-y-6">
          <!-- Header -->
          <div class="flex items-center justify-between">
            <div>
              <h2 class="text-2xl font-bold text-white">Welcome!</h2>
              <p class="text-white/60">Sign in to start converting your WordPress content</p>
            </div>

            <button
              class="glass-button p-2 text-white/80 hover:text-white"
              aria-label="Close auth panel"
              data-action="close-panel"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <!-- Auth Options -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              class="glass-button p-6 text-center hover:bg-white/10 transition-colors group"
              data-action="show-auth-modal"
              data-mode="login"
            >
              <svg class="w-8 h-8 mx-auto mb-3 text-blue-400 group-hover:text-blue-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              <div class="text-white text-lg font-medium mb-2">Sign In</div>
              <div class="text-white/60 text-sm">Access your existing account</div>
            </button>

            <button
              class="glass-button p-6 text-center hover:bg-white/10 transition-colors group"
              data-action="show-auth-modal"
              data-mode="register"
            >
              <svg class="w-8 h-8 mx-auto mb-3 text-green-400 group-hover:text-green-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
              </svg>
              <div class="text-white text-lg font-medium mb-2">Create Account</div>
              <div class="text-white/60 text-sm">Get started with a new account</div>
            </button>
          </div>

          ${oauthSection}

          <!-- Features Preview -->
          <div class="border-t border-white/10 pt-4">
            <p class="text-white/60 text-sm text-center mb-3">What you'll get:</p>
            <div class="flex flex-wrap justify-center gap-4 text-xs">
              <span class="px-2 py-1 bg-blue-500/20 text-blue-300 rounded-full">WordPress Conversion</span>
              <span class="px-2 py-1 bg-green-500/20 text-green-300 rounded-full">Batch Processing</span>
              <span class="px-2 py-1 bg-purple-500/20 text-purple-300 rounded-full">Job History</span>
              <span class="px-2 py-1 bg-orange-500/20 text-orange-300 rounded-full">Real-time Progress</span>
            </div>
          </div>
        </div>
      `;
    }

    getOAuthButtonClass(provider: string) {
      const classes = {
        google: 'text-red-300 hover:text-red-200 hover:bg-red-500/20',
        github: 'text-gray-300 hover:text-gray-200 hover:bg-gray-500/20',
        microsoft: 'text-blue-300 hover:text-blue-200 hover:bg-blue-500/20'
      };
      return (classes as any)[provider] || 'text-white/80 hover:text-white hover:bg-white/10';
    }

    getOAuthIcon(provider: string) {
      const icons = {
        google: `<svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
          <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>`,
        github: `<svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
        </svg>`,
        microsoft: `<svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
          <path d="M0 0h11v11H0V0zm13 0h11v11H13V0zM0 13h11v11H0V13zm13 0h11v11H13V13z"/>
        </svg>`
      };
      return (icons as any)[provider] || '';
    }

    setupPanelEventListeners() {
      // Close panel button
      const closeBtn = document.querySelector('[data-action="close-panel"]');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.closeAuthPanel());
      }

      // Logout button
      const logoutBtn = document.querySelector('[data-action="logout"]');
      if (logoutBtn) {
        logoutBtn.addEventListener('click', () => this.handleLogout());
      }

      // Auth modal buttons
      document.querySelectorAll('[data-action="show-auth-modal"]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const mode = (target.closest('[data-mode]') as HTMLElement)?.dataset.mode || 'login';
          this.showAuthModal(mode);
        });
      });

      // OAuth buttons
      document.querySelectorAll('[data-action="oauth-login"]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const provider = (target.closest('[data-provider]') as HTMLElement)?.dataset.provider;
          if (provider) {
            this.handleOAuthLogin(provider);
          }
        });
      });

      // Links that should close the panel
      document.querySelectorAll('[data-action="close-panel"]').forEach(link => {
        if (link.tagName === 'A') {
          link.addEventListener('click', () => this.closeAuthPanel());
        }
      });
    }

    async handleLogout() {
      try {
        const response = await fetch('/api/auth/logout', {
          method: 'POST',
          credentials: 'include'
        });

        if (response.ok) {
          this.authState = null;
          this.closeAuthPanel();
          this.updateAuthUI();
          window.location.reload(); // Refresh to clear any cached state
        }
      } catch (error) {
        console.error('Logout failed:', error);
      }
    }

    showAuthModal(mode = 'login') {
      this.closeAuthPanel();
      window.dispatchEvent(new CustomEvent('show-auth-modal', {
        detail: { mode }
      }));
    }

    async handleOAuthLogin(provider: string) {
      try {
        // Redirect to OAuth provider
        window.location.href = `/api/auth/oauth/${provider}/login`;
      } catch (error) {
        console.error('OAuth login failed:', error);
      }
    }

    // Public method to refresh auth state
    async refreshAuthState() {
      await this.loadAuthState();
      this.updateAuthUI();
    }
  }

  // Initialize the header
  const header = new AuthenticatedHeader();

  // Listen for auth state changes
  window.addEventListener('auth-state-changed', () => {
    header.refreshAuthState();
  });

  // Expose for debugging and external access
  if (typeof window !== 'undefined') {
    window.authenticatedHeader = header;
  }
</script>

<style>
  /* Loading animation */
  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Glass button styles */
  .glass-button {
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 0.5rem;
    transition: all 0.2s ease;
  }

  .glass-button:hover {
    background: rgba(255, 255, 255, 0.15);
    border-color: rgba(255, 255, 255, 0.3);
  }

  /* Liquid glass styles */
  .liquid-glass {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .rounded-glass {
    border-radius: 1rem;
  }

  /* Smooth transitions for panels */
  .transition-transform {
    transition-property: transform;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .grid-cols-2.md\\:grid-cols-4 {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media (max-width: 640px) {
    .grid-cols-1.md\\:grid-cols-2 {
      grid-template-columns: 1fr;
    }
  }
</style>
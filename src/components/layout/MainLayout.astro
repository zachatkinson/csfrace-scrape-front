---
/**
 * MainLayout - Core layout with Liquid Glass design system
 * Implements environmental adaptation and Apple's design principles
 */

// Import global styles (includes Tailwind + Liquid Glass)
import '../../styles/globals.css';
import { getApiBaseUrl } from '../../constants/api.ts';
import { TIMING_CONSTANTS } from '../../constants/timing.ts';
// Simple static layout - no complex React imports needed

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "WordPress to Shopify content converter with ultra-modern Liquid Glass UI" } = Astro.props;
---

<!doctype html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    
    <!-- Apple-inspired meta tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="theme-color" content="#000000" />
    
    <!-- Liquid Glass optimized fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link 
      href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" 
      rel="stylesheet" 
    />
    
    <title>{title}</title>
    
    <style>
      /* Liquid Glass optimized body styles */
      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: url('/scrape_bg.jpg') center center/cover no-repeat fixed;
        min-height: 100vh;
        position: relative;
      }
      
      /* Add moderate overlay for glass contrast - middle ground */
      body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.58);
        pointer-events: none;
        z-index: -1;
      }
      
      /* Accessibility: High contrast mode adjustments */
      @media (prefers-contrast: high) {
        body {
          background: #000;
        }
        body::before {
          background: rgba(0, 0, 0, 0.5);
        }
      }
    </style>
    
    <!-- Global Configuration -->
    <script define:vars={{apiBaseUrl: getApiBaseUrl(), timingConstants: TIMING_CONSTANTS}}>
      // Make API base URL and timing constants available globally for client-side JavaScript
      window.CSFRACE_API_BASE_URL = apiBaseUrl;
      window.CSFRACE_TIMING = timingConstants;
    </script>
  </head>
  
  <body class="h-full overflow-x-hidden">
    <!-- Static Header (always visible immediately) -->
    <header class="fixed top-0 left-0 right-0 z-50">
      <nav class="bg-black/90 backdrop-blur-lg border-b border-white/10 py-4">
        <div class="max-w-7xl mx-auto px-8 flex items-center justify-between">
          <!-- Logo/Brand -->
          <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gradient-to-r from-blue-400 to-purple-500 rounded-lg flex items-center justify-center">
              <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
              </svg>
            </div>
            <span class="text-white font-semibold text-lg">CSFrace Scrape</span>
          </div>
          
          <!-- Navigation Links -->
          <div class="hidden md:flex items-center space-x-6">
            <a href="/" class="text-white/80 hover:text-white transition-colors">Converter</a>
            <a href="/dashboard" class="text-white/80 hover:text-white transition-colors">Jobs</a>
          </div>
          
          <!-- User Actions (Static + Dynamic) -->
          <div class="flex items-center space-x-3">
            <!-- Settings Button (Static) -->
            <button 
              id="settings-toggle" 
              class="glass-button p-2 text-white/80 hover:text-white transition-all duration-200 relative"
              aria-label="Open Settings"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </button>

            <!-- Sign In Button -->
            <button id="auth-toggle" class="glass-button px-4 py-2 text-blue-400 hover:text-blue-300 border border-blue-500/30 hover:border-blue-500/50 transition-all duration-200 flex items-center space-x-2" aria-label="Sign In">
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              <span>Sign In</span>
            </button>
          </div>
        </div>
      </nav>
    </header>

    <!-- Settings Panel - Slides down from top -->
    <div 
      id="settings-panel" 
      class="fixed -top-20 left-0 right-0 z-40 transform -translate-y-full transition-transform duration-300 ease-out pointer-events-none"
    >
      <div class="max-w-4xl mx-auto px-8 py-6">
        <div class="glass-card p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-white">Settings</h2>
            <button 
              id="settings-close" 
              class="glass-button p-2 text-white/80 hover:text-white"
              aria-label="Close Settings"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- API Configuration -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0" />
                </svg>
                API Configuration
              </h3>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Backend URL</label>
                <input 
                  id="api-url" 
                  type="url" 
                  class="glass-input w-full px-3 py-2" 
                  placeholder={getApiBaseUrl()}
                  value={getApiBaseUrl()}
                />
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Request Timeout (seconds)</label>
                <input 
                  id="api-timeout" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="5" max="300" 
                  value="30"
                />
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Auto-refresh Interval (seconds)</label>
                <input 
                  id="refresh-interval" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="5" max="300" 
                  value="10"
                />
              </div>
            </div>
            
            <!-- Job Defaults -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                </svg>
                Job Defaults
              </h3>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Default Priority</label>
                <select id="default-priority" class="glass-input w-full px-3 py-2">
                  <option value="low">Low</option>
                  <option value="normal" selected>Normal</option>
                  <option value="high">High</option>
                  <option value="urgent">Urgent</option>
                </select>
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Max Retries</label>
                <input 
                  id="max-retries" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="0" max="10" 
                  value="3"
                />
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Job Timeout (seconds)</label>
                <input 
                  id="job-timeout" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="10" max="3600" 
                  value="30"
                />
              </div>
            </div>
            
            <!-- Display Options -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
                Display Options
              </h3>
              
              <div class="checkbox-container">
                <input 
                  id="dark-mode" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="dark-mode" class="text-white/70">Dark Mode</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="show-job-ids" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="show-job-ids" class="text-white/70">Show Job IDs</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="compact-mode" 
                  type="checkbox" 
                  class="glass-checkbox"
                />
                <label for="compact-mode" class="text-white/70">Compact Mode</label>
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Jobs Per Page</label>
                <select id="jobs-per-page" class="glass-input w-full px-3 py-2">
                  <option value="5">5</option>
                  <option value="10" selected>10</option>
                  <option value="25">25</option>
                  <option value="50">50</option>
                </select>
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Timezone</label>
                <select id="timezone" class="glass-input w-full px-3 py-2">
                  <option value="auto" selected>Auto-detect</option>
                  <optgroup label="North America">
                    <option value="America/New_York">Eastern Time</option>
                    <option value="America/Chicago">Central Time</option>
                    <option value="America/Denver">Mountain Time</option>
                    <option value="America/Los_Angeles">Pacific Time</option>
                    <option value="America/Anchorage">Alaska Time</option>
                    <option value="Pacific/Honolulu">Hawaii Time</option>
                  </optgroup>
                  <optgroup label="Europe">
                    <option value="Europe/London">London (GMT)</option>
                    <option value="Europe/Paris">Central European Time</option>
                    <option value="Europe/Berlin">Berlin</option>
                    <option value="Europe/Rome">Rome</option>
                    <option value="Europe/Madrid">Madrid</option>
                    <option value="Europe/Amsterdam">Amsterdam</option>
                  </optgroup>
                  <optgroup label="Asia">
                    <option value="Asia/Tokyo">Tokyo</option>
                    <option value="Asia/Shanghai">Shanghai</option>
                    <option value="Asia/Hong_Kong">Hong Kong</option>
                    <option value="Asia/Singapore">Singapore</option>
                    <option value="Asia/Dubai">Dubai</option>
                    <option value="Asia/Kolkata">India Standard Time</option>
                  </optgroup>
                  <optgroup label="Australia">
                    <option value="Australia/Sydney">Sydney</option>
                    <option value="Australia/Melbourne">Melbourne</option>
                    <option value="Australia/Perth">Perth</option>
                  </optgroup>
                  <optgroup label="Other">
                    <option value="UTC">UTC</option>
                    <option value="America/Sao_Paulo">São Paulo</option>
                    <option value="Africa/Cairo">Cairo</option>
                    <option value="Africa/Johannesburg">Johannesburg</option>
                  </optgroup>
                </select>
              </div>
            </div>
            
            <!-- Notifications -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4 12v8a1 1 0 001 1h9m-9-9V5a1 1 0 011-1h7l5 5v7m-9-9h4l5 5v7" />
                </svg>
                Notifications
              </h3>
              
              <div class="checkbox-container">
                <input 
                  id="completion-alerts" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="completion-alerts" class="text-white/70">Completion Alerts</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="error-notifications" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="error-notifications" class="text-white/70">Error Notifications</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="browser-notifications" 
                  type="checkbox" 
                  class="glass-checkbox"
                />
                <label for="browser-notifications" class="text-white/70">Browser Notifications</label>
              </div>
            </div>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex justify-between items-center mt-8 pt-6 border-t border-white/10">
            <button
              id="reset-settings"
              class="glass-button px-4 py-2 text-red-300 hover:text-red-200 text-sm"
            >
              Reset to Defaults
            </button>
            
            <div class="space-x-3">
              <button
                id="cancel-settings"
                class="glass-button px-6 py-2 text-white/60 hover:text-white"
              >
                Cancel
              </button>
              <button
                id="save-settings"
                class="glass-button px-6 py-2 bg-blue-500/20 text-blue-300 hover:text-blue-200 hover:bg-blue-500/30"
              >
                Save Settings
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Auth Panel - Slides up from bottom (opposite of settings) -->
    <div 
      id="auth-panel" 
      class="fixed -bottom-20 left-0 right-0 z-40 transform translate-y-full transition-transform duration-300 ease-out pointer-events-none"
    >
      <div class="max-w-4xl mx-auto px-8 py-6">
        <div class="glass-card p-6 border border-white/20">
          <!-- Close Button -->
          <button 
            id="auth-close"
            class="absolute top-4 right-4 glass-button p-2 text-white/60 hover:text-white"
            aria-label="Close"
          >
            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>

          <!-- Welcome Section -->
          <div class="text-center mb-6">
            <h2 class="text-3xl font-bold text-white mb-3">Welcome to CSFrace Scrape!</h2>
            <p class="text-white/70 text-lg">Access powerful WordPress to Shopify conversion tools</p>
          </div>

          <!-- Auth Options Grid -->
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
            <button
              id="sign-in-btn"
              class="glass-button p-6 text-center hover:bg-white/10 transition-colors group"
            >
              <svg class="w-8 h-8 mx-auto mb-3 text-blue-400 group-hover:text-blue-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
              <div class="text-white text-lg font-medium mb-2">Sign In</div>
              <div class="text-white/60 text-sm">Access your existing account</div>
            </button>
            
            <button
              id="register-btn"
              class="glass-button p-6 text-center hover:bg-white/10 transition-colors group"
            >
              <svg class="w-8 h-8 mx-auto mb-3 text-green-400 group-hover:text-green-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
              </svg>
              <div class="text-white text-lg font-medium mb-2">Create Account</div>
              <div class="text-white/60 text-sm">Get started with a new account</div>
            </button>
          </div>

          <!-- OAuth Providers -->
          <div class="border-t border-white/10 pt-4">
            <p class="text-white/60 text-sm text-center mb-3">Or continue with:</p>
            <div class="flex gap-2 justify-center">
              <button class="glass-button px-4 py-2 flex items-center gap-2 text-sm font-medium text-red-300 hover:text-red-200 hover:bg-red-500/20 transition-colors">
                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                  <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                  <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                  <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                </svg>
                Google
              </button>
              <button class="glass-button px-4 py-2 flex items-center gap-2 text-sm font-medium text-gray-300 hover:text-gray-200 hover:bg-gray-500/20 transition-colors">
                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
                GitHub
              </button>
              <button class="glass-button px-4 py-2 flex items-center gap-2 text-sm font-medium text-blue-300 hover:text-blue-200 hover:bg-blue-500/20 transition-colors">
                <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M0 0h11v11H0V0zm13 0h11v11H13V0zM0 13h11v11H0V13zm13 0h11v11H13V13z"/>
                </svg>
                Microsoft
              </button>
            </div>
          </div>

          <!-- Features Preview -->
          <div class="border-t border-white/10 pt-4 mt-4">
            <p class="text-white/60 text-sm text-center mb-3">What you'll get:</p>
            <div class="flex flex-wrap justify-center gap-4 text-xs">
              <span class="px-2 py-1 bg-blue-500/20 text-blue-300 rounded-full">WordPress Conversion</span>
              <span class="px-2 py-1 bg-green-500/20 text-green-300 rounded-full">Batch Processing</span>
              <span class="px-2 py-1 bg-purple-500/20 text-purple-300 rounded-full">Job History</span>
              <span class="px-2 py-1 bg-orange-500/20 text-orange-300 rounded-full">Real-time Progress</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Main Content Area with proper semantic structure -->
    <main class="pt-20 pb-8 min-h-screen">
        <div class="max-w-7xl mx-auto px-8">
        <slot />
      </div>
    </main>
    
    <!-- Footer -->
    <footer class="bg-black/90 backdrop-blur-lg border-t border-white/10 mt-16">
      <div class="max-w-7xl mx-auto px-8 py-8">
        <div class="flex flex-col lg:flex-row lg:justify-between lg:items-start space-y-8 lg:space-y-0">
          
          <!-- Left Side: Service Status Panel -->
          <div class="lg:flex-1">
            <h3 class="text-white/90 font-semibold mb-4 text-sm uppercase tracking-wider">System Status</h3>
            <div class="space-y-3">
              
              <!-- Frontend Service -->
              <div class="flex items-center space-x-3">
                <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                <span class="text-white/70 text-sm">Frontend (Astro)</span>
                <span class="text-green-400 text-xs font-mono">ONLINE</span>
              </div>
              
              <!-- Backend API Service -->
              <div id="backend-status" class="flex items-center space-x-3">
                <div class="w-3 h-3 bg-red-400 rounded-full"></div>
                <span class="text-white/70 text-sm">Backend API (FastAPI)</span>
                <span class="text-red-400 text-xs font-mono">OFFLINE</span>
              </div>
              
              <!-- Database Service -->
              <div id="database-status" class="flex items-center space-x-3">
                <div class="w-3 h-3 bg-yellow-400 rounded-full animate-pulse"></div>
                <span class="text-white/70 text-sm">Database (PostgreSQL)</span>
                <span class="text-yellow-400 text-xs font-mono">UNKNOWN</span>
              </div>
              
              <!-- Job Queue Service -->
              <div id="queue-status" class="flex items-center space-x-3">
                <div class="w-3 h-3 bg-gray-400 rounded-full"></div>
                <span class="text-white/70 text-sm">Job Queue (Redis)</span>
                <span class="text-gray-400 text-xs font-mono">IDLE</span>
              </div>
              
            </div>
          </div>
          
          <!-- Right Side: Creative Branding Attribution -->
          <div class="lg:text-right">
            <div class="flex lg:justify-end">
              <a href="https://creativebranding.io" target="_blank" rel="noopener noreferrer" 
                 class="inline-block transition-all duration-300 hover:scale-105 hover:brightness-110">
                <!-- Creative Branding Logo -->
                <img src="/cb-logo_mono.png" alt="Creative Branding" class="h-[140px] w-auto mx-auto opacity-90 hover:opacity-100 transition-opacity duration-300" />
              </a>
            </div>
          </div>
          
        </div>
        
        <!-- Bottom Bar -->
        <div class="mt-8 pt-6 border-t border-white/10 text-center">
          <p class="text-white/40 text-xs">
            © 2025 Creative Branding. Built with Astro, FastAPI, and modern web technologies.
          </p>
        </div>
      </div>
    </footer>
    
    <!-- Background Effects for Enhanced Glass Rendering -->
    <div class="fixed inset-0 pointer-events-none z-[-1]">
      <!-- Ambient light sources for glass reflection -->
      <div class="absolute top-1/4 left-1/4 w-96 h-96 bg-blue-400/20 rounded-full blur-3xl animate-pulse"></div>
      <div class="absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-400/20 rounded-full blur-3xl animate-pulse delay-1000"></div>
      <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-pink-400/10 rounded-full blur-3xl animate-pulse delay-2000"></div>
    </div>
    
    <!-- Auth Panel JavaScript -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const authToggle = document.getElementById('auth-toggle');
        const authClose = document.getElementById('auth-close');
        const authPanel = document.getElementById('auth-panel');
        
        // Auth panel state
        let isAuthOpen = false;
        
        // Open auth panel
        const openAuth = () => {
          if (!authPanel) return;
          authPanel.classList.remove('translate-y-full', 'pointer-events-none', '-bottom-20');
          authPanel.classList.add('translate-y-0', 'pointer-events-auto', 'bottom-0');
          isAuthOpen = true;
          
          // Add escape key handler
          document.addEventListener('keydown', handleEscapeKey);
        };
        
        // Close auth panel
        const closeAuth = () => {
          if (!authPanel) return;
          authPanel.classList.remove('translate-y-0', 'pointer-events-auto', 'bottom-0');
          authPanel.classList.add('translate-y-full', 'pointer-events-none', '-bottom-20');
          isAuthOpen = false;
          
          // Remove escape key handler
          document.removeEventListener('keydown', handleEscapeKey);
        };
        
        // Handle escape key
        const handleEscapeKey = (e: KeyboardEvent) => {
          if (e.key === 'Escape' && isAuthOpen) {
            closeAuth();
          }
        };
        
        // Event listeners
        authToggle?.addEventListener('click', () => {
          if (isAuthOpen) {
            closeAuth();
          } else {
            openAuth();
          }
        });
        
        authClose?.addEventListener('click', closeAuth);
        
        // Close on backdrop click
        authPanel?.addEventListener('click', (e) => {
          if (e.target === authPanel) {
            closeAuth();
          }
        });
        
        // OAuth button functionality (placeholder)
        document.querySelectorAll('[class*="hover:bg-red-500"], [class*="hover:bg-gray-500"], [class*="hover:bg-blue-500"]').forEach(btn => {
          btn.addEventListener('click', () => {
            alert('OAuth functionality will be connected to backend');
          });
        });
      });
    </script>

    <!-- Liquid Glass styles imported in frontmatter -->
    
    <!-- Health Status Service -->
    <script>
      // Health Status Service
      interface HealthStatus {
        service: string;
        status: 'up' | 'down' | 'degraded' | 'error';
        lastChecked: Date;
        error?: string;
        responseTime?: number;
      }

      interface ServiceIndicators {
        backend: {
          status: 'online' | 'offline';
          connected: boolean;
        };
        database: {
          status: 'online' | 'offline' | 'unknown';
          connected: boolean;
        };
        cache: {
          status: 'online' | 'offline' | 'unknown';
        };
      }


      class HealthStatusService {
        apiUrl: string;
        pollInterval: number;
        pollTimer: ReturnType<typeof setTimeout> | null;
        isPolling: boolean;
        cachedStatus: HealthStatus[];

        constructor() {
          this.apiUrl = window.CSFRACE_API_BASE_URL;
          this.pollInterval = window.CSFRACE_TIMING.MONITORING.HEALTH_CHECK_INTERVAL;
          this.pollTimer = null;
          this.isPolling = false;
          this.cachedStatus = [];
        }

        async checkHealth() {
          const now = new Date();
          try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), window.CSFRACE_TIMING.MONITORING.HEALTH_CHECK_TIMEOUT);
            
            const startTime = Date.now();
            const response = await fetch(`${this.apiUrl}/health/`, {
              method: 'GET',
              headers: { 'Content-Type': 'application/json' },
              signal: controller.signal
            });
            const responseTime = Date.now() - startTime;
            
            clearTimeout(timeoutId);

            if (response.ok) {
              const healthData = await response.json();
              
              // Update cache with proper HealthStatus objects
              this.cachedStatus = [
                {
                  service: 'backend',
                  status: 'up',
                  responseTime: responseTime,
                  lastChecked: now
                },
                {
                  service: 'database',
                  status: healthData.database?.status === 'up' ? 'up' : 'down',
                  lastChecked: now,
                  ...(healthData.database?.status !== 'up' && { error: 'Database connection failed' })
                },
                {
                  service: 'cache',
                  status: healthData.cache?.status === 'up' ? 'up' : healthData.cache?.status === 'not_configured' ? 'down' : 'error',
                  lastChecked: now,
                  ...(healthData.cache?.status === 'error' && { error: 'Cache connection failed' })
                }
              ];
              
              this.updateStatusIndicators({
                backend: { status: 'online', connected: true },
                database: healthData.database,
                cache: healthData.cache
              });
              
              return this.cachedStatus;
            } else {
              // Backend is running but returning error status
              this.cachedStatus = [
                {
                  service: 'backend',
                  status: 'error',
                  responseTime: responseTime,
                  lastChecked: now,
                  error: `HTTP ${response.status}: ${response.statusText}`
                },
                {
                  service: 'database',
                  status: 'error',
                  lastChecked: now,
                  error: 'Unable to check database status'
                },
                {
                  service: 'cache',
                  status: 'error',
                  lastChecked: now,
                  error: 'Unable to check cache status'
                }
              ];
              
              this.updateStatusIndicators({
                backend: { status: 'error', connected: false },
                database: { status: 'unknown', connected: false },
                cache: { status: 'unknown' }
              });
              
              return this.cachedStatus;
            }
          } catch (error) {
            // Backend is not reachable
            const now = new Date();
            this.cachedStatus = [
              {
                service: 'backend',
                status: 'down',
                lastChecked: now,
                error: (error as Error).message ?? 'Backend unreachable'
              },
              {
                service: 'database',
                status: 'down',
                lastChecked: now,
                error: 'Unable to check database status - backend offline'
              },
              {
                service: 'cache',
                status: 'down',
                lastChecked: now,
                error: 'Unable to check cache status - backend offline'
              }
            ];
            
            this.updateStatusIndicators({
              backend: { status: 'offline', connected: false },
              database: { status: 'unknown', connected: false },
              cache: { status: 'unknown' }
            });
            
            return this.cachedStatus;
          }
        }

        updateStatusIndicators(services: ServiceIndicators) {
          // Update Backend API status
          const backendEl = document.getElementById('backend-status');
          if (backendEl) {
            const indicator = backendEl.querySelector('.w-3') as HTMLElement;
            const statusText = backendEl.querySelector('.text-xs') as HTMLElement;
            
            if (indicator && statusText) {
              if (services.backend.status === 'online') {
                indicator.className = 'w-3 h-3 bg-green-400 rounded-full animate-pulse';
                statusText.textContent = 'ONLINE';
                statusText.className = 'text-green-400 text-xs font-mono';
              } else if (services.backend.status === 'error') {
                indicator.className = 'w-3 h-3 bg-yellow-400 rounded-full animate-pulse';
                statusText.textContent = 'ERROR';
                statusText.className = 'text-yellow-400 text-xs font-mono';
              } else {
                indicator.className = 'w-3 h-3 bg-red-400 rounded-full';
                statusText.textContent = 'OFFLINE';
                statusText.className = 'text-red-400 text-xs font-mono';
              }
            }
          }

          // Update Database status
          const databaseEl = document.getElementById('database-status');
          if (databaseEl && services.database) {
            const indicator = databaseEl.querySelector('.w-3') as HTMLElement;
            const statusText = databaseEl.querySelector('.text-xs') as HTMLElement;
            
            if (indicator && statusText) {
              if (services.database.status === 'healthy' && services.database.connected) {
                indicator.className = 'w-3 h-3 bg-green-400 rounded-full animate-pulse';
                statusText.textContent = 'ONLINE';
                statusText.className = 'text-green-400 text-xs font-mono';
              } else if (services.database.status === 'unhealthy') {
                indicator.className = 'w-3 h-3 bg-red-400 rounded-full';
                statusText.textContent = 'OFFLINE';
                statusText.className = 'text-red-400 text-xs font-mono';
              } else {
                indicator.className = 'w-3 h-3 bg-yellow-400 rounded-full animate-pulse';
                statusText.textContent = 'UNKNOWN';
                statusText.className = 'text-yellow-400 text-xs font-mono';
              }
            }
          }

          // Update Queue/Cache status (Redis)
          const queueEl = document.getElementById('queue-status');
          if (queueEl && services.cache) {
            const indicator = queueEl.querySelector('.w-3') as HTMLElement;
            const statusText = queueEl.querySelector('.text-xs') as HTMLElement;
            
            if (indicator && statusText) {
              if (services.cache.status === 'healthy') {
                indicator.className = 'w-3 h-3 bg-green-400 rounded-full animate-pulse';
                statusText.textContent = 'ONLINE';
                statusText.className = 'text-green-400 text-xs font-mono';
              } else if (services.cache.status === 'error') {
                indicator.className = 'w-3 h-3 bg-red-400 rounded-full';
                statusText.textContent = 'ERROR';
                statusText.className = 'text-red-400 text-xs font-mono';
              } else if (services.cache.status === 'not_configured') {
                indicator.className = 'w-3 h-3 bg-gray-400 rounded-full';
                statusText.textContent = 'DISABLED';
                statusText.className = 'text-gray-400 text-xs font-mono';
              } else {
                indicator.className = 'w-3 h-3 bg-yellow-400 rounded-full animate-pulse';
                statusText.textContent = 'UNKNOWN';
                statusText.className = 'text-yellow-400 text-xs font-mono';
              }
            }
          }
        }

        startPolling() {
          if (this.isPolling) return;
          
          this.isPolling = true;
          // Check immediately
          this.checkHealth();
          
          // Then poll every 30 seconds
          this.pollTimer = setInterval(() => {
            this.checkHealth();
          }, this.pollInterval);
        }

        stopPolling() {
          if (this.pollTimer) {
            clearInterval(this.pollTimer);
            this.pollTimer = null;
          }
          this.isPolling = false;
        }

        updateApiUrl(newUrl: string) {
          this.apiUrl = newUrl;
          if (this.isPolling) {
            this.checkHealth(); // Check immediately with new URL
          }
        }

        async checkStatus() {
          // Always perform fresh check and return Promise<HealthStatus[]>
          return await this.checkHealth();
        }

        getLatestStatus() {
          // Return cached status synchronously as HealthStatus[]
          return this.cachedStatus;
        }
      }

      // Initialize health status service
      declare global {
        interface Window {
          healthStatusService: HealthStatusService;
        }
      }
      window.healthStatusService = new HealthStatusService();
    </script>

    <!-- Settings Panel JavaScript -->
    <script>
      interface AppSettings {
        compactMode: boolean;
        apiUrl: string;
        refreshInterval: number;
        autoRefresh: boolean;
        enableNotifications: boolean;
        theme?: 'light' | 'dark' | 'auto';
      }

      document.addEventListener('DOMContentLoaded', () => {
        const settingsToggle = document.getElementById('settings-toggle');
        const settingsClose = document.getElementById('settings-close');
        const cancelSettings = document.getElementById('cancel-settings');
        const settingsPanel = document.getElementById('settings-panel');
        const saveSettings = document.getElementById('save-settings');
        const resetSettings = document.getElementById('reset-settings');
        
        // Settings state
        let isSettingsOpen = false;
        
        // Open settings panel
        const openSettings = () => {
          if (!settingsPanel) return;
          settingsPanel.classList.remove('-translate-y-full', 'pointer-events-none', '-top-20');
          settingsPanel.classList.add('translate-y-0', 'pointer-events-auto', 'top-20');
          isSettingsOpen = true;
          
          // Load current settings
          loadSettings();
          
          // Add escape key handler
          document.addEventListener('keydown', handleEscapeKey);
        };
        
        // Close settings panel
        const closeSettings = () => {
          if (!settingsPanel) return;
          settingsPanel.classList.remove('translate-y-0', 'pointer-events-auto', 'top-20');
          settingsPanel.classList.add('-translate-y-full', 'pointer-events-none', '-top-20');
          isSettingsOpen = false;
          
          // Remove escape key handler
          document.removeEventListener('keydown', handleEscapeKey);
        };
        
        // Handle escape key
        const handleEscapeKey = (e: KeyboardEvent) => {
          if (e.key === 'Escape' && isSettingsOpen) {
            closeSettings();
          }
        };
        
        // Load settings from localStorage
        const loadSettings = () => {
          const settings = getStoredSettings();
          
          // API Configuration
          const apiUrlEl = document.getElementById('api-url') as HTMLInputElement;
          if (apiUrlEl) apiUrlEl.value = settings.apiUrl;
          
          const apiTimeoutEl = document.getElementById('api-timeout') as HTMLInputElement;
          if (apiTimeoutEl) apiTimeoutEl.value = settings.apiTimeout;
          
          const refreshIntervalEl = document.getElementById('refresh-interval') as HTMLInputElement;
          if (refreshIntervalEl) refreshIntervalEl.value = settings.refreshInterval;
          
          // Job Defaults
          const defaultPriorityEl = document.getElementById('default-priority') as HTMLSelectElement;
          if (defaultPriorityEl) defaultPriorityEl.value = settings.defaultPriority;
          
          const maxRetriesEl = document.getElementById('max-retries') as HTMLInputElement;
          if (maxRetriesEl) maxRetriesEl.value = settings.maxRetries;
          
          const jobTimeoutEl = document.getElementById('job-timeout') as HTMLInputElement;
          if (jobTimeoutEl) jobTimeoutEl.value = settings.jobTimeout;
          
          // Display Options
          const darkModeEl = document.getElementById('dark-mode') as HTMLInputElement;
          if (darkModeEl) darkModeEl.checked = settings.darkMode;
          
          const showJobIdsEl = document.getElementById('show-job-ids') as HTMLInputElement;
          if (showJobIdsEl) showJobIdsEl.checked = settings.showJobIds;
          
          const compactModeEl = document.getElementById('compact-mode') as HTMLInputElement;
          if (compactModeEl) compactModeEl.checked = settings.compactMode;
          
          const jobsPerPageEl = document.getElementById('jobs-per-page') as HTMLSelectElement;
          if (jobsPerPageEl) jobsPerPageEl.value = settings.jobsPerPage;
          
          const timezoneEl = document.getElementById('timezone') as HTMLSelectElement;
          if (timezoneEl) timezoneEl.value = settings.timezone;
          
          // Notifications
          const completionAlertsEl = document.getElementById('completion-alerts') as HTMLInputElement;
          if (completionAlertsEl) completionAlertsEl.checked = settings.completionAlerts;
          
          const errorNotificationsEl = document.getElementById('error-notifications') as HTMLInputElement;
          if (errorNotificationsEl) errorNotificationsEl.checked = settings.errorNotifications;
          
          const browserNotificationsEl = document.getElementById('browser-notifications') as HTMLInputElement;
          if (browserNotificationsEl) browserNotificationsEl.checked = settings.browserNotifications;
        };
        
        // Save settings to localStorage
        const saveSettingsToStorage = () => {
          const settings = {
            // API Configuration
            apiUrl: (document.getElementById('api-url') as HTMLInputElement)?.value || '',
            apiTimeout: parseInt((document.getElementById('api-timeout') as HTMLInputElement)?.value || window.CSFRACE_TIMING.API.DEFAULT_TIMEOUT.toString()),
            refreshInterval: parseInt((document.getElementById('refresh-interval') as HTMLInputElement)?.value || window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL.toString()),
            
            // Job Defaults
            defaultPriority: (document.getElementById('default-priority') as HTMLSelectElement)?.value || 'normal',
            maxRetries: parseInt((document.getElementById('max-retries') as HTMLInputElement)?.value || window.CSFRACE_TIMING.API.RETRY_MAX_ATTEMPTS.toString()),
            jobTimeout: parseInt((document.getElementById('job-timeout') as HTMLInputElement)?.value || window.CSFRACE_TIMING.JOB.SINGLE_JOB_TIMEOUT.toString()),
            
            // Display Options
            darkMode: (document.getElementById('dark-mode') as HTMLInputElement)?.checked || false,
            showJobIds: (document.getElementById('show-job-ids') as HTMLInputElement)?.checked || false,
            compactMode: (document.getElementById('compact-mode') as HTMLInputElement)?.checked || false,
            jobsPerPage: parseInt((document.getElementById('jobs-per-page') as HTMLSelectElement)?.value || '10'),
            timezone: (document.getElementById('timezone') as HTMLSelectElement)?.value || 'UTC',
            
            // Notifications
            completionAlerts: (document.getElementById('completion-alerts') as HTMLInputElement)?.checked || false,
            errorNotifications: (document.getElementById('error-notifications') as HTMLInputElement)?.checked || false,
            browserNotifications: (document.getElementById('browser-notifications') as HTMLInputElement)?.checked || false
          };
          
          localStorage.setItem('csfrace-settings', JSON.stringify(settings));
          return settings;
        };
        
        // Get stored settings with defaults
        const getStoredSettings = () => {
          const defaults = {
            // API Configuration
            apiUrl: window.CSFRACE_API_BASE_URL,
            apiTimeout: window.CSFRACE_TIMING.API.DEFAULT_TIMEOUT / 1000, // Convert to seconds for UI
            refreshInterval: window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL / 1000, // Convert to seconds for UI
            
            // Job Defaults
            defaultPriority: 'normal',
            maxRetries: window.CSFRACE_TIMING.API.RETRY_MAX_ATTEMPTS,
            jobTimeout: window.CSFRACE_TIMING.JOB.SINGLE_JOB_TIMEOUT / 1000, // Convert to seconds for UI
            
            // Display Options
            darkMode: true,
            showJobIds: true,
            compactMode: false,
            jobsPerPage: 10,
            timezone: 'auto',
            
            // Notifications
            completionAlerts: true,
            errorNotifications: true,
            browserNotifications: false
          };
          
          try {
            const stored = localStorage.getItem('csfrace-settings');
            return stored ? { ...defaults, ...JSON.parse(stored) } : defaults;
          } catch {
            return defaults;
          }
        };
        
        // Reset to defaults
        const resetToDefaults = () => {
          if (confirm('Reset all settings to defaults? This cannot be undone.')) {
            localStorage.removeItem('csfrace-settings');
            loadSettings();
            
            // Show confirmation
            const button = document.getElementById('reset-settings') as HTMLButtonElement;
            if (button) {
              const originalText = button.textContent;
              button.textContent = 'Reset Complete!';
              button.style.color = '#10b981';
              
              setTimeout(() => {
                button.textContent = originalText;
                button.style.color = '';
              }, 2000);
            }
          }
        };
        
        // Apply settings (for immediate effects)
        const applySettings = (settings: AppSettings) => {
          // Apply theme changes
          document.body.classList.toggle('compact-mode', settings.compactMode);
          
          // Update API client if available
          if (window.apiClient) {
            window.apiClient.setBaseURL(settings.apiUrl);
          }
          
          // Update health service API URL
          if (window.healthStatusService) {
            window.healthStatusService.updateApiUrl(settings.apiUrl);
          }
          
          // Dispatch settings change event
          window.dispatchEvent(new CustomEvent('settingsChanged', { detail: settings }));
        };
        
        // Event listeners
        settingsToggle?.addEventListener('click', () => {
          // Toggle settings panel - close if open, open if closed
          if (isSettingsOpen) {
            closeSettings();
          } else {
            openSettings();
          }
        });
        settingsClose?.addEventListener('click', closeSettings);
        cancelSettings?.addEventListener('click', closeSettings);
        
        saveSettings?.addEventListener('click', () => {
          const settings = saveSettingsToStorage();
          applySettings(settings);
          
          // Show success feedback
          const button = document.getElementById('save-settings') as HTMLButtonElement;
          if (button) {
            const originalText = button.textContent;
            button.textContent = 'Settings Saved!';
            button.style.backgroundColor = 'rgba(16, 185, 129, 0.2)';
            
            setTimeout(() => {
              button.textContent = originalText;
              button.style.backgroundColor = '';
              closeSettings();
            }, 1500);
          }
        });
        
        resetSettings?.addEventListener('click', resetToDefaults);
        
        // Close on backdrop click
        settingsPanel?.addEventListener('click', (e) => {
          if (e.target === settingsPanel) {
            closeSettings();
          }
        });
        
        // Request notification permission if browser notifications are enabled
        document.getElementById('browser-notifications')?.addEventListener('change', (e) => {
          const target = e.target as HTMLInputElement;
          if (target && target.checked) {
            if ('Notification' in window && Notification.permission === 'default') {
              Notification.requestPermission().then(permission => {
                if (permission !== 'granted') {
                  target.checked = false;
                  alert('Browser notifications require permission to be granted.');
                }
              });
            }
          }
        });
        
        // Initialize settings on page load
        const initialSettings = getStoredSettings();
        applySettings(initialSettings);
        
        // Start health status monitoring
        if (window.healthStatusService) {
          window.healthStatusService.updateApiUrl(initialSettings.apiUrl);
          window.healthStatusService.startPolling();
        }
        
        // Make settings globally available
        window.getAppSettings = getStoredSettings;
        window.saveAppSettings = saveSettingsToStorage;
      });
    </script>

  </body>
</html>
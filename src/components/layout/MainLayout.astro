---
/**
 * MainLayout - Core layout with Liquid Glass design system
 * HYBRID APPROACH: Server Islands + React polling for real-time updates
 * Zero duplicate code - perfect architecture!
 */

// Import global styles (includes Tailwind + Liquid Glass)
import '../../styles/globals.css';
import { getApiBaseUrl } from '../../constants/api.ts';
import { TIMING_CONSTANTS } from '../../constants/timing.ts';
// Import DRY/SOLID Server Island component for health status
import CompactHealthStatus from '../health/CompactHealthStatus.astro';
// Import React component for real-time enhancements (client:idle)
import RealtimeHealthEnhancer from '../health/RealtimeHealthEnhancer.tsx';

export interface Props {
  title: string;
  description?: string;
  enableRealTimeUpdates?: boolean;
}

const { 
  title, 
  description = "WordPress to Shopify content converter with ultra-modern Liquid Glass UI",
  enableRealTimeUpdates = true 
} = Astro.props;
---

<!doctype html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Performance optimizations -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Preload critical background image -->
    <link rel="preload" as="image" href="/scrape_bg.jpg" type="image/jpeg">
  </head>
  
  <body class="h-full overflow-x-hidden">
    <div class="min-h-screen flex flex-col liquid-glass-layout">
      
      <!-- Header -->
      <header class="bg-black/40 backdrop-blur-lg border-b border-white/10 sticky top-0 z-50">
        <div class="max-w-7xl mx-auto px-8 py-6">
          <div class="flex items-center justify-between">
            <!-- Logo -->
            <div class="flex items-center space-x-4">
              <div class="w-10 h-10 bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg flex items-center justify-center">
                <span class="text-white font-bold text-lg">CS</span>
              </div>
              <div>
                <h1 class="text-2xl font-bold text-white">CSFrace Scrape</h1>
                <p class="text-white/60 text-sm">WordPress to Shopify Converter</p>
              </div>
            </div>
            
            <!-- Navigation & Settings -->
            <div class="flex items-center space-x-4">
              <!-- Navigation Links -->
              <nav class="hidden md:flex items-center space-x-6">
                <a href="/" class="text-white/70 hover:text-white transition-colors">Converter</a>
                <a href="/dashboard" class="text-white/70 hover:text-white transition-colors">Job Dashboard</a>
                <a href="/test-health" class="text-white/70 hover:text-white transition-colors">Health Status</a>
              </nav>
              
              <!-- Settings Button -->
              <button 
                id="settings-toggle"
                class="p-2 glass-button bg-white/10 hover:bg-white/20 rounded-lg transition-all duration-200"
                title="Application Settings"
              >
                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </button>

              <!-- Auth Button (Sign In) -->
              <button
                id="auth-toggle"
                class="glass-button px-4 py-2 text-blue-400 hover:text-blue-300 border border-blue-500/30 hover:border-blue-500/50 transition-all duration-200 flex items-center space-x-2"
                aria-label="Sign In"
              >
                <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                <span>Sign In</span>
              </button>
            </div>
          </div>
        </div>
      </header>

      <!-- Auth Panel - Slides up from bottom (opposite of settings) -->
      <div 
        id="auth-panel" 
        class="fixed -bottom-20 left-0 right-0 z-40 transform translate-y-full transition-transform duration-300 ease-out pointer-events-none"
      >
        <div class="max-w-4xl mx-auto px-8 py-6">
          <div class="glass-card p-6 border border-white/20">
            <!-- Close Button -->
            <button 
              id="auth-close"
              class="absolute top-4 right-4 glass-button p-2 text-white/60 hover:text-white"
              aria-label="Close"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>

            <!-- Welcome Section -->
            <div class="text-center mb-6">
              <h2 class="text-3xl font-bold text-white mb-3">Welcome to CSFrace Scrape!</h2>
              <p class="text-white/70 text-lg">Access powerful WordPress to Shopify conversion tools</p>
            </div>

            <!-- Auth Options Grid -->
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              <button
                id="sign-in-btn"
                class="glass-button p-6 text-center hover:bg-white/10 transition-colors group"
              >
                <svg class="w-8 h-8 mx-auto mb-3 text-blue-400 group-hover:text-blue-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
                <div class="text-white text-lg font-medium mb-2">Sign In</div>
                <div class="text-white/60 text-sm">Access your existing account</div>
              </button>
              
              <button
                id="register-btn"
                class="glass-button p-6 text-center hover:bg-white/10 transition-colors group"
              >
                <svg class="w-8 h-8 mx-auto mb-3 text-green-400 group-hover:text-green-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z" />
                </svg>
                <div class="text-white text-lg font-medium mb-2">Create Account</div>
                <div class="text-white/60 text-sm">Get started with a new account</div>
              </button>
            </div>

            <!-- OAuth Providers -->
            <div class="border-t border-white/10 pt-4">
              <p class="text-white/60 text-sm text-center mb-3">Or continue with:</p>
              <div class="flex gap-2 justify-center">
                <button class="glass-button px-4 py-2 flex items-center gap-2 text-sm font-medium text-red-300 hover:text-red-200 hover:bg-red-500/20 transition-colors">
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
                    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
                    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
                    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
                  </svg>
                  Google
                </button>
                <button class="glass-button px-4 py-2 flex items-center gap-2 text-sm font-medium text-gray-300 hover:text-gray-200 hover:bg-gray-500/20 transition-colors">
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                  </svg>
                  GitHub
                </button>
                <button class="glass-button px-4 py-2 flex items-center gap-2 text-sm font-medium text-blue-300 hover:text-blue-200 hover:bg-blue-500/20 transition-colors">
                  <svg class="w-4 h-4" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M0 0h11v11H0V0zm13 0h11v11H13V0zM0 13h11v11H0V13zm13 0h11v11H13V13z"/>
                  </svg>
                  Microsoft
                </button>
              </div>
            </div>

            <!-- Features Preview -->
            <div class="border-t border-white/10 pt-4 mt-4">
              <p class="text-white/60 text-sm text-center mb-3">What you'll get:</p>
              <div class="flex flex-wrap justify-center gap-4 text-xs">
                <span class="px-2 py-1 bg-blue-500/20 text-blue-300 rounded-full">WordPress Conversion</span>
                <span class="px-2 py-1 bg-green-500/20 text-green-300 rounded-full">Batch Processing</span>
                <span class="px-2 py-1 bg-purple-500/20 text-purple-300 rounded-full">Job History</span>
                <span class="px-2 py-1 bg-orange-500/20 text-orange-300 rounded-full">Real-time Progress</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <main class="flex-1 px-8 py-8">
        <slot />
      </main>

      <!-- Footer with Server Island Health Status -->
      <footer class="bg-black/90 backdrop-blur-lg border-t border-white/10 mt-16">
        <div class="max-w-7xl mx-auto px-8 py-8">
          <div class="flex flex-col lg:flex-row lg:justify-between lg:items-start space-y-8 lg:space-y-0">
            
            <!-- Left Side: System Status Panel - DRY/SOLID Server Island -->
            <div class="flex-shrink-0">
              <h3 class="text-white/90 font-semibold mb-4 text-sm uppercase tracking-wider">System Status</h3>
              
              <!-- Server Island for Real-time Health Status (DRY/SOLID) -->
              <div class="space-y-3">
                <!-- Fallback content while Server Island loads -->
                <div class="fallback-loading text-white/50 text-sm animate-pulse">
                  Loading system status...
                </div>
                
                <!-- Server Island: Uses shared service checkers - no duplicate logic -->
                <CompactHealthStatus server:defer />
              </div>
              
              <!-- Troubleshooting Link -->
              <div class="mt-4 pt-4 border-t border-white/10">
                <a 
                  href="/test-health" 
                  class="px-4 py-3 bg-gradient-to-r from-blue-500/80 to-purple-600/80 text-white hover:from-blue-600/90 hover:to-purple-700/90 transition-all duration-200 flex items-center space-x-2 rounded-lg border border-white/20 font-medium"
                  title="Advanced system diagnostics and troubleshooting"
                >
                  <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                  </svg>
                  <span>System Health Dashboard</span>
                </a>
              </div>
            </div>

            <!-- Right Side: Creative Branding Attribution -->
            <div class="lg:text-right">
              <div class="flex lg:justify-end">
                <a href="https://creativebranding.io" target="_blank" rel="noopener noreferrer" 
                   class="inline-block transition-all duration-300 hover:scale-105 hover:brightness-110">
                  <!-- Creative Branding Logo -->
                  <img src="/cb-logo_mono.png" alt="Creative Branding" class="h-[140px] w-auto mx-auto opacity-90 hover:opacity-100 transition-opacity duration-300" />
                </a>
              </div>
              
              <!-- Technical Details below logo -->
              <div class="mt-6 text-center lg:text-right">
                <h3 class="text-white/90 font-semibold mb-3 text-sm uppercase tracking-wider">Built With</h3>
                <div class="flex flex-wrap justify-center lg:justify-end gap-2 text-xs mb-4">
                  <span class="px-2 py-1 bg-blue-500/20 text-blue-300 rounded">Astro v5.13.5</span>
                  <span class="px-2 py-1 bg-purple-500/20 text-purple-300 rounded">FastAPI</span>
                  <span class="px-2 py-1 bg-green-500/20 text-green-300 rounded">Server Islands</span>
                </div>
                <ul class="text-white/60 text-sm space-y-1 text-center lg:text-right">
                  <li>✅ DRY/SOLID Principles</li>
                  <li>✅ Zero Code Duplication</li>
                  <li>✅ Real-time Health Monitoring</li>
                </ul>
              </div>
            </div>
          </div>
          
          <!-- Bottom Bar -->
          <div class="mt-8 pt-6 border-t border-white/10 text-center">
            <p class="text-white/40 text-xs">
              © 2025 Creative Branding. Built with Astro, FastAPI, and modern web technologies.
            </p>
          </div>
        </div>
      </footer>
    </div>

    <!-- Comprehensive Settings Panel - Slides down from top -->
    <div 
      id="settings-panel" 
      class="fixed -top-20 left-0 right-0 z-40 transform -translate-y-full transition-transform duration-300 ease-out pointer-events-none"
    >
      <div class="max-w-4xl mx-auto px-8 py-6">
        <div class="glass-card p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-white">⚙️ Application Settings</h2>
            <button 
              id="settings-close" 
              class="glass-button p-2 text-white/80 hover:text-white"
              aria-label="Close Settings"
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            <!-- API Configuration -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.111 16.404a5.5 5.5 0 017.778 0M12 20h.01m-7.08-7.071c3.904-3.905 10.236-3.905 14.141 0M1.394 9.393c5.857-5.857 15.355-5.857 21.213 0" />
                </svg>
                API Configuration
              </h3>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Backend URL</label>
                <input 
                  id="api-url" 
                  type="url" 
                  class="glass-input w-full px-3 py-2" 
                  placeholder="http://localhost:8000"
                  value="http://localhost:8000"
                />
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Request Timeout (seconds)</label>
                <input 
                  id="api-timeout" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="5" max="300" 
                  value="30"
                />
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Auto-refresh Interval (seconds)</label>
                <input 
                  id="refresh-interval" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="5" max="300" 
                  value="10"
                />
              </div>
            </div>
            
            <!-- Job Defaults -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                </svg>
                Job Defaults
              </h3>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Default Priority</label>
                <select id="default-priority" class="glass-input w-full px-3 py-2">
                  <option value="low">Low</option>
                  <option value="normal" selected>Normal</option>
                  <option value="high">High</option>
                  <option value="urgent">Urgent</option>
                </select>
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Max Retries</label>
                <input 
                  id="max-retries" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="0" max="10" 
                  value="3"
                />
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Job Timeout (seconds)</label>
                <input 
                  id="job-timeout" 
                  type="number" 
                  class="glass-input w-full px-3 py-2" 
                  min="10" max="3600" 
                  value="30"
                />
              </div>
            </div>
            
            <!-- Display Options -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                </svg>
                Display Options
              </h3>
              
              <div class="checkbox-container">
                <input 
                  id="dark-mode" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="dark-mode" class="text-white/70">Dark Mode</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="show-job-ids" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="show-job-ids" class="text-white/70">Show Job IDs</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="compact-mode" 
                  type="checkbox" 
                  class="glass-checkbox"
                />
                <label for="compact-mode" class="text-white/70">Compact Mode</label>
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Jobs Per Page</label>
                <select id="jobs-per-page" class="glass-input w-full px-3 py-2">
                  <option value="5">5</option>
                  <option value="10" selected>10</option>
                  <option value="25">25</option>
                  <option value="50">50</option>
                </select>
              </div>
              
              <div>
                <label class="block text-white/70 text-sm mb-2">Timezone</label>
                <select id="timezone" class="glass-input w-full px-3 py-2">
                  <option value="auto" selected>Auto-detect</option>
                  <optgroup label="North America">
                    <option value="America/New_York">Eastern Time</option>
                    <option value="America/Chicago">Central Time</option>
                    <option value="America/Denver">Mountain Time</option>
                    <option value="America/Los_Angeles">Pacific Time</option>
                    <option value="America/Anchorage">Alaska Time</option>
                    <option value="Pacific/Honolulu">Hawaii Time</option>
                  </optgroup>
                  <optgroup label="Europe">
                    <option value="Europe/London">London (GMT)</option>
                    <option value="Europe/Paris">Central European Time</option>
                    <option value="Europe/Berlin">Berlin</option>
                    <option value="Europe/Rome">Rome</option>
                    <option value="Europe/Madrid">Madrid</option>
                    <option value="Europe/Amsterdam">Amsterdam</option>
                  </optgroup>
                </select>
              </div>
            </div>
            
            <!-- Notifications -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-white mb-4 flex items-center">
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM12 9a3 3 0 110 6 3 3 0 010-6zm0 0a9 9 0 110 18 9 9 0 010-18z" />
                </svg>
                Notifications
              </h3>
              
              <div class="checkbox-container">
                <input 
                  id="completion-alerts" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="completion-alerts" class="text-white/70">Job Completion Alerts</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="error-notifications" 
                  type="checkbox" 
                  class="glass-checkbox" 
                  checked
                />
                <label for="error-notifications" class="text-white/70">Error Notifications</label>
              </div>
              
              <div class="checkbox-container">
                <input 
                  id="browser-notifications" 
                  type="checkbox" 
                  class="glass-checkbox"
                />
                <label for="browser-notifications" class="text-white/70">Browser Push Notifications</label>
              </div>
            </div>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex items-center justify-between mt-8 pt-6 border-t border-white/10">
            <button 
              id="reset-settings"
              class="glass-button px-4 py-2 text-orange-400 hover:text-orange-300 border border-orange-500/30 hover:border-orange-500/50 transition-all duration-200"
            >
              Reset to Defaults
            </button>
            
            <div class="flex items-center space-x-3">
              <button 
                id="cancel-settings"
                class="glass-button px-4 py-2 text-white/70 hover:text-white transition-colors"
              >
                Cancel
              </button>
              <button 
                id="save-settings"
                class="glass-button px-6 py-2 bg-blue-500/20 text-blue-300 hover:bg-blue-500/30 border border-blue-500/50 hover:border-blue-500/70 transition-all duration-200"
              >
                Save Settings
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Comprehensive Settings JavaScript (DRY/SOLID implementation) -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const settingsToggle = document.getElementById('settings-toggle');
        const settingsClose = document.getElementById('settings-close');
        const settingsPanel = document.getElementById('settings-panel');
        const cancelSettings = document.getElementById('cancel-settings');
        const saveSettings = document.getElementById('save-settings');
        const resetSettings = document.getElementById('reset-settings');
        
        let isSettingsOpen = false;
        
        // Open settings panel with slide-down animation
        const openSettings = () => {
          if (settingsPanel) {
            settingsPanel.style.pointerEvents = 'all';
            settingsPanel.classList.remove('-translate-y-full');
            settingsPanel.classList.add('translate-y-0');
            isSettingsOpen = true;
            loadSettings();
          }
        };
        
        // Close settings panel with slide-up animation
        const closeSettings = () => {
          if (settingsPanel) {
            settingsPanel.classList.remove('translate-y-0');
            settingsPanel.classList.add('-translate-y-full');
            setTimeout(() => {
              settingsPanel.style.pointerEvents = 'none';
            }, 300);
            isSettingsOpen = false;
          }
        };
        
        // Load settings from localStorage into form elements
        const loadSettings = () => {
          const settings = getStoredSettings();
          
          // API Configuration
          document.getElementById('api-url').value = settings.apiUrl;
          document.getElementById('api-timeout').value = settings.apiTimeout;
          document.getElementById('refresh-interval').value = settings.refreshInterval;
          
          // Job Defaults
          document.getElementById('default-priority').value = settings.defaultPriority;
          document.getElementById('max-retries').value = settings.maxRetries;
          document.getElementById('job-timeout').value = settings.jobTimeout;
          
          // Display Options
          document.getElementById('dark-mode').checked = settings.darkMode;
          document.getElementById('show-job-ids').checked = settings.showJobIds;
          document.getElementById('compact-mode').checked = settings.compactMode;
          document.getElementById('jobs-per-page').value = settings.jobsPerPage;
          document.getElementById('timezone').value = settings.timezone;
          
          // Notifications
          document.getElementById('completion-alerts').checked = settings.completionAlerts;
          document.getElementById('error-notifications').checked = settings.errorNotifications;
          document.getElementById('browser-notifications').checked = settings.browserNotifications;
        };
        
        // Save settings to localStorage
        const saveSettingsToStorage = () => {
          const settings = {
            // API Configuration
            apiUrl: document.getElementById('api-url').value,
            apiTimeout: parseInt(document.getElementById('api-timeout').value),
            refreshInterval: parseInt(document.getElementById('refresh-interval').value),
            
            // Job Defaults
            defaultPriority: document.getElementById('default-priority').value,
            maxRetries: parseInt(document.getElementById('max-retries').value),
            jobTimeout: parseInt(document.getElementById('job-timeout').value),
            
            // Display Options
            darkMode: document.getElementById('dark-mode').checked,
            showJobIds: document.getElementById('show-job-ids').checked,
            compactMode: document.getElementById('compact-mode').checked,
            jobsPerPage: parseInt(document.getElementById('jobs-per-page').value),
            timezone: document.getElementById('timezone').value,
            
            // Notifications
            completionAlerts: document.getElementById('completion-alerts').checked,
            errorNotifications: document.getElementById('error-notifications').checked,
            browserNotifications: document.getElementById('browser-notifications').checked
          };
          
          localStorage.setItem('csfrace-settings', JSON.stringify(settings));
          return settings;
        };
        
        // Get stored settings with defaults
        const getStoredSettings = () => {
          const defaults = {
            // API Configuration
            apiUrl: 'http://localhost:8000',
            apiTimeout: 30,
            refreshInterval: 10,
            
            // Job Defaults
            defaultPriority: 'normal',
            maxRetries: 3,
            jobTimeout: 30,
            
            // Display Options
            darkMode: true,
            showJobIds: true,
            compactMode: false,
            jobsPerPage: 10,
            timezone: 'auto',
            
            // Notifications
            completionAlerts: true,
            errorNotifications: true,
            browserNotifications: false
          };
          
          try {
            const stored = localStorage.getItem('csfrace-settings');
            return stored ? { ...defaults, ...JSON.parse(stored) } : defaults;
          } catch {
            return defaults;
          }
        };
        
        // Reset to defaults
        const resetToDefaults = () => {
          if (confirm('Reset all settings to defaults? This cannot be undone.')) {
            localStorage.removeItem('csfrace-settings');
            loadSettings();
            
            // Show confirmation
            const button = document.getElementById('reset-settings');
            if (button) {
              const originalText = button.textContent;
              button.textContent = 'Reset Complete!';
              button.style.color = '#10b981';
              
              setTimeout(() => {
                button.textContent = originalText;
                button.style.color = '';
              }, 2000);
            }
          }
        };
        
        // Apply settings (for immediate effects)
        const applySettings = (settings) => {
          // Apply theme changes
          document.body.classList.toggle('compact-mode', settings.compactMode);
          
          // Dispatch settings change event for other components
          window.dispatchEvent(new CustomEvent('settingsChanged', { detail: settings }));
        };
        
        // Event listeners
        settingsToggle?.addEventListener('click', () => {
          if (isSettingsOpen) {
            closeSettings();
          } else {
            openSettings();
          }
        });
        
        settingsClose?.addEventListener('click', closeSettings);
        cancelSettings?.addEventListener('click', closeSettings);
        
        saveSettings?.addEventListener('click', () => {
          const settings = saveSettingsToStorage();
          applySettings(settings);
          
          // Show success feedback
          const button = document.getElementById('save-settings');
          if (button) {
            const originalText = button.textContent;
            button.textContent = 'Settings Saved!';
            button.style.backgroundColor = 'rgba(16, 185, 129, 0.2)';
            
            setTimeout(() => {
              button.textContent = originalText;
              button.style.backgroundColor = '';
              closeSettings();
            }, 1500);
          }
        });
        
        resetSettings?.addEventListener('click', resetToDefaults);
        
        // Close on backdrop click
        settingsPanel?.addEventListener('click', (e) => {
          if (e.target === settingsPanel) {
            closeSettings();
          }
        });
        
        // Request notification permission if browser notifications are enabled
        document.getElementById('browser-notifications')?.addEventListener('change', (e) => {
          const target = e.target;
          if (target && target.checked) {
            if ('Notification' in window && Notification.permission === 'default') {
              Notification.requestPermission().then(permission => {
                if (permission !== 'granted') {
                  target.checked = false;
                  alert('Browser notifications require permission to be granted.');
                }
              });
            }
          }
        });
        
        // Initialize settings on page load
        const initialSettings = getStoredSettings();
        applySettings(initialSettings);
        
        // Make settings globally available
        window.getAppSettings = getStoredSettings;
        window.saveAppSettings = saveSettingsToStorage;

        console.log('🎯 Hybrid MainLayout loaded - Server Islands + React polling!');
        console.log('✅ Zero duplicate code - perfect DRY/SOLID architecture!');
      });
    </script>

    <!-- HYBRID ENHANCEMENT: React Island for Real-time Updates -->
    <!-- Following Astro best practice: client:idle for minimal impact -->
    {enableRealTimeUpdates && (
      <RealtimeHealthEnhancer client:idle />
    )}

    <!-- Responsive Background Image Styling (Modern 2025 Best Practices) -->
    <style>
      /* Liquid Glass optimized body styles with responsive background images */
      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        min-height: 100vh;
        position: relative;
      }
      
      /* Modern 2025: AVIF-first responsive background images */
      /* Mobile portrait - 50KB vs 1MB original (95% smaller!) */
      body {
        background: url('/scrape_bg_mobile.avif') center center/cover no-repeat fixed,
                    url('/scrape_bg_mobile.jpg') center center/cover no-repeat fixed;
      }
      
      /* Tablet screens - optimized aspect ratio */
      @media (min-width: 768px) {
        body {
          background: url('/scrape_bg_tablet.avif') center center/cover no-repeat fixed,
                      url('/scrape_bg_tablet.jpg') center center/cover no-repeat fixed;
        }
      }
      
      /* Desktop landscape - full resolution */  
      @media (min-width: 1024px) {
        body {
          background: url('/scrape_bg_desktop.avif') center center/cover no-repeat fixed,
                      url('/scrape_bg_desktop.jpg') center center/cover no-repeat fixed;
        }
      }
      
      /* Note: AVIF will load first if supported (all modern browsers 2025)
         JPEG acts as fallback for the 5% edge case */
      
      /* Glass overlay for optimal contrast */
      body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.4);
        z-index: -1;
        pointer-events: none;
      }
    </style>

    <!-- Modal and Panel JavaScript -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Auth Modal Controls
        const authToggle = document.getElementById('auth-toggle');
        const authPanel = document.getElementById('auth-panel');
        const authClose = document.getElementById('auth-close');
        
        // Settings Panel Controls  
        const settingsToggle = document.getElementById('settings-toggle');
        const settingsPanel = document.getElementById('settings-panel');
        const settingsClose = document.getElementById('settings-close');
        const cancelSettings = document.getElementById('cancel-settings');
        
        // Show Auth Modal
        if (authToggle && authPanel) {
          authToggle.addEventListener('click', () => {
            authPanel.style.pointerEvents = 'auto';
            authPanel.classList.remove('translate-y-full');
            authPanel.classList.add('translate-y-0');
          });
        }
        
        // Hide Auth Modal
        const closeAuthModal = () => {
          if (authPanel) {
            authPanel.classList.remove('translate-y-0');
            authPanel.classList.add('translate-y-full');
            setTimeout(() => {
              authPanel.style.pointerEvents = 'none';
            }, 300);
          }
        };
        
        if (authClose) authClose.addEventListener('click', closeAuthModal);
        
        // Show Settings Panel
        if (settingsToggle && settingsPanel) {
          settingsToggle.addEventListener('click', () => {
            settingsPanel.style.pointerEvents = 'auto';
            settingsPanel.classList.remove('-translate-y-full');
            settingsPanel.classList.add('translate-y-0');
          });
        }
        
        // Hide Settings Panel
        const closeSettingsPanel = () => {
          if (settingsPanel) {
            settingsPanel.classList.remove('translate-y-0');
            settingsPanel.classList.add('-translate-y-full');
            setTimeout(() => {
              settingsPanel.style.pointerEvents = 'none';
            }, 300);
          }
        };
        
        if (settingsClose) settingsClose.addEventListener('click', closeSettingsPanel);
        if (cancelSettings) cancelSettings.addEventListener('click', closeSettingsPanel);
        
        // Close modals on escape key
        document.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            closeAuthModal();
            closeSettingsPanel();
          }
        });
        
        // Close modals on backdrop click
        if (authPanel) {
          authPanel.addEventListener('click', (e) => {
            if (e.target === authPanel) {
              closeAuthModal();
            }
          });
        }
        
        if (settingsPanel) {
          settingsPanel.addEventListener('click', (e) => {
            if (e.target === settingsPanel) {
              closeSettingsPanel();
            }
          });
        }
        
        // Auth buttons functionality (placeholder for now)
        const signInBtn = document.getElementById('sign-in-btn');
        const registerBtn = document.getElementById('register-btn');
        
        if (signInBtn) {
          signInBtn.addEventListener('click', () => {
            console.log('Sign in clicked');
            // TODO: Implement actual sign in logic
            alert('Sign In functionality coming soon!');
          });
        }
        
        if (registerBtn) {
          registerBtn.addEventListener('click', () => {
            console.log('Register clicked');
            // TODO: Implement actual register logic
            alert('Registration functionality coming soon!');
          });
        }
        
        // OAuth buttons functionality (placeholder)
        document.addEventListener('click', (e) => {
          if (e.target.closest('button')?.textContent?.includes('Google')) {
            alert('Google OAuth coming soon!');
          } else if (e.target.closest('button')?.textContent?.includes('GitHub')) {
            alert('GitHub OAuth coming soon!');
          } else if (e.target.closest('button')?.textContent?.includes('Microsoft')) {
            alert('Microsoft OAuth coming soon!');
          }
        });
        
        // Settings functionality (placeholder)
        const saveSettings = document.getElementById('save-settings');
        const resetSettings = document.getElementById('reset-settings');
        
        if (saveSettings) {
          saveSettings.addEventListener('click', () => {
            console.log('Settings saved');
            alert('Settings saved successfully!');
            closeSettingsPanel();
          });
        }
        
        if (resetSettings) {
          resetSettings.addEventListener('click', () => {
            if (confirm('Reset all settings to defaults?')) {
              console.log('Settings reset');
              alert('Settings reset to defaults!');
              // TODO: Implement actual reset logic
            }
          });
        }
      });
    </script>
  </body>
</html>
---
import MainLayout from '../components/layout/MainLayout.astro';
import { getApiBaseUrl } from '../constants/api.ts';
import { TIMING_CONSTANTS } from '../constants/timing.ts';
// import JobItem from '../components/JobItem.astro'; // TODO: Will be used for jobs list
---

<MainLayout title="CSFrace Scrape - WordPress to Shopify Converter">
  <!-- Main Content Section -->
  <section class="text-center py-16">
    <!-- Desktop Grid Layout -->
    <div class="max-w-7xl mx-auto grid lg:grid-cols-2 gap-8 lg:gap-12 lg:items-start">
      
      <!-- Left Column: Upload Interface -->
      <div class="glass-card p-8 lg:h-fit">
        <!-- Content Container -->
        <div id="content-container" class="space-y-8">
          <div class="w-full max-w-2xl mx-auto mb-8">
            <h1 class="text-4xl md:text-6xl font-bold text-apple-white mb-6">
              WordPress to <span class="bg-gradient-to-r from-blue-400 via-purple-500 via-blue-400 to-purple-500 bg-clip-text text-transparent animated-gradient">Shopify</span>
            </h1>
            <p class="text-xl text-apple-white-80 mb-8 max-w-2xl mx-auto">
              Transform your WordPress content into Shopify-ready format with our ultra-modern, 
              AI-powered conversion tool featuring Apple's Liquid Glass design system.
            </p>
            
            <!-- Dynamic Time-Based Greeting -->
            <h2 id="greeting" class="text-2xl font-semibold text-white mb-6">
              What are we working on today?
            </h2>
            
            <!-- Apple-Style Segmented Control - Always Visible -->
            <div class="space-y-6">
              <div class="flex justify-center">
                <div class="liquid-glass-segmented-control p-1 inline-flex rounded-full bg-black/24 backdrop-blur-md border border-white/20">
                  <button id="bulk-upload-btn" class="segmented-option active px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
                    </svg>
                    Bulk Upload
                  </button>
                  <button id="single-post-btn" class="segmented-option px-6 py-3 rounded-full text-sm font-medium transition-all duration-200 flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                    Single Post
                  </button>
                </div>
              </div>
              
              <!-- Mode Description -->
              <div class="text-center max-w-md mx-auto">
                <p id="mode-description" class="text-white/70 text-sm">
                  Upload CSV or TXT files containing multiple WordPress URLs
                </p>
              </div>
            </div>
            
            <!-- Single Post Interface -->
            <div id="single-post-interface" class="space-y-4 mt-6 min-h-[200px] sm:min-h-[240px] md:min-h-[280px] lg:min-h-[300px] hidden">
              
              <div class="text-left">
                <label for="wordpress-url" class="block text-sm font-medium text-white/80 mb-2 cursor-pointer">
                  WordPress URL
                </label>
                <div class="flex items-center gap-3">
                  <svg class="w-5 h-5 text-white/50 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                  </svg>
                  <input 
                    id="wordpress-url"
                    type="url" 
                    placeholder="https://your-wordpress-site.com/post-url"
                    class="glass-input flex-1"
                  />
                </div>
              </div>
              
              <button id="convert-now-btn" class="glass-button liquid-glass-interactive w-full px-6 py-3 text-white font-medium bg-gradient-to-r from-blue-500/80 to-purple-600/80 hover:from-blue-600/90 hover:to-purple-700/90 transition-all duration-glass flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Convert Now
              </button>
            </div>
            
            <!-- Bulk Upload Interface (Hidden by default) -->
            <div id="bulk-upload-interface" class="space-y-4 mt-6 min-h-[200px] sm:min-h-[240px] md:min-h-[280px] lg:min-h-[300px]">
              
              <div class="text-left">
                <label class="block text-sm font-medium text-white/80 mb-2">
                  Upload CSV or TXT File
                </label>
                
                <!-- Drag and Drop Zone -->
                <div id="drop-zone" class="relative border-2 border-dashed border-white/30 rounded-xl p-8 text-center hover:border-white/50 transition-colors cursor-pointer bg-black/20 backdrop-blur-sm">
                  <input type="file" id="file-input" accept=".csv,.txt" class="absolute inset-0 w-full h-full opacity-0 cursor-pointer" />
                  
                  <svg class="w-12 h-12 mx-auto mb-4 text-white/50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                  
                  <p class="text-white/80 font-medium mb-2">Drop your file here or click to browse</p>
                  <p class="text-white/50 text-sm">Supports CSV and TXT files with one URL per line</p>
                  
                  <!-- File name display -->
                  <div id="file-name" class="hidden mt-4 p-3 bg-white/10 rounded-lg">
                    <p class="text-white/90 text-sm font-medium"></p>
                  </div>
                </div>
              </div>
              
              <button id="bulk-convert-btn" class="glass-button liquid-glass-interactive w-full px-6 py-3 text-white font-medium bg-gradient-to-r from-blue-500/80 to-purple-600/80 hover:from-blue-600/90 hover:to-purple-700/90 transition-all duration-glass flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                Convert All
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Right Column: Real-time Processing & Recent History -->
      <div class="glass-card p-6 lg:sticky lg:top-8 lg:flex lg:flex-col lg:h-[calc(100vh-8rem)]">
        <div class="text-center mb-8 lg:flex-shrink-0">
          <h2 class="text-4xl md:text-6xl font-bold text-white mb-4">Real-time <span class="bg-gradient-to-r from-blue-400 via-purple-500 via-blue-400 to-purple-500 bg-clip-text text-transparent animated-gradient">Processing</span> & Recent <span class="bg-gradient-to-r from-blue-400 via-purple-500 via-blue-400 to-purple-500 bg-clip-text text-transparent animated-gradient">History</span></h2>
          <p class="text-white/70">Monitor your conversion jobs with live updates</p>
        </div>
        
        <div class="flex flex-col flex-1 min-h-0">
          <!-- 1. ERRORS/WARNINGS (Top of stack, slides away when resolved) -->
          <div id="jobs-error" class="hidden transition-all duration-500 ease-out transform translate-x-0" style="transition-property: transform, opacity, max-height;">
            <!-- Enhanced error content will be populated by error-handling.ts -->
            <div id="enhanced-error-content">
              <h3 class="text-orange-400 font-medium mb-2">Connection issue</h3>
              <p class="text-white/60 text-sm mb-4">Unable to connect to the conversion service.</p>
              <button id="retry-load-jobs" class="glass-button px-4 py-2 text-sm text-orange-400/80 hover:text-orange-400 bg-orange-500/10 hover:bg-orange-500/20 transition-all duration-200 rounded-lg">
                Retry
              </button>
            </div>
            <!-- Divider between errors and jobs list -->
            <div class="border-t border-white/10 mt-4"></div>
          </div>
          
          <!-- 2. RECENT JOBS (Middle of stack, scrollable) -->
          <div id="jobs-container" class="lg:flex-1 lg:overflow-y-auto space-y-4 scrollbar-thin scrollbar-thumb-white/20 scrollbar-track-transparent pr-2 lg:min-h-0">
            <!-- Loading State -->
            <div id="jobs-loading" class="p-6 text-center">
              <div class="animate-spin rounded-full w-8 h-8 border-2 border-blue-400/30 border-t-blue-400 mx-auto mb-3"></div>
              <p class="text-white/60 text-sm">Loading recent jobs...</p>
            </div>
            
            <!-- Jobs will be dynamically inserted here -->
            <div id="jobs-list" class="space-y-4 hidden"></div>
            
            <!-- Empty State -->
            <div id="jobs-empty" class="p-4 text-center hidden">
              <div class="w-16 h-16 mx-auto mb-4 rounded-full bg-yellow-500/10 flex items-center justify-center">
                <svg class="w-8 h-8 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <h3 class="text-yellow-400 font-medium mb-2">No conversion jobs yet</h3>
              <p class="text-white/60 text-sm">Start your first WordPress to Shopify conversion using the form on the left!</p>
            </div>
            
          </div>
          
          <!-- 3. VIEW ALL JOBS BUTTON (Bottom of stack, always visible) -->
          <div class="border-t border-white/10 pt-4 mt-6 lg:flex-shrink-0 lg:mt-4">
            <a href="/dashboard" class="glass-button liquid-glass-interactive w-full px-4 py-3 text-white/90 hover:text-white font-medium bg-white/5 hover:bg-white/10 transition-all duration-200 flex items-center justify-center space-x-2">
              <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              <span>View All Jobs</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>
</MainLayout>

<script>
  // Client-side API configuration
  const API_BASE_URL = import.meta.env.PUBLIC_API_URL || import.meta.env.VITE_API_URL || 'http://localhost:8000';
  
  function getApiBaseUrl() {
    return API_BASE_URL;
  }

  // Job type definition for script context
  interface WordPressContent {
    title: string;
    content: string;
    excerpt?: string;
    featuredImage?: string;
    categories?: string[];
    tags?: string[];
    publishedAt?: string;
    author?: string;
    metadata?: Record<string, unknown>;
  }

  interface ShopifyContent {
    handle: string;
    title: string;
    bodyHtml: string;
    excerpt?: string;
    image?: {
      src: string;
      alt?: string;
    };
    tags: string[];
    publishedAt?: string;
    seo?: {
      title?: string;
      description?: string;
    };
    metadata?: Record<string, unknown>;
  }

  interface ConversionJob {
    id: string;
    url: string;
    status: 'pending' | 'validating' | 'scraping' | 'running' | 'completed' | 'error' | 'failed' | 'cancelled';
    progress: number;
    wordpressContent?: WordPressContent;
    shopifyContent?: ShopifyContent;
    convertedHtml?: string;
    extractedImages?: string[];
    error?: string;
    error_message?: string;
    error_type?: string;
    metadata?: {
      title?: string;
      type?: string;
      wordCount?: number;
      imageCount?: number;
      estimatedSize?: string;
      processingTime?: number;
    };
    createdAt?: Date;
    startedAt?: Date;
    completedAt?: Date;
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Time-based greeting (defaulting to user's local timezone, can be changed in settings later)
    // Timezone utilities
    const getTimezoneFromSettings = () => {
      try {
        const settings = JSON.parse(localStorage.getItem('csfrace-settings') || '{}');
        return settings.timezone || 'auto';
      } catch {
        return 'auto';
      }
    };

    const getUserTimezone = () => {
      const settingsTimezone = getTimezoneFromSettings();
      if (settingsTimezone === 'auto') {
        return Intl.DateTimeFormat().resolvedOptions().timeZone;
      }
      return settingsTimezone;
    };

    const getTimeInTimezone = (timezone) => {
      const now = new Date();
      if (timezone === 'auto') {
        return now;
      }
      
      try {
        // Create a new Date object in the specified timezone
        const formatter = new Intl.DateTimeFormat('en-US', {
          timeZone: timezone,
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
          hour12: false
        });
        
        const parts = formatter.formatToParts(now);
        const dateStr = `${parts.find(p => p.type === 'year').value}-${parts.find(p => p.type === 'month').value}-${parts.find(p => p.type === 'day').value}T${parts.find(p => p.type === 'hour').value}:${parts.find(p => p.type === 'minute').value}:${parts.find(p => p.type === 'second').value}`;
        
        return new Date(dateStr);
      } catch (error) {
        console.warn('Failed to get time in timezone:', timezone, error);
        return now;
      }
    };

    const getLocationFromTimezone = (timezone) => {
      if (timezone === 'auto') {
        timezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
      }
      
      const locations = {
        'America/New_York': 'New York',
        'America/Chicago': 'Chicago', 
        'America/Denver': 'Denver',
        'America/Los_Angeles': 'Los Angeles',
        'America/Anchorage': 'Alaska',
        'Pacific/Honolulu': 'Hawaii',
        'Europe/London': 'London',
        'Europe/Paris': 'Paris',
        'Europe/Berlin': 'Berlin',
        'Europe/Rome': 'Rome',
        'Europe/Madrid': 'Madrid',
        'Europe/Amsterdam': 'Amsterdam',
        'Asia/Tokyo': 'Tokyo',
        'Asia/Shanghai': 'Shanghai',
        'Asia/Hong_Kong': 'Hong Kong',
        'Asia/Singapore': 'Singapore',
        'Asia/Dubai': 'Dubai',
        'Asia/Kolkata': 'India',
        'Australia/Sydney': 'Sydney',
        'Australia/Melbourne': 'Melbourne',
        'Australia/Perth': 'Perth',
        'UTC': 'UTC',
        'America/Sao_Paulo': 'São Paulo',
        'Africa/Cairo': 'Cairo',
        'Africa/Johannesburg': 'Johannesburg'
      };
      
      return locations[timezone] || timezone.split('/')[1]?.replace('_', ' ') || 'your location';
    };

    const updateGreeting = () => {
      const userTimezone = getUserTimezone();
      const now = getTimeInTimezone(userTimezone);
      const hour = now.getHours();
      const location = getLocationFromTimezone(userTimezone);
      
      // Fun and friendly greeting arrays for different times of day
      const greetings = {
        earlyMorning: [ // 5-8 AM - 18 total (9 text + 9 emoji)
          // Text-only messages
          "What a beautiful morning for some WordPress conversion!",
          "Starting the day strong with content transformation!",
          "First light brings first conversions! What shall we build?",
          "Morning motivation is high! Let's tackle some sites together!",
          "The early hours are perfect for productivity! Ready to begin?",
          "A new day means new possibilities for amazing conversions!",
          "Morning clarity meets WordPress complexity! Let's solve it!",
          "Beginning the day with purpose and conversion power!",
          "Daybreak productivity session! What's first on our list?",
          // Emoji-integrated messages
          "🌅 and shine! Ready to convert some content?",
          "Early 🐦 gets the worm! What are we scraping today?",
          "Good morning, ☀️! Let's make some magic happen!",
          "Morning, 🏆! Time to tackle those WordPress sites!",
          "Hello there, early riser! What's on the 🗓️ agenda?",
          "Wakey wakey! ⏰ for some WordPress wizardry!",
          "Morning ⚡ activated! Let's convert something amazing!",
          "🌄 of a new day! What sites shall we transform?",
          "Fresh start, fresh conversions! Ready to 🎳?"
        ],
        lateMorning: [ // 8-12 PM - 18 total
          // Text-only messages
          "Mid-morning momentum building! What conversions await us?",
          "The morning workflow is in full swing! Ready to dive in?",
          "Peak morning hours for maximum conversion efficiency!",
          "Late morning brilliance! Time for some serious WordPress work!",
          "Morning caffeine meets conversion excellence! Let's go!",
          "Pre-noon productivity burst! Which sites need our attention?",
          "Morning routine complete, conversion mode activated!",
          "Late morning focus session! Ready for transformation magic?",
          "The morning sweet spot for WordPress wizardry begins now!",
          // Emoji-integrated messages
          "Good morning! Ready to turn WordPress into Shopify 🥇?",
          "Morning! ☕ in hand? Let's get converting!",
          "Hey there! Perfect ⏰ to start some content conversion!",
          "Good morning! What WordPress 💎 shall we discover?",
          "Morning 🎯 mode! Let's make some e-commerce magic happen!",
          "🔧 ready? Time for some morning WordPress magic!",
          "Morning productivity 📈! What are we converting today?",
          "🎨 morning session! Let's transform some content!",
          "Morning ⚡-up complete! Ready for conversion action?"
        ],
        midday: [ // 12-1 PM - 18 total
          // Text-only messages
          "Midday energy surge! Perfect time for WordPress transformation!",
          "Noon approach means peak performance! Ready to convert?",
          "The midday rush begins with serious conversion power!",
          "High noon productivity! Which sites shall we tackle first?",
          "Lunchtime planning meets conversion execution! Let's begin!",
          "Midday clarity brings focused WordPress solutions!",
          "Noon-time efficiency mode! Ready for rapid transformations?",
          "The lunch hour advantage! Time for strategic conversions!",
          "Midday momentum at its peak! What needs converting today?",
          // Emoji-integrated messages
          "Good afternoon! 🍕 break conversion session?",
          "Hey! Perfect timing for a quick content 🔄!",
          "Afternoon! Let's squeeze in some scraping before 🥪!",
          "Good afternoon! Ready for some midday WordPress 🪄?",
          "Hello! Time for a productive 🥗-hour conversion!",
          "Midday munchies? How about some content conversion 🌮?",
          "🍜 and scraping? Let's make it a productive lunch!",
          "🥙-sized conversions during your lunch break?",
          "⛽ up and convert! What's on the 🍽️ today?"
        ],
        afternoon: [ // 1-5 PM - 18 total
          // Text-only messages
          "Post-lunch productivity boost! Time for serious WordPress work!",
          "Afternoon excellence begins now! Ready for transformations?",
          "The afternoon stride is here! Which conversions call to us?",
          "Mid-afternoon mastery session! Let's build something incredible!",
          "Afternoon determination meets WordPress innovation! Let's go!",
          "The post-meal energy surge! Perfect for conversion challenges!",
          "Afternoon expertise hour! Ready to tackle complex sites?",
          "Late afternoon ambition! Time for premium conversions!",
          "The afternoon advantage! Let's maximize our conversion potential!",
          // Emoji-integrated messages
          "Good afternoon! Let's ⚡ through some conversions!",
          "Afternoon! The perfect ⏰ to transform some content!",
          "Hey there! Ready for an afternoon of WordPress ✨?",
          "Good afternoon! What 🌐 are we converting today?",
          "Afternoon 📊 time! Let's convert something amazing!",
          "📈 performance hours! Time for some serious conversions!",
          "Afternoon 🔥! Let's turn up the conversion intensity!",
          "💪 through the afternoon with epic transformations!",
          "Afternoon 🚀 sequence! Ready for content liftoff?"
        ],
        evening: [ // 5-9 PM - 18 total
          // Text-only messages
          "Evening workflow optimization! Ready for refined conversions?",
          "The day's final push begins! Time for quality transformations!",
          "Evening expertise meets WordPress challenges! Let's excel!",
          "Sunset productivity session! Ready for elegant conversions?",
          "End-of-day momentum building! Which projects need attention?",
          "Evening refinement hour! Time for polished transformations!",
          "The twilight conversion session begins! Ready to create?",
          "Evening dedication meets conversion perfection! Let's begin!",
          "Day's end brings focused energy! What shall we accomplish?",
          // Emoji-integrated messages
          "Good evening! 🌀 down with some content conversion?",
          "Evening! Perfect time to 🎁 up the day with some scraping!",
          "Hey there! Evening conversion 📅 coming up?",
          "Good evening! Let's finish 💪 with some WordPress magic!",
          "🌆! Time to convert those last few pieces of content!",
          "Evening 😌 with a side of content transformation?",
          "✨ hour conversions! Let's make something beautiful!",
          "Evening 🪄 time! What WordPress spells shall we cast?",
          "Evening 🎭! Time for the conversion show!"
        ],
        night: [ // 9 PM-12 AM - 18 total
          // Text-only messages
          "The night shift mentality kicks in! Ready for deep work?",
          "After-hours excellence begins! Time for focused conversions!",
          "Night mode productivity! Perfect for complex WordPress tasks!",
          "The evening dedication session! Ready for detailed work?",
          "Night owl energy activated! Which sites need our expertise?",
          "Late evening mastery hour! Time for precision conversions!",
          "The quiet hours bring clear thinking! Ready to transform?",
          "Night productivity peak! Perfect for challenging conversions!",
          "Evening solitude meets WordPress complexity! Let's solve it!",
          // Emoji-integrated messages
          "Good evening! Settling in for some 🌙 productivity?",
          "Evening winds down, but the conversions keep 🚶!",
          "Hey night 🦉! Ready for some after-dinner WordPress magic?",
          "⭐ time for conversion! What are we transforming tonight?",
          "Evening session activated! Let's make some content ✨!",
          "🌙 shift begins! Time for some stellar conversions!",
          "Evening 🔥! Let's keep the conversion momentum going!",
          "Night mode engaged! Ready for 🎯 conversions?",
          "⭐ conversion session! What's twinkling tonight?"
        ],
        lateNight: [ // 12 AM-5 AM - 18 total
          // Text-only messages
          "The midnight marathon begins! Ready for deep conversion work?",
          "Late night dedication meets WordPress mastery! Let's excel!",
          "The witching hour brings conversion inspiration! Ready to create?",
          "Midnight focus session! Perfect for complex transformations!",
          "The late night advantage! Time for undisturbed WordPress work!",
          "After midnight excellence! Ready for premium conversions?",
          "The small hours bring big opportunities! Let's seize them!",
          "Midnight persistence meets conversion artistry! Time to build!",
          "The late night grind pays off! Which sites need attention?",
          // Emoji-integrated messages
          "🔥 the midnight oil? Let's convert something awesome!",
          "Late night productivity session? We're here to 🆘!",
          "Night 🦉 at work! What are we converting in the moonlight?",
          "Working late? Let's make it count with some epic 🔄!",
          "Hey night ⚔️! Ready for some after-hours WordPress magic?",
          "🌛 conversion crew! What sites are we tackling?",
          "3️⃣ AM and still going strong! Let's transform some content!",
          "🔮 hour productivity! Time for some magical conversions!",
          "🌛 to 🌅 grind! Let's make these hours count!"
        ]
      };
      
      let greetingArray;
      if (hour >= 5 && hour < 8) {
        // timeOfDay = 'early morning';
        greetingArray = greetings.earlyMorning;
      } else if (hour >= 8 && hour < 12) {
        // timeOfDay = 'late morning';
        greetingArray = greetings.lateMorning;
      } else if (hour >= 12 && hour < 13) {
        // timeOfDay = 'midday';
        greetingArray = greetings.midday;
      } else if (hour >= 13 && hour < 17) {
        // timeOfDay = 'afternoon';
        greetingArray = greetings.afternoon;
      } else if (hour >= 17 && hour < 21) {
        // timeOfDay = 'evening';
        greetingArray = greetings.evening;
      } else if (hour >= 21 && hour < 24) {
        // timeOfDay = 'night';
        greetingArray = greetings.night;
      } else {
        // hour >= 0 && hour < 5 (midnight to 5 AM)
        // timeOfDay = 'late night'; // Not used currently
        greetingArray = greetings.lateNight;
      }
      
      // Select a random greeting from the appropriate time period
      const randomIndex = Math.floor(Math.random() * greetingArray.length);
      const greeting = greetingArray[randomIndex];
      
      const greetingElement = document.getElementById('greeting');
      if (greetingElement) {
        greetingElement.textContent = greeting;
        
        // Add location info if not auto-detected
        const settingsTimezone = getTimezoneFromSettings();
        if (settingsTimezone !== 'auto') {
          greetingElement.innerHTML = `${greeting} <span class="text-white/60 text-sm font-normal">• ${location} time</span>`;
        }
      }
    };
    
    // Segmented control and interface switching logic
    const singlePostInterface = document.getElementById('single-post-interface');
    const bulkUploadInterface = document.getElementById('bulk-upload-interface');
    const modeDescription = document.getElementById('mode-description');
    
    const singlePostBtn = document.getElementById('single-post-btn');
    const bulkUploadBtn = document.getElementById('bulk-upload-btn');
    
    // Get the segmented control container for animation control
    const segmentedControl = document.querySelector('.liquid-glass-segmented-control');
    
    // Segmented control state management with animation
    const updateActiveSegment = (activeBtn, inactiveBtn, isSingleActive = false) => {
      // Update button states
      activeBtn?.classList.add('active');
      inactiveBtn?.classList.remove('active');
      
      // Update control container state for sliding animation
      if (segmentedControl) {
        if (isSingleActive) {
          segmentedControl.classList.add('single-active');
        } else {
          segmentedControl.classList.remove('single-active');
        }
        
        // Add pulse animation on selection change
        segmentedControl.classList.add('selection-changed');
        setTimeout(() => {
          segmentedControl.classList.remove('selection-changed');
        }, 400);
      }
    };
    
    // Show single post interface - Move indicator to right
    if (singlePostBtn) {
      singlePostBtn.addEventListener('click', () => {
        updateActiveSegment(singlePostBtn, bulkUploadBtn, true); // true = single is active (move to right)
        if (modeDescription) {
          modeDescription.textContent = 'Convert individual WordPress posts by entering their URL';
        }
        
        
        // Switch interfaces
        bulkUploadInterface?.classList.add('hidden');
        singlePostInterface?.classList.remove('hidden');
      });
    }
    
    // Show bulk upload interface - Keep indicator on left (default)
    if (bulkUploadBtn) {
      bulkUploadBtn.addEventListener('click', () => {
        updateActiveSegment(bulkUploadBtn, singlePostBtn, false); // false = bulk is active (stay on left)
        if (modeDescription) {
          modeDescription.textContent = 'Upload CSV or TXT files containing multiple WordPress URLs';
        }
        
        
        // Switch interfaces
        singlePostInterface?.classList.add('hidden');
        bulkUploadInterface?.classList.remove('hidden');
      });
    }
    
    // URL validation for Convert Now button
    const urlInput = document.getElementById('wordpress-url');
    const convertNowBtn = document.getElementById('convert-now-btn');
    
    const validateURL = (url) => {
      try {
        const urlObj = new URL(url);
        // Check if it's a valid HTTP/HTTPS URL
        return urlObj.protocol === 'http:' || urlObj.protocol === 'https:';
      } catch {
        return false;
      }
    };
    
    if (urlInput && convertNowBtn) {
      urlInput.addEventListener('input', (e) => {
        const url = e.target.value.trim();
        const isValid = url.length > 0 && validateURL(url);
        
        (convertNowBtn as HTMLButtonElement).disabled = !isValid;
        
        // Update input styling based on validity
        if (url.length > 0) {
          if (isValid) {
            urlInput.style.borderColor = 'rgba(34, 197, 94, 0.8)'; // Green for valid
          } else {
            urlInput.style.borderColor = 'rgba(239, 68, 68, 0.8)'; // Red for invalid
          }
        } else {
          urlInput.style.borderColor = ''; // Reset to default
        }
      });
      
      // Also check on paste
      urlInput.addEventListener('paste', (_e) => {
        setTimeout(() => {
          urlInput.dispatchEvent(new Event('input'));
        }, 10);
      });
    }
    
    // Drag and drop functionality
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-input');
    const fileName = document.getElementById('file-name');
    const bulkConvertBtn = document.getElementById('bulk-convert-btn');
    
    if (dropZone && fileInput) {
      // Prevent default drag behaviors
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
      });
      
      function preventDefaults(e: Event) {
        e.preventDefault();
        e.stopPropagation();
      }
      
      // Highlight drop zone when dragging over
      ['dragenter', 'dragover'].forEach(eventName => {
        dropZone.addEventListener(eventName, highlight, false);
      });
      
      ['dragleave', 'drop'].forEach(eventName => {
        dropZone.addEventListener(eventName, unhighlight, false);
      });
      
      function highlight() {
        dropZone.classList.add('border-white/70', 'bg-black/30');
      }
      
      function unhighlight() {
        dropZone.classList.remove('border-white/70', 'bg-black/30');
      }
      
      // Handle dropped files
      dropZone.addEventListener('drop', handleDrop, false);
      fileInput.addEventListener('change', handleFileSelect, false);
      
      function handleDrop(e: DragEvent) {
        const files = e.dataTransfer?.files;
        if (files) handleFiles(files);
      }
      
      function handleFileSelect(e: Event) {
        const files = (e.target as HTMLInputElement).files;
        if (files) handleFiles(files);
      }
      
      function handleFiles(files: FileList) {
        if (files.length > 0) {
          const file = files[0];
          if (file.type === 'text/csv' || file.type === 'text/plain' || file.name.endsWith('.csv') || file.name.endsWith('.txt')) {
            // Show file name
            if (fileName) {
              fileName.classList.remove('hidden');
              const fileNameText = fileName.querySelector('p');
              if (fileNameText) {
                fileNameText.textContent = `📄 ${file.name}`;
              }
            }
            
            // Enable convert button
            if (bulkConvertBtn) {
              (bulkConvertBtn as HTMLButtonElement).disabled = false;
            }
          } else {
            alert('Please upload a CSV or TXT file.');
          }
        }
      }
    }
    
    // Initialize greeting once on page load
    updateGreeting();
    
    // Job loading and management functionality
    const loadJobs = async () => {
      const loadingEl = document.getElementById('jobs-loading');
      const listEl = document.getElementById('jobs-list');
      const emptyEl = document.getElementById('jobs-empty');
      const errorEl = document.getElementById('jobs-error');
      
      // Show loading state (jobs-error is now separate and doesn't need to be hidden)
      loadingEl?.classList.remove('hidden');
      listEl?.classList.add('hidden');
      emptyEl?.classList.add('hidden');
      
      try {
        // Try to fetch jobs from backend API
        const apiUrl = getApiBaseUrl();
        const response = await fetch(`${apiUrl}/jobs/?page=1&page_size=10`);
        
        if (!response.ok) {
          // Check if it's a 404 (API endpoint not implemented yet) vs real server error
          if (response.status === 404) {
            // API endpoint doesn't exist yet, treat as empty state (no jobs exist)
            loadingEl?.classList.add('hidden');
            emptyEl?.classList.remove('hidden');
            return;
          } else {
            // Real server error (500, 503, etc.)
            throw new Error(`API request failed: ${response.status} ${response.statusText}`);
          }
        }
        
        const data = await response.json();
        const jobs = data.jobs || [];
        
        // Hide loading state
        loadingEl?.classList.add('hidden');
        
        if (jobs.length === 0) {
          // Successfully connected to API, but no jobs exist - show empty state (yellow)
          emptyEl?.classList.remove('hidden');
        } else {
          // Show jobs list
          listEl?.classList.remove('hidden');
          renderJobs(jobs);
        }
        
        // Check if we should resolve any existing errors (connection restored)
        checkAndResolveError();
        
      } catch (error) {
        console.error('Failed to load jobs:', error);
        
        // Hide loading state
        loadingEl?.classList.add('hidden');
        
        // Check if we already have jobs displayed
        const hasExistingJobs = !listEl?.classList.contains('hidden');
        
        // Use enhanced error handling
        try {
          // Import the enhanced error handling utilities
          const { analyzeError, generateErrorHTML } = await import('../utils/error-handling.ts');
          
          const errorDetails = analyzeError(error);
          const errorHTML = generateErrorHTML(errorDetails, 'jobs-error');
          
          // Update the enhanced error content
          const enhancedErrorContent = document.getElementById('enhanced-error-content');
          if (enhancedErrorContent) {
            enhancedErrorContent.innerHTML = errorHTML;
          }
          
          // Show error state in the dedicated error section (now above jobs)
          errorEl?.classList.remove('hidden');
          
          // If no jobs are loaded yet, also show empty state in jobs container
          if (!hasExistingJobs) {
            emptyEl?.classList.remove('hidden');
          }
          
        } catch (importError) {
          console.error('Failed to load enhanced error handling:', importError);
          
          // Fallback to basic error display
          if ((error as Error).message?.includes('Failed to fetch') || (error as Error).name === 'TypeError') {
            emptyEl?.classList.remove('hidden');
          } else {
            errorEl?.classList.remove('hidden');
          }
        }
      }
    };
    
    const renderJobs = (jobs: ConversionJob[]) => {
      const listEl = document.getElementById('jobs-list');
      if (!listEl) return;
      
      // Clear existing content
      listEl.innerHTML = '';
      
      jobs.forEach((job: ConversionJob) => {
        const jobEl = createJobElement(job);
        listEl.appendChild(jobEl);
      });
    };
    
    const createJobElement = (job: ConversionJob) => {
      // Job status configuration
      const statusConfig = {
        pending: {
          borderColor: 'border-gray-500',
          indicatorClass: 'w-3 h-3 bg-gray-400 rounded-full',
          statusPillClass: 'glass-status text-gray-400 px-3 py-1 rounded-full',
          statusText: 'Queued',
          showDownload: false,
          showRetry: false
        },
        running: {
          borderColor: 'border-blue-500',
          indicatorClass: 'animate-spin rounded-full w-3 h-3 border-2 border-blue-400/30 border-t-blue-400',
          statusPillClass: 'glass-status text-blue-400 px-3 py-1 rounded-full',
          statusText: 'Processing',
          showDownload: false,
          showRetry: false
        },
        completed: {
          borderColor: 'border-green-500',
          indicatorClass: 'w-3 h-3 bg-green-400 rounded-full animate-pulse',
          statusPillClass: 'glass-status text-green-400 px-3 py-1 rounded-full',
          statusText: 'Completed',
          showDownload: true,
          showRetry: false
        },
        failed: {
          borderColor: 'border-red-500',
          indicatorClass: 'w-3 h-3 bg-red-400 rounded-full',
          statusPillClass: 'glass-status text-red-400 px-3 py-1 rounded-full',
          statusText: 'Failed',
          showDownload: false,
          showRetry: true
        },
        cancelled: {
          borderColor: 'border-orange-500',
          indicatorClass: 'w-3 h-3 bg-orange-400 rounded-full',
          statusPillClass: 'glass-status text-orange-400 px-3 py-1 rounded-full',
          statusText: 'Cancelled',
          showDownload: false,
          showRetry: true
        }
      };
      
      const config = statusConfig[job.status] || statusConfig.pending;
      
      // Create job element
      const jobDiv = document.createElement('div');
      jobDiv.className = `p-4 rounded-lg border-l-4 ${config.borderColor} bg-white/5`;
      jobDiv.setAttribute('data-job-id', job.id);
      jobDiv.setAttribute('data-status', job.status);
      
      // Format job title
      const title = job.title || formatJobTitle(job.url);
      
      jobDiv.innerHTML = `
        <div class="flex items-center space-x-3 mb-4">
          <div class="${config.indicatorClass}"></div>
          <div>
            <h4 class="text-white font-medium">${title}</h4>
            <p class="text-white/60 text-sm">${job.url}</p>
          </div>
        </div>
        
        ${job.status === 'running' && job.progress !== undefined ? `
        <div class="mb-4 ml-6">
          <div class="w-full bg-white/10 rounded-full h-2 overflow-hidden">
            <div class="bg-gradient-to-r from-blue-400 to-blue-600 h-2 rounded-full transition-all duration-1000" style="width: ${job.progress}%"></div>
          </div>
          <p class="text-white/50 text-xs mt-1">${getProgressMessage(job)}</p>
        </div>
        ` : ''}
        
        ${job.status === 'failed' && job.error_message ? `
        <div class="mb-4 ml-6">
          <div class="bg-red-500/10 border border-red-500/20 rounded-lg p-3">
            <p class="text-red-400 text-xs font-medium mb-1">${job.error_type || 'Conversion Failed'}</p>
            <p class="text-red-300/80 text-xs">${job.error_message}</p>
          </div>
        </div>
        ` : ''}
        
        <div class="flex items-center justify-between">
          <div class="${config.statusPillClass}">
            <span class="text-xs font-medium">${config.statusText}</span>
          </div>
          <div class="flex items-center space-x-3 ml-auto">
            <a href="/jobs/${job.id}" class="glass-button px-3 py-1 text-xs text-white/90 hover:text-white flex items-center space-x-1 transition-all duration-200">
              <svg class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
              </svg>
              <span>View Job</span>
            </a>
            
            ${config.showDownload ? `
            <button class="glass-button px-3 py-1 text-xs text-white/90 hover:text-white flex items-center space-x-1 transition-all duration-200" data-download-job="${job.id}">
              <svg class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
              </svg>
              <span>Download ZIP</span>
            </button>
            ` : ''}
            
            ${config.showRetry ? `
            <button class="glass-button px-3 py-1 text-xs ${job.status === 'failed' ? 'text-red-400/80 hover:text-red-400' : 'text-orange-400/80 hover:text-orange-400'} flex items-center space-x-1 transition-all duration-200" data-retry-job="${job.id}">
              <svg class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              <span>Retry Job</span>
            </button>
            ` : ''}
            
            ${!config.showDownload && job.status !== 'running' ? `
            <button disabled class="glass-button px-3 py-1 text-xs text-white/40 flex items-center space-x-1 cursor-not-allowed opacity-50">
              <svg class="w-3 h-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
              </svg>
              <span>Download ZIP</span>
            </button>
            ` : ''}
          </div>
        </div>
      `;
      
      return jobDiv;
    };
    
    // Utility functions for job formatting
    const formatJobTitle = (url: string) => {
      try {
        const urlObj = new URL(url);
        const pathname = urlObj.pathname;
        const segments = pathname.split('/').filter(Boolean);
        
        if (segments.length === 0) {
          return urlObj.hostname;
        }
        
        const lastSegment = segments[segments.length - 1];
        return lastSegment ?? urlObj.hostname
          .replace(/[-_]/g, ' ')
          .replace(/\b\w/g, l => l.toUpperCase());
      } catch {
        return url;
      }
    };
    
    const getProgressMessage = (job: ConversionJob) => {
      if (job.progress === undefined) return 'Processing...';
      
      if (job.progress < 25) return 'Fetching content...';
      if (job.progress < 50) return 'Processing images...';
      if (job.progress < 75) return 'Converting content...';
      return 'Finalizing conversion...';
    };
    
    // Handle retry button clicks
    const handleRetryJob = async (jobId: string | null) => {
      if (!jobId) return;
      
      try {
        const response = await fetch(`/api/jobs/${jobId}/retry`, {
          method: 'POST',
        });
        
        if (response.ok) {
          // Reload jobs to show updated status
          loadJobs();
        } else {
          console.error('Failed to retry job:', response.status);
        }
      } catch (error) {
        console.error('Failed to retry job:', error);
      }
    };
    
    // Slide-away animation for resolved errors/warnings
    const slideAwayError = () => {
      const errorEl = document.getElementById('jobs-error');
      if (!errorEl || errorEl.classList.contains('hidden')) return;
      
      // Start slide-away animation (slide right and fade out)
      errorEl.style.transform = 'translateX(100%)';
      errorEl.style.opacity = '0';
      errorEl.style.maxHeight = '0';
      
      // Hide element after animation completes
      setTimeout(() => {
        errorEl.classList.add('hidden');
        // Reset transform for next time
        errorEl.style.transform = 'translateX(0)';
        errorEl.style.opacity = '1';
        errorEl.style.maxHeight = '';
      }, 500); // Match transition duration
    };
    
    // Check if error should be resolved (e.g., when jobs load successfully)
    const checkAndResolveError = () => {
      const errorEl = document.getElementById('jobs-error');
      const listEl = document.getElementById('jobs-list');
      const emptyEl = document.getElementById('jobs-empty');
      
      // If error is showing and either jobs or empty state is showing, resolve the error
      if (errorEl && !errorEl.classList.contains('hidden')) {
        const hasJobs = listEl && !listEl.classList.contains('hidden');
        const hasEmptyState = emptyEl && !emptyEl.classList.contains('hidden');
        
        if (hasJobs || hasEmptyState) {
          slideAwayError();
        }
      }
    };
    
    // Event delegation for job actions
    document.addEventListener('click', (e) => {
      if (!e.target) return;
      
      const retryBtn = (e.target as Element).closest('[data-retry-job]');
      const downloadBtn = (e.target as Element).closest('[data-download-job]');
      
      if (retryBtn) {
        const jobId = retryBtn.getAttribute('data-retry-job');
        handleRetryJob(jobId);
      }
      
      if (downloadBtn) {
        const jobId = downloadBtn.getAttribute('data-download-job');
        // Handle download logic here
        window.location.href = `/api/jobs/${jobId}/download`;
      }
    });
    
    // Retry loading jobs if error state button is clicked
    document.getElementById('retry-load-jobs')?.addEventListener('click', loadJobs);
    
    // Initialize job loading
    loadJobs();
    
    // Real-time updates - poll for job status changes every 5 seconds
    let updateInterval: ReturnType<typeof setInterval> | null;
    const startRealTimeUpdates = () => {
      updateInterval = setInterval(() => {
        const hasRunningJobs = document.querySelectorAll('[data-status="running"], [data-status="pending"]').length > 0;
        
        // Only poll if there are active jobs or if we're showing jobs
        if (hasRunningJobs || !document.getElementById('jobs-empty')?.classList.contains('hidden')) {
          loadJobs();
        }
      }, window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL); // Poll using centralized timing
    };
    
    const stopRealTimeUpdates = () => {
      if (updateInterval) {
        clearInterval(updateInterval);
        updateInterval = null;
      }
    };
    
    // Start real-time updates
    startRealTimeUpdates();
    
    // Stop updates when page is hidden to save resources
    document.addEventListener('visibilitychange', () => {
      if (document.hidden) {
        stopRealTimeUpdates();
      } else {
        startRealTimeUpdates();
      }
    });
    
    // Stop updates when leaving the page
    window.addEventListener('beforeunload', stopRealTimeUpdates);
    
    // Add click handlers for interactive elements
    const interactiveElements = document.querySelectorAll('.liquid-glass-interactive');
    
    interactiveElements.forEach(element => {
      element.addEventListener('click', (_e) => {
        // Add haptic feedback simulation
        (element as HTMLElement).style.transform = 'scale(0.98)';
        setTimeout(() => {
          (element as HTMLElement).style.transform = '';
        }, 100);
      });
    });
    
    // Handle retry job functionality
    const retryButton = document.getElementById('retry-job-101');
    if (retryButton) {
      retryButton.addEventListener('click', async (e) => {
        e.preventDefault();
        
        // Add loading state
        const originalContent = retryButton.innerHTML;
        retryButton.innerHTML = `
          <svg class="w-3 h-3 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          <span>Retrying...</span>
        `;
        (retryButton as HTMLButtonElement).disabled = true;
        
        try {
          // Simulate API call (in real implementation, use API client)
          await new Promise(resolve => setTimeout(resolve, window.CSFRACE_TIMING.UI.SLOW_ANIMATION));
          
          // Update UI to show job is now pending/processing
          const jobElement = retryButton.closest('.p-4') as HTMLElement;
          if (jobElement) {
            const statusIndicator = jobElement.querySelector('.w-3.h-3') as HTMLElement;
            const statusPill = jobElement.querySelector('.glass-status') as HTMLElement;
            const errorMessage = jobElement.querySelector('.bg-red-500\\/10');
            
            // Update status indicator
            if (statusIndicator) {
              statusIndicator.className = 'animate-spin rounded-full w-3 h-3 border-2 border-blue-400/30 border-t-blue-400';
            }
            
            // Update status pill
            if (statusPill) {
              statusPill.className = 'glass-status text-blue-400 px-3 py-1 rounded-full';
              const statusText = statusPill.querySelector('span') as HTMLElement;
              if (statusText) {
                statusText.textContent = 'Processing';
              }
            }
            
            // Remove error message
            if (errorMessage) {
              errorMessage.remove();
            }
            
            // Update border color
            jobElement.className = jobElement.className.replace('border-red-500', 'border-blue-500');
          }
          
          // Hide retry button and show download button
          (retryButton as HTMLElement).style.display = 'none';
          
          console.warn('Job retry initiated successfully');
        } catch (error) {
          console.error('Failed to retry job:', error);
          // Reset button state on error
          retryButton.innerHTML = originalContent;
          (retryButton as HTMLButtonElement).disabled = false;
        }
      });
    }
    
    // Convert Now Button Click Handler
    if (convertNowBtn && urlInput) {
      convertNowBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        
        const apiUrl = getApiBaseUrl();
        const url = (urlInput as HTMLInputElement).value.trim();
        if (!url) {
          alert('Please enter a WordPress URL');
          return;
        }
        
        // Add loading state
        const originalContent = convertNowBtn.innerHTML;
        convertNowBtn.innerHTML = `
          <svg class="w-5 h-5 mr-2 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
          </svg>
          Converting...
        `;
        (convertNowBtn as HTMLButtonElement).disabled = true;
        
        try {
          // Call backend API for individual job creation
          const response = await fetch(`${apiUrl}/jobs/`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              url: url
            })
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
          }
          
          const jobData = await response.json();
          console.warn('Job created successfully:', jobData);
          
          // Clear input and show success
          (urlInput as HTMLInputElement).value = '';
          alert(`Job created successfully! Job ID: ${jobData.id}`);
          
          // Refresh jobs display
          await loadJobs();
          
        } catch (error) {
          console.error('Failed to create job:', error);
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
          alert(`Failed to create job: ${errorMessage}`);
        } finally {
          // Reset button state
          convertNowBtn.innerHTML = originalContent;
          (convertNowBtn as HTMLButtonElement).disabled = false;
        }
      });
    }
    
    // Convert All Button Click Handler (Bulk Processing)
    if (bulkConvertBtn && fileInput) {
      bulkConvertBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        
        const apiUrl = getApiBaseUrl();
        const file = (fileInput as HTMLInputElement).files?.[0];
        if (!file) {
          alert('Please select a file containing URLs');
          return;
        }
        
        // Read file content
        try {
          const fileContent = await new Promise<string>((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (e) => {
              if (e.target && e.target.result) {
                resolve(e.target.result as string);
              } else {
                reject(new Error('Failed to read file'));
              }
            };
            reader.onerror = reject;
            reader.readAsText(file);
          });
          
          // Parse URLs from file content
          const urls = fileContent
            .split('\n')
            .map((line: string) => line.trim())
            .filter((line: string) => line && line.startsWith('http'));
          
          if (urls.length === 0) {
            alert('No valid URLs found in the file');
            return;
          }
          
          // Add loading state
          bulkConvertBtn.innerHTML = `
            <svg class="w-5 h-5 mr-2 animate-spin" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
            Processing ${urls.length} URLs...
          `;
          (bulkConvertBtn as HTMLButtonElement).disabled = true;
          
          // Call backend API for batch processing
          const response = await fetch(`${apiUrl}/batches/`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              name: `Batch-${new Date().toISOString().slice(0, 19).replace(/[T:]/g, '-')}`,
              description: `Bulk conversion of ${urls.length} URLs`,
              urls: urls
            })
          });
          
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
          }
          
          const batchData = await response.json();
          console.warn('Batch created successfully:', batchData);
          
          // Clear file input and show success
          (fileInput as HTMLInputElement).value = '';
          const fileName = document.getElementById('file-name');
          if (fileName) {
            fileName.textContent = 'No file selected';
          }
          
          alert(`Batch processing started successfully! Batch ID: ${batchData.id} (${urls.length} URLs)`);
          
          // Refresh jobs display
          await loadJobs();
          
        } catch (error) {
          console.error('Failed to process batch:', error);
          const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
          alert(`Failed to process batch: ${errorMessage}`);
        } finally {
          // Reset button state
          bulkConvertBtn.innerHTML = 'Convert All URLs';
          (bulkConvertBtn as HTMLButtonElement).disabled = false;
        }
      });
    }
    
    // Simulate progress update
    const progressBar = document.querySelector('[style*="width: 65%"]') as HTMLElement;
    if (progressBar) {
      let progress = 65;
      const updateProgress = () => {
        progress += Math.random() * 5;
        if (progress >= 100) {
          progressBar.style.width = '100%';
          const statusElement = progressBar.parentElement?.nextElementSibling?.querySelector('.text-white/50') as HTMLElement;
          if (statusElement) {
            statusElement.textContent = 'Conversion complete!';
          }
        } else {
          progressBar.style.width = `${Math.min(progress, 100)}%`;
          setTimeout(updateProgress, window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL + Math.random() * window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL);
        }
      };
      
      setTimeout(updateProgress, window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL);
    }
  });
</script>

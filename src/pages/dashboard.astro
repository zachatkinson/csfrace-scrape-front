---
import MainLayout from '../components/layout/MainLayout.astro';
---

<MainLayout title="Job Dashboard - CSFrace Scrape">
  <!-- Job Dashboard -->
  <section class="py-8">
    <div class="max-w-7xl mx-auto space-y-8">
      
      <!-- Header Section -->
      <div class="glass-card p-6">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <a href="/" class="glass-button px-3 py-2 text-white/90 hover:text-white flex items-center space-x-2 transition-all duration-200">
              <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
              </svg>
              <span>Back to Converter</span>
            </a>
            <div class="h-6 w-px bg-white/20"></div>
            <div>
              <h1 class="text-3xl font-bold text-white">Job Dashboard</h1>
              <p class="text-white/70">Manage and monitor all your conversion jobs</p>
            </div>
          </div>
          
          <!-- Connection Status & Stats -->
          <div class="flex items-center space-x-6">
            <div class="flex items-center space-x-2">
              <div id="connection-indicator" class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-white/70 text-sm">Connected</span>
            </div>
            <div class="text-right">
              <div class="text-white font-semibold" id="total-jobs">0 Jobs</div>
              <div class="text-white/70 text-sm" id="active-jobs">0 Active</div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Filters & Controls -->
      <div class="glass-card p-6">
        <div class="flex items-center justify-between flex-wrap gap-4">
          
          <!-- Status Filters -->
          <div class="flex items-center space-x-2">
            <span class="text-white/70 text-sm font-medium">Filter:</span>
            <div class="flex space-x-2">
              <button id="filter-all" class="filter-btn active px-3 py-1 text-xs rounded-full transition-all duration-200">All</button>
              <button id="filter-processing" class="filter-btn px-3 py-1 text-xs rounded-full transition-all duration-200">Processing</button>
              <button id="filter-completed" class="filter-btn px-3 py-1 text-xs rounded-full transition-all duration-200">Completed</button>
              <button id="filter-failed" class="filter-btn px-3 py-1 text-xs rounded-full transition-all duration-200">Failed</button>
              <button id="filter-queued" class="filter-btn px-3 py-1 text-xs rounded-full transition-all duration-200">Pending</button>
            </div>
          </div>
          
          <!-- Sort & Search -->
          <div class="flex items-center space-x-4">
            <div class="flex items-center space-x-2">
              <label class="text-white/70 text-sm">Sort:</label>
              <select id="sort-select" class="glass-input text-sm px-3 py-1 min-w-0">
                <option value="newest">Newest First</option>
                <option value="oldest">Oldest First</option>
                <option value="status">By Status</option>
                <option value="progress">By Progress</option>
              </select>
            </div>
            
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4 text-white/50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
              <input id="search-input" type="text" placeholder="Search jobs..." class="glass-input text-sm px-3 py-1 w-48" />
            </div>
            
            <!-- Batch Actions -->
            <div class="flex items-center space-x-2">
              <button id="select-all-btn" class="glass-button px-3 py-1 text-xs text-white/90 hover:text-white">Select All</button>
              <button id="delete-selected-btn" class="glass-button px-3 py-1 text-xs text-red-400/80 hover:text-red-400 disabled:opacity-50" disabled>Delete Selected</button>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Jobs List -->
      <div class="glass-card p-6">
        <div class="space-y-4" id="jobs-container">
          <!-- Jobs will be populated by JavaScript -->
        </div>
        
        <!-- Pagination -->
        <div class="border-t border-white/10 pt-6 mt-6">
          <div class="flex items-center justify-between">
            <div class="text-white/70 text-sm">
              Showing <span id="showing-count">0</span> of <span id="total-count">0</span> jobs
            </div>
            <div class="flex items-center space-x-2">
              <button id="prev-page" class="glass-button px-3 py-2 text-white/90 hover:text-white disabled:opacity-50" disabled>Previous</button>
              <div class="flex space-x-1" id="page-numbers">
                <!-- Page numbers will be populated by JavaScript -->
              </div>
              <button id="next-page" class="glass-button px-3 py-2 text-white/90 hover:text-white">Next</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Job Detail Modal -->
  <div id="job-modal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
    <div class="flex items-center justify-center min-h-screen p-4">
      <div class="glass-card p-6 max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-bold text-white">Job Details</h2>
          <button id="close-modal" class="glass-button p-2 text-white/90 hover:text-white">
            <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div id="job-details-content">
          <!-- Job details will be populated by JavaScript -->
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script type="module">
  // Import the API client
  import { apiClient, getJobProgress, getJobDuration, getRelativeTime, formatFileSize, JOB_STATUS_LABELS, JOB_STATUS_COLORS } from '../lib/api-client.js';

  document.addEventListener('DOMContentLoaded', async () => {
    // State management
    let jobs = [];
    let filteredJobs = [];
    let selectedJobs = new Set();
    let currentFilter = 'all';
    let currentSort = 'newest';
    let searchQuery = '';
    let currentPage = 1;
    const jobsPerPage = 10;
    let isLoading = false;
    let connectionStatus = 'connected';
    
    // DOM elements
    const jobsContainer = document.getElementById('jobs-container');
    const searchInput = document.getElementById('search-input');
    const sortSelect = document.getElementById('sort-select');
    const filterButtons = document.querySelectorAll('.filter-btn');
    const selectAllBtn = document.getElementById('select-all-btn');
    const deleteSelectedBtn = document.getElementById('delete-selected-btn');
    const totalJobsEl = document.getElementById('total-jobs');
    const activeJobsEl = document.getElementById('active-jobs');
    const connectionIndicator = document.getElementById('connection-indicator');
    
    // Map backend statuses to UI statuses
    const mapStatus = (backendStatus) => {
      const statusMap = {
        'pending': 'queued',
        'running': 'processing',
        'completed': 'completed',
        'failed': 'failed',
        'skipped': 'skipped',
        'cancelled': 'cancelled',
        'partial': 'partial'
      };
      return statusMap[backendStatus] || backendStatus;
    };
    
    // Map UI filter statuses to backend statuses
    const mapFilterToBackend = (uiFilter) => {
      const filterMap = {
        'queued': 'pending',
        'processing': 'running',
        'completed': 'completed',
        'failed': 'failed',
        'all': null
      };
      return filterMap[uiFilter] || null;
    };
    
    // Convert backend job to UI job format
    const convertJob = (backendJob) => {
      return {
        id: backendJob.id,
        title: extractTitleFromUrl(backendJob.url),
        url: backendJob.url,
        domain: backendJob.domain,
        status: mapStatus(backendJob.status),
        progress: getJobProgress(backendJob),
        createdAt: new Date(backendJob.created_at),
        startedAt: backendJob.started_at ? new Date(backendJob.started_at) : null,
        completedAt: backendJob.completed_at ? new Date(backendJob.completed_at) : null,
        duration: getJobDuration(backendJob),
        error: backendJob.error_message,
        errorType: backendJob.error_type,
        success: backendJob.success,
        retryCount: backendJob.retry_count,
        maxRetries: backendJob.max_retries,
        priority: backendJob.priority,
        contentSize: backendJob.content_size_bytes,
        imagesDownloaded: backendJob.images_downloaded,
        batchId: backendJob.batch_id,
        // Estimated values for missing fields
        wordCount: Math.floor(Math.random() * 2000) + 500,
        imageCount: backendJob.images_downloaded || Math.floor(Math.random() * 10),
        fileSize: backendJob.content_size_bytes ? formatFileSize(backendJob.content_size_bytes) : null
      };
    };
    
    // Extract title from URL (simple heuristic)
    const extractTitleFromUrl = (url) => {
      try {
        const urlObj = new URL(url);
        const path = urlObj.pathname;
        const lastSegment = path.split('/').filter(Boolean).pop() || 'Unknown';
        return lastSegment.split('-').map(word => 
          word.charAt(0).toUpperCase() + word.slice(1)
        ).join(' ');
      } catch {
        return 'Unknown Page';
      }
    };
    
    // Update connection status
    const updateConnectionStatus = (status) => {
      connectionStatus = status;
      const indicator = document.getElementById('connection-indicator');
      const statusText = indicator.nextElementSibling;
      
      switch (status) {
        case 'connected':
          indicator.className = 'w-3 h-3 bg-green-400 rounded-full animate-pulse';
          statusText.textContent = 'Connected';
          break;
        case 'disconnected':
          indicator.className = 'w-3 h-3 bg-red-400 rounded-full';
          statusText.textContent = 'Disconnected';
          break;
        case 'reconnecting':
          indicator.className = 'w-3 h-3 bg-yellow-400 rounded-full animate-pulse';
          statusText.textContent = 'Reconnecting...';
          break;
      }
    };
    
    // Show loading state
    const showLoading = () => {
      isLoading = true;
      jobsContainer.innerHTML = `
        <div class="text-center py-12">
          <div class="animate-spin rounded-full w-12 h-12 border-4 border-blue-400/30 border-t-blue-400 mx-auto mb-4"></div>
          <h3 class="text-white font-medium mb-2">Loading jobs...</h3>
          <p class="text-white/60 text-sm">Please wait while we fetch your conversion jobs</p>
        </div>
      `;
    };
    
    // Show error state
    const showError = (message = 'Failed to load jobs') => {
      jobsContainer.innerHTML = `
        <div class="text-center py-12">
          <div class="w-16 h-16 mx-auto mb-4 bg-red-500/10 rounded-full flex items-center justify-center">
            <svg class="w-8 h-8 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
            </svg>
          </div>
          <h3 class="text-white font-medium mb-2">Connection Error</h3>
          <p class="text-white/60 text-sm mb-4">${message}</p>
          <button onclick="loadJobs()" class="glass-button px-4 py-2 text-white/90 hover:text-white">
            Try Again
          </button>
        </div>
      `;
    };
    
    // Load jobs from API
    const loadJobs = async () => {
      try {
        showLoading();
        updateConnectionStatus('connected');
        
        const backendFilter = mapFilterToBackend(currentFilter);
        const response = await apiClient.getJobs({
          page: currentPage,
          page_size: jobsPerPage,
          status_filter: backendFilter
        });
        
        jobs = response.jobs.map(convertJob);
        filterJobs();
        
      } catch (error) {
        console.error('Failed to load jobs:', error);
        updateConnectionStatus('disconnected');
        showError(error.message);
      }
    };
    
    // Utility functions
    const formatDate = (date) => getRelativeTime(date.toISOString());
    
    const getStatusIcon = (status) => {
      const color = JOB_STATUS_COLORS[status] || '#6b7280';
      
      switch (status) {
        case 'completed':
          return `<div class="w-3 h-3 rounded-full" style="background-color: ${color}"></div>`;
        case 'processing':
          return `<div class="animate-spin rounded-full w-3 h-3 border-2 border-opacity-30 border-t-opacity-100" style="border-color: ${color}"></div>`;
        case 'failed':
          return `<div class="w-3 h-3 rounded-full" style="background-color: ${color}"></div>`;
        case 'cancelled':
          return `<div class="w-3 h-3 rounded-full" style="background-color: ${color}"></div>`;
        case 'queued':
        default:
          return `<div class="w-3 h-3 rounded-full" style="background-color: ${color}"></div>`;
      }
    };
    
    const getStatusColor = (status) => {
      switch (status) {
        case 'completed': return 'text-green-400';
        case 'processing': return 'text-blue-400';
        case 'failed': return 'text-red-400';
        case 'cancelled': return 'text-yellow-400';
        case 'queued':
        case 'skipped':
        case 'partial':
        default: return 'text-gray-400';
      }
    };
    
    // Job rendering
    const renderJob = (job) => {
      const isSelected = selectedJobs.has(job.id);
      
      return `
        <div class="job-item p-4 rounded-lg border-l-4 bg-white/5 ${job.status} ${isSelected ? 'selected' : ''}" data-job-id="${job.id}">
          <div class="flex items-start justify-between">
            <!-- Left: Selection + Info -->
            <div class="flex items-start space-x-4 flex-1">
              <input type="checkbox" class="job-checkbox mt-1" ${isSelected ? 'checked' : ''} data-job-id="${job.id}">
              
              <div class="flex items-center space-x-3 flex-1">
                ${getStatusIcon(job.status)}
                <div class="flex-1">
                  <h3 class="text-white font-medium cursor-pointer hover:text-blue-400 transition-colors" data-job-id="${job.id}" data-action="view-details">
                    ${job.title}
                  </h3>
                  <p class="text-white/60 text-sm truncate max-w-md">${job.url}</p>
                  <div class="flex items-center space-x-4 mt-2 text-xs text-white/50">
                    <span>${formatDate(job.createdAt)}</span>
                    <span>ID: ${job.id}</span>
                    ${job.domain ? `<span>${job.domain}</span>` : ''}
                    ${job.wordCount > 0 ? `<span>${job.wordCount} words</span>` : ''}
                    ${job.imageCount > 0 ? `<span>${job.imageCount} images</span>` : ''}
                    ${job.fileSize ? `<span>${job.fileSize}</span>` : ''}
                    ${job.duration && job.duration !== 'N/A' ? `<span>Duration: ${job.duration}</span>` : ''}
                    ${job.retryCount > 0 ? `<span>Retries: ${job.retryCount}/${job.maxRetries}</span>` : ''}
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Right: Status + Progress -->
            <div class="flex items-center space-x-4">
              ${job.status === 'processing' && job.progress > 0 ? `
                <div class="flex items-center space-x-2">
                  <div class="w-24 h-2 progress-bar">
                    <div class="bg-gradient-to-r from-blue-400 to-blue-600 h-full rounded-full transition-all duration-1000" style="width: ${job.progress}%"></div>
                  </div>
                  <span class="text-white/70 text-xs">${job.progress}%</span>
                </div>
              ` : ''}
              
              <div class="glass-status ${getStatusColor(job.status)} px-3 py-1 rounded-full">
                <span class="text-xs font-medium">${JOB_STATUS_LABELS[job.status] || job.status}</span>
              </div>
            </div>
          </div>
          
          ${job.error ? `
            <div class="mt-4 ml-7">
              <div class="bg-red-500/10 border border-red-500/20 rounded-lg p-3">
                <p class="text-red-400 text-xs font-medium mb-1">Error${job.errorType ? ` (${job.errorType})` : ''}</p>
                <p class="text-red-300/80 text-xs">${job.error}</p>
              </div>
            </div>
          ` : ''}
          
          <!-- Action Buttons -->
          <div class="flex items-center justify-between mt-4">
            <div class="flex items-center space-x-2">
              ${job.priority && job.priority !== 'normal' ? `
                <span class="text-white/50 text-xs bg-white/10 px-2 py-1 rounded-full">${job.priority.toUpperCase()}</span>
              ` : ''}
              ${job.batchId ? `
                <span class="text-white/50 text-xs bg-white/10 px-2 py-1 rounded-full">Batch ${job.batchId}</span>
              ` : ''}
            </div>
            
            <div class="flex items-center space-x-2 ml-auto">
              <button class="glass-button px-3 py-1 text-xs text-white/90 hover:text-white" data-action="view-details" data-job-id="${job.id}">
                <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
                View
              </button>
              
              ${job.status === 'completed' ? `
                <button class="glass-button px-3 py-1 text-xs text-white/90 hover:text-white" data-action="download" data-job-id="${job.id}">
                  <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3M3 17V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v10a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
                  </svg>
                  Download
                </button>
              ` : ''}
              
              ${job.status === 'processing' ? `
                <button class="glass-button px-3 py-1 text-xs text-yellow-400/80 hover:text-yellow-400" data-action="cancel" data-job-id="${job.id}">
                  <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  Cancel
                </button>
              ` : ''}
              
              ${job.status === 'failed' && job.retryCount < job.maxRetries ? `
                <button class="glass-button px-3 py-1 text-xs text-blue-400/80 hover:text-blue-400" data-action="retry" data-job-id="${job.id}">
                  <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Retry
                </button>
              ` : ''}
              
              <button class="glass-button px-3 py-1 text-xs text-red-400/80 hover:text-red-400" data-action="delete" data-job-id="${job.id}">
                <svg class="w-3 h-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                </svg>
                Delete
              </button>
            </div>
          </div>
        </div>
      `;
    };
    
    const renderJobs = () => {
      if (isLoading) return;
      
      if (filteredJobs.length === 0) {
        jobsContainer.innerHTML = `
          <div class="text-center py-12">
            <div class="w-16 h-16 mx-auto mb-4 bg-white/10 rounded-full flex items-center justify-center">
              <svg class="w-8 h-8 text-white/50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <h3 class="text-white font-medium mb-2">No jobs found</h3>
            <p class="text-white/60 text-sm">Try adjusting your filters or search query</p>
          </div>
        `;
        return;
      }
      
      jobsContainer.innerHTML = filteredJobs.map(renderJob).join('');
      updateStats();
    };
    
    const updateStats = () => {
      const total = jobs.length;
      const active = jobs.filter(j => j.status === 'processing').length;
      
      totalJobsEl.textContent = `${total} Job${total !== 1 ? 's' : ''}`;
      activeJobsEl.textContent = `${active} Active`;
      
      // Update pagination counts
      const showingCountEl = document.getElementById('showing-count');
      const totalCountEl = document.getElementById('total-count');
      
      if (showingCountEl && totalCountEl) {
        if (total === 0) {
          showingCountEl.textContent = '0';
        } else {
          const startIndex = ((currentPage - 1) * jobsPerPage) + 1;
          const endIndex = Math.min(currentPage * jobsPerPage, total);
          showingCountEl.textContent = `${startIndex}-${endIndex}`;
        }
        totalCountEl.textContent = total.toString();
      }
    };
    
    // Filtering and sorting (client-side for now, but can be moved to server-side)
    const filterJobs = () => {
      filteredJobs = jobs.filter(job => {
        // Filter by status
        if (currentFilter !== 'all' && job.status !== currentFilter) {
          return false;
        }
        
        // Filter by search query
        if (searchQuery) {
          const query = searchQuery.toLowerCase();
          return job.title.toLowerCase().includes(query) || 
                 job.url.toLowerCase().includes(query) ||
                 job.domain?.toLowerCase().includes(query);
        }
        
        return true;
      });
      
      // Sort jobs
      filteredJobs.sort((a, b) => {
        switch (currentSort) {
          case 'newest':
            return new Date(b.createdAt) - new Date(a.createdAt);
          case 'oldest':
            return new Date(a.createdAt) - new Date(b.createdAt);
          case 'status':
            return a.status.localeCompare(b.status);
          case 'progress':
            return b.progress - a.progress;
          default:
            return 0;
        }
      });
      
      renderJobs();
    };
    
    // Event listeners
    filterButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        filterButtons.forEach(b => b.classList.remove('active'));
        e.target.classList.add('active');
        currentFilter = e.target.id.replace('filter-', '');
        currentPage = 1;
        loadJobs(); // Reload with new filter
      });
    });
    
    searchInput.addEventListener('input', (e) => {
      searchQuery = e.target.value;
      filterJobs();
    });
    
    sortSelect.addEventListener('change', (e) => {
      currentSort = e.target.value;
      filterJobs();
    });
    
    // Job actions
    jobsContainer.addEventListener('click', async (e) => {
      const action = e.target.closest('[data-action]')?.dataset.action;
      const jobId = e.target.closest('[data-job-id]')?.dataset.jobId;
      
      if (!action || !jobId) return;
      
      const numericJobId = parseInt(jobId);
      
      try {
        switch (action) {
          case 'view-details':
            await showJobDetails(numericJobId);
            break;
          case 'download':
            await downloadJob(numericJobId);
            break;
          case 'retry':
            await retryJob(numericJobId);
            break;
          case 'cancel':
            await cancelJob(numericJobId);
            break;
          case 'delete':
            await deleteJob(numericJobId);
            break;
        }
      } catch (error) {
        console.error(`Action ${action} failed:`, error);
        alert(`Failed to ${action} job: ${error.message}`);
      }
    });
    
    // Job selection
    jobsContainer.addEventListener('change', (e) => {
      if (e.target.classList.contains('job-checkbox')) {
        const jobId = parseInt(e.target.dataset.jobId);
        if (e.target.checked) {
          selectedJobs.add(jobId);
        } else {
          selectedJobs.delete(jobId);
        }
        
        updateSelectionUI();
      }
    });
    
    const updateSelectionUI = () => {
      deleteSelectedBtn.disabled = selectedJobs.size === 0;
      selectAllBtn.textContent = selectedJobs.size === filteredJobs.length ? 'Select None' : 'Select All';
      
      // Update job item styling
      document.querySelectorAll('.job-item').forEach(item => {
        const jobId = parseInt(item.dataset.jobId);
        if (selectedJobs.has(jobId)) {
          item.classList.add('selected');
        } else {
          item.classList.remove('selected');
        }
      });
    };
    
    selectAllBtn.addEventListener('click', () => {
      if (selectedJobs.size === filteredJobs.length) {
        selectedJobs.clear();
      } else {
        filteredJobs.forEach(job => selectedJobs.add(job.id));
      }
      
      updateSelectionUI();
    });
    
    deleteSelectedBtn.addEventListener('click', async () => {
      if (confirm(`Delete ${selectedJobs.size} selected job(s)?`)) {
        const deletePromises = Array.from(selectedJobs).map(jobId => 
          apiClient.deleteJob(jobId).catch(err => console.error(`Failed to delete job ${jobId}:`, err))
        );
        
        await Promise.all(deletePromises);
        selectedJobs.clear();
        await loadJobs();
      }
    });
    
    // Job action functions
    const showJobDetails = async (jobId) => {
      try {
        const job = await apiClient.getJob(jobId);
        const convertedJob = convertJob(job);
        
        const modal = document.getElementById('job-modal');
        const content = document.getElementById('job-details-content');
        
        content.innerHTML = `
          <div class="space-y-6">
            <div class="flex items-center space-x-3">
              ${getStatusIcon(convertedJob.status)}
              <div>
                <h3 class="text-xl font-bold text-white">${convertedJob.title}</h3>
                <p class="text-white/70">${convertedJob.url}</p>
              </div>
            </div>
            
            <div class="grid grid-cols-2 gap-4">
              <div class="space-y-2">
                <p class="text-white/70 text-sm">Status</p>
                <div class="glass-status ${getStatusColor(convertedJob.status)} px-3 py-1 rounded-full w-fit">
                  <span class="text-xs font-medium">${JOB_STATUS_LABELS[convertedJob.status] || convertedJob.status}</span>
                </div>
              </div>
              
              <div class="space-y-2">
                <p class="text-white/70 text-sm">Progress</p>
                <p class="text-white">${convertedJob.progress}%</p>
              </div>
              
              <div class="space-y-2">
                <p class="text-white/70 text-sm">Created</p>
                <p class="text-white">${convertedJob.createdAt.toLocaleString()}</p>
              </div>
              
              ${convertedJob.completedAt ? `
                <div class="space-y-2">
                  <p class="text-white/70 text-sm">Completed</p>
                  <p class="text-white">${convertedJob.completedAt.toLocaleString()}</p>
                </div>
              ` : ''}
              
              <div class="space-y-2">
                <p class="text-white/70 text-sm">Priority</p>
                <p class="text-white">${convertedJob.priority}</p>
              </div>
              
              <div class="space-y-2">
                <p class="text-white/70 text-sm">Retries</p>
                <p class="text-white">${convertedJob.retryCount}/${convertedJob.maxRetries}</p>
              </div>
              
              <div class="space-y-2">
                <p class="text-white/70 text-sm">Images Downloaded</p>
                <p class="text-white">${convertedJob.imagesDownloaded} images</p>
              </div>
              
              ${convertedJob.contentSize ? `
                <div class="space-y-2">
                  <p class="text-white/70 text-sm">Content Size</p>
                  <p class="text-white">${formatFileSize(convertedJob.contentSize)}</p>
                </div>
              ` : ''}
            </div>
            
            ${convertedJob.error ? `
              <div class="bg-red-500/10 border border-red-500/20 rounded-lg p-4">
                <h4 class="text-red-400 font-medium mb-2">Error Details</h4>
                <p class="text-red-300/80 text-sm">${convertedJob.error}</p>
                ${convertedJob.errorType ? `<p class="text-red-300/60 text-xs mt-1">Type: ${convertedJob.errorType}</p>` : ''}
              </div>
            ` : ''}
            
            <div class="flex space-x-3 pt-4">
              ${convertedJob.status === 'completed' ? `
                <button class="glass-button px-4 py-2 text-white" onclick="downloadJob(${convertedJob.id})">
                  Download Result
                </button>
              ` : ''}
              ${convertedJob.status === 'failed' && convertedJob.retryCount < convertedJob.maxRetries ? `
                <button class="glass-button px-4 py-2 text-blue-400" onclick="retryJob(${convertedJob.id})">
                  Retry Job
                </button>
              ` : ''}
              <button class="glass-button px-4 py-2 text-red-400" onclick="deleteJob(${convertedJob.id})">
                Delete Job
              </button>
            </div>
          </div>
        `;
        
        modal.classList.remove('hidden');
      } catch (error) {
        console.error('Failed to load job details:', error);
        alert('Failed to load job details: ' + error.message);
      }
    };
    
    const downloadJob = async (jobId) => {
      try {
        const job = jobs.find(j => j.id === jobId);
        if (!job || job.status !== 'completed') {
          alert('Job must be completed to download');
          return;
        }
        
        // For now, simulate download - in production you'd fetch actual content
        const blob = new Blob([`Converted content for job ${jobId}: ${job.title}`], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `job-${jobId}-${job.title.replace(/[^a-z0-9]/gi, '-').toLowerCase()}.html`;
        a.click();
        URL.revokeObjectURL(url);
      } catch (error) {
        console.error('Download failed:', error);
        alert('Download failed: ' + error.message);
      }
    };
    
    const retryJob = async (jobId) => {
      try {
        const updatedJob = await apiClient.retryJob(jobId);
        await loadJobs(); // Refresh the list
        alert('Job retry initiated successfully');
      } catch (error) {
        console.error('Retry failed:', error);
        alert('Retry failed: ' + error.message);
      }
    };
    
    const cancelJob = async (jobId) => {
      try {
        const updatedJob = await apiClient.cancelJob(jobId);
        await loadJobs(); // Refresh the list
        alert('Job cancelled successfully');
      } catch (error) {
        console.error('Cancel failed:', error);
        alert('Cancel failed: ' + error.message);
      }
    };
    
    const deleteJob = async (jobId) => {
      if (confirm('Delete this job?')) {
        try {
          await apiClient.deleteJob(jobId);
          await loadJobs(); // Refresh the list
          
          // Close modal if it's open
          document.getElementById('job-modal').classList.add('hidden');
        } catch (error) {
          console.error('Delete failed:', error);
          alert('Delete failed: ' + error.message);
        }
      }
    };
    
    // Modal close
    document.getElementById('close-modal').addEventListener('click', () => {
      document.getElementById('job-modal').classList.add('hidden');
    });
    
    // Close modal on backdrop click
    document.getElementById('job-modal').addEventListener('click', (e) => {
      if (e.target === e.currentTarget) {
        e.target.classList.add('hidden');
      }
    });
    
    // Make functions global for onclick handlers
    window.downloadJob = downloadJob;
    window.retryJob = retryJob;
    window.deleteJob = deleteJob;
    window.loadJobs = loadJobs;
    
    // Auto-refresh jobs every 10 seconds
    const autoRefresh = () => {
      if (connectionStatus === 'connected' && !isLoading) {
        loadJobs();
      }
    };
    
    // Initial load
    await loadJobs();
    
    // Set up auto-refresh
    setInterval(autoRefresh, 10000);
  });
</script>
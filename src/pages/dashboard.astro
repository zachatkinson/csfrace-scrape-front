---\nimport MainLayout from '../components/layout/MainLayout.astro';\n---\n\n<MainLayout title=\"Dashboard - CSFrace Scrape\">\n  <!-- Dashboard React Component -->\n  <div id=\"dashboard-root\"></div>\n  \n  <script>\n    import { createElement } from 'react';\n    import { createRoot } from 'react-dom/client';\n    import UrlScraper from '../components/wordpress/UrlScraper';\n    import JobQueue from '../components/wordpress/JobQueue';\n    import { LiquidCard } from '../components/liquid-glass';\n    \n    // Dashboard Component\n    const Dashboard = () => {\n      const [jobs, setJobs] = React.useState([]);\n      const [isConnected, setIsConnected] = React.useState(true);\n      \n      // Mock job data for demonstration\n      const mockJobs = [\n        {\n          id: 'job_1',\n          url: 'https://wordpress.example.com/getting-started-shopify',\n          status: 'completed',\n          progress: 100,\n          result: {\n            convertedHtml: '<div>Converted content...</div>',\n            images: ['hero.jpg', 'product-1.jpg'],\n            metadata: {\n              title: 'Getting Started with Shopify',\n              type: 'post',\n              wordCount: 1250,\n              estimatedSize: '2.4 MB'\n            }\n          },\n          createdAt: new Date(Date.now() - 300000),\n          completedAt: new Date(Date.now() - 60000),\n        },\n        {\n          id: 'job_2',\n          url: 'https://wordpress.example.com/premium-widget-features',\n          status: 'scraping',\n          progress: 67,\n          createdAt: new Date(Date.now() - 120000),\n          estimatedTimeRemaining: 45000,\n        },\n        {\n          id: 'job_3',\n          url: 'https://wordpress.example.com/electronics-collection',\n          status: 'pending',\n          progress: 0,\n          createdAt: new Date(Date.now() - 30000),\n        },\n        {\n          id: 'job_4',\n          url: 'https://wordpress.example.com/invalid-post',\n          status: 'error',\n          progress: 25,\n          error: 'Unable to parse WordPress content structure',\n          createdAt: new Date(Date.now() - 180000),\n        },\n      ];\n      \n      React.useEffect(() => {\n        // Initialize with mock data\n        setJobs(mockJobs);\n        \n        // Simulate real-time updates\n        const interval = setInterval(() => {\n          setJobs(prevJobs => {\n            return prevJobs.map(job => {\n              if (job.status === 'scraping' && job.progress < 100) {\n                const newProgress = Math.min(job.progress + Math.random() * 15, 100);\n                return {\n                  ...job,\n                  progress: newProgress,\n                  ...(newProgress >= 100 ? {\n                    status: 'completed',\n                    completedAt: new Date(),\n                    result: {\n                      convertedHtml: '<div>Converted content...</div>',\n                      images: ['image1.jpg', 'image2.jpg'],\n                      metadata: {\n                        title: 'Premium Widget Features',\n                        type: 'post',\n                        wordCount: 890,\n                        estimatedSize: '1.8 MB'\n                      }\n                    }\n                  } : {})\n                };\n              }\n              return job;\n            });\n          });\n        }, 2000);\n        \n        return () => clearInterval(interval);\n      }, []);\n      \n      // Handle new job submission\n      const handleJobSubmit = (job) => {\n        setJobs(prevJobs => [job, ...prevJobs]);\n      };\n      \n      // Handle job updates\n      const handleJobUpdate = (updatedJob) => {\n        setJobs(prevJobs => \n          prevJobs.map(job => \n            job.id === updatedJob.id ? updatedJob : job\n          )\n        );\n      };\n      \n      // Handle job actions\n      const handleJobCancel = (jobId) => {\n        setJobs(prevJobs => \n          prevJobs.map(job => \n            job.id === jobId ? { ...job, status: 'cancelled' } : job\n          )\n        );\n      };\n      \n      const handleJobRetry = (jobId) => {\n        setJobs(prevJobs => \n          prevJobs.map(job => \n            job.id === jobId ? { \n              ...job, \n              status: 'pending', \n              progress: 0, \n              error: undefined \n            } : job\n          )\n        );\n      };\n      \n      const handleJobDelete = (jobId) => {\n        setJobs(prevJobs => prevJobs.filter(job => job.id !== jobId));\n      };\n      \n      const handleJobDownload = (jobId) => {\n        const job = jobs.find(j => j.id === jobId);\n        if (job?.result) {\n          // Simulate download\n          const blob = new Blob([job.result.convertedHtml], { type: 'text/html' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `${job.result.metadata?.title || 'converted'}.html`;\n          a.click();\n          URL.revokeObjectURL(url);\n        }\n      };\n      \n      return React.createElement('div', { className: 'space-y-8' }, [\n        // Connection Status\n        React.createElement(LiquidCard, {\n          key: 'status',\n          className: 'mb-6'\n        }, [\n          React.createElement('div', {\n            key: 'status-content',\n            className: 'flex items-center justify-between'\n          }, [\n            React.createElement('div', {\n              key: 'status-left',\n              className: 'flex items-center space-x-3'\n            }, [\n              React.createElement('div', {\n                key: 'indicator',\n                className: `w-3 h-3 rounded-full ${\n                  isConnected ? 'bg-green-400 animate-pulse' : 'bg-red-400'\n                }`\n              }),\n              React.createElement('div', { key: 'text' }, [\n                React.createElement('h2', {\n                  key: 'title',\n                  className: 'text-xl font-semibold text-white'\n                }, 'WordPress to Shopify Converter'),\n                React.createElement('p', {\n                  key: 'subtitle',\n                  className: 'text-white/70 text-sm'\n                }, isConnected ? 'Connected and ready' : 'Connection lost')\n              ])\n            ]),\n            React.createElement('div', {\n              key: 'stats',\n              className: 'flex items-center space-x-4 text-sm text-white/70'\n            }, [\n              React.createElement('span', { key: 'jobs-stat' }, \n                `${jobs.length} total jobs`\n              ),\n              React.createElement('span', { key: 'completed-stat' }, \n                `${jobs.filter(j => j.status === 'completed').length} completed`\n              )\n            ])\n          ])\n        ]),\n        \n        // URL Scraper\n        React.createElement(UrlScraper, {\n          key: 'scraper',\n          onJobSubmit: handleJobSubmit,\n          onJobUpdate: handleJobUpdate,\n          maxConcurrentJobs: 5\n        }),\n        \n        // Job Queue\n        React.createElement(JobQueue, {\n          key: 'queue',\n          jobs: jobs,\n          onJobCancel: handleJobCancel,\n          onJobRetry: handleJobRetry,\n          onJobDelete: handleJobDelete,\n          onJobDownload: handleJobDownload,\n          maxVisibleJobs: 10\n        })\n      ]);\n    };\n    \n    // Mount the dashboard\n    const container = document.getElementById('dashboard-root');\n    if (container) {\n      const root = createRoot(container);\n      root.render(createElement(Dashboard));\n    }\n  </script>\n</MainLayout>"
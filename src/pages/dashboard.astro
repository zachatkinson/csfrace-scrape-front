---
/**
 * DASHBOARD PAGE - Perfect Astro MCP/DRY/SOLID Architecture
 * =============================================================================
 * Single Responsibility: Coordinate dashboard layout using Islands Architecture
 * Following Astro MCP best practices with Server Islands and component composition
 * NO anti-patterns: No define:vars, no inline HTML, proper SOLID principles
 * =============================================================================
 */

// HYBRID MODE: Client-side rendering for real-time authenticated dashboard
export const prerender = false;

// =============================================================================
// IMPORTS & TYPES (TypeScript strict mode)
// =============================================================================
import type { IDashboardPageProps, IDashboardStats } from '../components/dashboard/types/dashboard.types';
import { DASHBOARD_CONFIG, AVAILABLE_STATUSES } from '../components/dashboard/types/dashboard.types';

import MainLayout from '../components/layout/MainLayout.astro';
import DashboardHeader from '../components/dashboard/components/DashboardHeader.astro';
import FilterPanel from '../components/dashboard/FilterPanel.astro';
import DashboardJobs from '../components/dashboard/DashboardJobs.astro';
import JobModal from '../components/modals/JobModal.astro';


// =============================================================================
// COMPONENT PROPS (Interface Segregation Principle)
// =============================================================================
export interface Props extends IDashboardPageProps {}

const {
  initialStats,
  config = {}
} = Astro.props;

// =============================================================================
// SERVER-SIDE LOGIC (DRY Principle)
// =============================================================================

// Merge default config with provided config
const dashboardConfig = {
  ...DASHBOARD_CONFIG,
  ...config
};

// Default stats if not provided
const defaultStats: IDashboardStats = {
  total: 0,
  active: 0,
  completed: 0,
  failed: 0,
  queued: 0,
  processing: 0
};

const currentStats = initialStats || defaultStats;

// FilterPanel props (centralized configuration)
const filterPanelProps = {
  availableStatuses: AVAILABLE_STATUSES,
  currentFilter: dashboardConfig.defaultFilter,
  currentSort: dashboardConfig.defaultSort,
  searchQuery: '',
  totalJobs: currentStats.total,
  selectedJobs: 0
};

// DashboardHeader props
const headerProps = {
  stats: currentStats
};

// JobModal props
const modalProps = {
  isOpen: false,
  onClose: () => {} // Will be handled by client-side Islands
};
---

<!-- =============================================================================
     DASHBOARD PAGE LAYOUT (Perfect SOLID Architecture)
     Single Responsibility: Layout coordination only
     ============================================================================= -->

<MainLayout title="Job Dashboard - CSFrace Scrape">
  
  <!-- =================================================================
       MAIN DASHBOARD SECTION (Open/Closed Principle)
       ================================================================= -->
  <section 
    class="py-8" 
    data-component="dashboard"
    data-config={JSON.stringify(dashboardConfig)}
    data-initial-stats={JSON.stringify(currentStats)}
  >
    <div class="max-w-7xl mx-auto space-y-8">
      
      <!-- =============================================================
           DASHBOARD HEADER COMPONENT (Single Responsibility)
           ============================================================= -->
      <DashboardHeader {...headerProps} />
      
      <!-- =============================================================
           FILTER PANEL COMPONENT (Single Responsibility)
           ============================================================= -->
      <FilterPanel {...filterPanelProps} />
      
      <!-- =============================================================
           JOBS LIST - SERVER ISLAND (Astro MCP Best Practice)
           ============================================================= -->
      <DashboardJobs server:defer>
        <!-- Fallback loading content (Liskov Substitution) -->
        <div slot="fallback" class="glass-card p-6">
          <div class="text-center py-12" data-loading-state>
            <div class="animate-spin rounded-full w-12 h-12 border-4 border-blue-400/30 border-t-blue-400 mx-auto mb-4"></div>
            <h3 class="text-white font-medium mb-2">Loading jobs...</h3>
            <p class="text-white/60 text-sm">Please wait while we fetch your conversion jobs</p>
          </div>
        </div>
      </DashboardJobs>
    </div>
  </section>
  
  <!-- =================================================================
       JOB DETAIL MODAL COMPONENT (Single Responsibility)
       ================================================================= -->
  <JobModal {...modalProps} />
  
  <!-- =================================================================
       CLIENT-SIDE ENHANCEMENT - COORDINATION VIA ASTRO ISLANDS
       ================================================================= -->
  <!-- DashboardCoordinator loaded via script below (following Astro MCP best practice) -->
  
</MainLayout>

<!-- =============================================================================
     ASTRO ISLANDS ARCHITECTURE (Perfect Implementation)
     Central coordination script with proper event system
     ============================================================================= -->
<script type="module" is:inline>
// Use dynamic import for client-side module loading (Astro best practice)
async function initializeDashboard() {
  try {
    const { DashboardCoordinator } = await import('/src/components/dashboard/scripts/dashboard-coordinator');
    const { createContextLogger } = await import('/src/utils/logger');
    const logger = createContextLogger('DashboardPage');

    // Initialize dashboard coordinator when DOM is ready
    const dashboardCoordinator = new DashboardCoordinator();
    await dashboardCoordinator.initialize();

    // Store instance globally for cleanup
    window.dashboardCoordinator = dashboardCoordinator;

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
      dashboardCoordinator.destroy();
    });

    logger.info('Dashboard initialized successfully');
  } catch (error) {
    console.error('Failed to initialize dashboard:', error);
  }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', initializeDashboard);
} else {
  initializeDashboard();
}
</script>

<!-- =============================================================================
     COMPONENT STYLES (DRY Principle)
     Dashboard-specific styles only (global styles imported via MainLayout)
     ============================================================================= -->
<style>
  /* Dashboard-specific enhancements */
  [data-component="dashboard"] {
    /* Custom dashboard styles if needed */
  }

  /* Loading state animations */
  @keyframes pulse-glow {
    0%, 100% { opacity: 0.5; }
    50% { opacity: 1; }
  }

  [data-loading-state] {
    animation: pulse-glow 2s ease-in-out infinite;
  }
</style>
---
// Dynamic OAuth Callback Handler
// Handles OAuth provider callbacks for any provider (google, github, microsoft, etc.)
const { provider } = Astro.params;

// Validate provider parameter
const validProviders = ['google', 'github', 'microsoft'];
if (!provider || !validProviders.includes(provider)) {
  return new Response('Invalid OAuth provider', { status: 400 });
}
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Completing Authentication - CSFrace Scraper</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      font-family: system-ui, -apple-system, sans-serif;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
    }
    
    .container {
      text-align: center;
      max-width: 400px;
      padding: 2rem;
    }
    
    .spinner {
      width: 48px;
      height: 48px;
      border: 4px solid rgba(255, 255, 255, 0.2);
      border-top: 4px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin: 2rem auto;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    .error {
      background: rgba(239, 68, 68, 0.2);
      border: 1px solid rgba(239, 68, 68, 0.3);
      border-radius: 0.5rem;
      padding: 1rem;
      margin-top: 1rem;
    }
    
    .success {
      background: rgba(34, 197, 94, 0.2);
      border: 1px solid rgba(34, 197, 94, 0.3);
      border-radius: 0.5rem;
      padding: 1rem;
      margin-top: 1rem;
    }
    
    .provider-icon {
      width: 64px;
      height: 64px;
      margin: 0 auto 1rem;
      opacity: 0.8;
    }
    
    .google { color: #ea4335; }
    .github { color: #333; }
    .microsoft { color: #00a1f1; }
  </style>
</head>
<body>
  <div class="container">
    <div class="provider-icon {provider}">
      {provider === 'google' && (
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
      )}
      {provider === 'github' && (
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
        </svg>
      )}
      {provider === 'microsoft' && (
        <svg viewBox="0 0 24 24" fill="currentColor">
          <path d="M0 0h11v11H0V0zm13 0h11v11H13V0zM0 13h11v11H0V13zm13 0h11v11H13V13z"/>
        </svg>
      )}
    </div>
    
    <h1>Completing {provider.charAt(0).toUpperCase() + provider.slice(1)} Authentication</h1>
    <div class="spinner"></div>
    <p id="status">Processing OAuth callback...</p>
    <div id="message" style="display: none;"></div>
  </div>

  <script define:vars={{ provider }} is:inline>
    // OAuth Callback Handler
    (function() {
      const statusElement = document.getElementById('status');
      const messageElement = document.getElementById('message');
      
      async function handleOAuthCallback() {
        try {
          // Get URL parameters
          const urlParams = new URLSearchParams(window.location.search);
          const code = urlParams.get('code');
          const state = urlParams.get('state');
          const error = urlParams.get('error');
          const errorDescription = urlParams.get('error_description');
          
          // Check for OAuth error
          if (error) {
            throw new Error(errorDescription || error);
          }
          
          // Validate required parameters
          if (!code || !state) {
            throw new Error('Missing required OAuth parameters');
          }
          
          // Check if we're in a popup window
          if (window.opener && window.opener.postMessage) {
            // Send callback data to parent window
            window.opener.postMessage({
              type: 'oauth_callback',
              provider: provider,
              code: code,
              state: state
            }, window.location.origin);
            
            statusElement.textContent = 'Authentication successful!';
            messageElement.className = 'success';
            messageElement.style.display = 'block';
            messageElement.textContent = 'Closing window...';
            
            // Close popup window
            setTimeout(() => {
              window.close();
            }, window.CSFRACE_TIMING.UI.SLOW_ANIMATION);
            
          } else {
            // Handle full page redirect scenario
            statusElement.textContent = 'Redirecting to application...';
            
            // Redirect to main app with callback parameters
            const redirectUrl = new URL('/', window.location.origin);
            redirectUrl.searchParams.set('oauth_callback', '1');
            redirectUrl.searchParams.set('provider', provider);
            redirectUrl.searchParams.set('code', code);
            redirectUrl.searchParams.set('state', state);
            
            window.location.href = redirectUrl.toString();
          }
          
        } catch (error) {
          console.error('OAuth callback error:', error);
          
          statusElement.textContent = 'Authentication failed';
          messageElement.className = 'error';
          messageElement.style.display = 'block';
          messageElement.textContent = error.message || 'An unknown error occurred';
          
          // Try to notify parent window of error
          if (window.opener && window.opener.postMessage) {
            window.opener.postMessage({
              type: 'oauth_error',
              error: error.message || 'Authentication failed'
            }, window.location.origin);
            
            setTimeout(() => {
              window.close();
            }, window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL);
          } else {
            // Redirect back to main app with error
            setTimeout(() => {
              window.location.href = '/?auth_error=' + encodeURIComponent(error.message || 'Authentication failed');
            }, window.CSFRACE_TIMING.JOB.JOB_STATUS_CHECK_INTERVAL);
          }
        }
      }
      
      // Start the callback handling process
      handleOAuthCallback();
    })();
  </script>
</body>
</html>
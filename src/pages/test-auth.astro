---
// Test page for SSO + Passkeys authentication flow
import MainLayout from '../components/layout/MainLayout.astro';
---

<MainLayout title="Authentication Test - SSO + Passkeys">
  <div class="min-h-screen flex items-center justify-center p-4">
    <div class="w-full max-w-md">
      <!-- Test Login Form -->
      <div class="mb-8">
        <h2 class="text-xl font-semibold text-white mb-4 text-center">Test Login Form</h2>
        <div id="login-form-container"></div>
      </div>
      
      <!-- Test Register Form -->
      <div class="mb-8">
        <h2 class="text-xl font-semibold text-white mb-4 text-center">Test Register Form</h2>
        <div id="register-form-container"></div>
      </div>
      
      <!-- Test Auth Modal -->
      <div class="text-center">
        <button 
          id="open-auth-modal" 
          class="liquid-glass rounded-glass px-6 py-3 bg-blue-600/80 hover:bg-blue-600 text-white font-medium transition-all shadow-glass hover:shadow-glass-lg"
        >
          Open Auth Modal
        </button>
      </div>
      
      <!-- Auth Modal Container -->
      <div id="auth-modal-container"></div>
    </div>
  </div>
</MainLayout>

<script type="module" is:inline>
  import { LoginForm } from '../components/auth/LoginForm.tsx';
  import { RegisterForm } from '../components/auth/RegisterForm.tsx';
  import { AuthModal } from '../components/auth/AuthModal.tsx';
  import React from 'react';

  // ASTRO MCP BEST PRACTICE: Static imports following Astro guidelines
  import { createRoot } from 'react-dom/client';

  document.addEventListener('DOMContentLoaded', () => {

    // DRY Principle: Reusable component initialization function
    const initializeReactComponent = (containerId, Component, props) => {
      const container = document.getElementById(containerId);
      if (container && !container.dataset.initialized) {
        const root = createRoot(container);
        root.render(React.createElement(Component, props));
        container.dataset.initialized = 'true';
      }
    };

    // Test LoginForm (Single Responsibility)
    initializeReactComponent('login-form-container', LoginForm, {
      onSuccess: () => {
        if (import.meta.env.DEV) {
          // eslint-disable-next-line no-console
          console.log('Login success!');
        }
      },
      onSwitchToRegister: () => {
        if (import.meta.env.DEV) {
          // eslint-disable-next-line no-console
          console.log('Switch to register');
        }
      },
    });

    // Test RegisterForm (Single Responsibility)
    initializeReactComponent('register-form-container', RegisterForm, {
      onSuccess: () => {
        if (import.meta.env.DEV) {
          // eslint-disable-next-line no-console
          console.log('Register success!');
        }
      },
      onSwitchToLogin: () => {
        if (import.meta.env.DEV) {
          // eslint-disable-next-line no-console
          console.log('Switch to login');
        }
      },
    });

    // Test AuthModal (Following Astro MCP patterns)
    const modalContainer = document.getElementById('auth-modal-container');
    const modalButton = document.getElementById('open-auth-modal');

    if (modalContainer && modalButton && !modalContainer.dataset.initialized) {
      const modalRoot = createRoot(modalContainer);
      let isModalOpen = false;
    
    const updateModal = () => {
      modalRoot.render(
        React.createElement(AuthModal, {
          isOpen: isModalOpen,
          onClose: () => {
            isModalOpen = false;
            updateModal();
          },
          onSuccess: () => {
            if (import.meta.env.DEV) {
              // eslint-disable-next-line no-console
              console.log('Auth modal success!');
            }
            isModalOpen = false;
            updateModal();
          },
          initialMode: 'login',
        })
      );
    };
    
      modalButton.addEventListener('click', () => {
        isModalOpen = true;
        updateModal();
      });

      // Initial render
      updateModal();
      modalContainer.dataset.initialized = 'true';
    }
  });
</script>